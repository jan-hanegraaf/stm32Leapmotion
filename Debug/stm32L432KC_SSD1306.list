
stm32L432KC_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000887c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb0  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099bc  080099bc  00020364  2**0
                  CONTENTS
  4 .ARM          00000008  080099bc  080099bc  000199bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c4  080099c4  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  080099cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001614  20000364  08009d30  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001978  08009d30  00021978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d3ef  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ad1  00000000  00000000  0003d783  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  00041258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  00042568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242e9  00000000  00000000  00043698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013788  00000000  00000000  00067981  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6400  00000000  00000000  0007b109  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005464  00000000  00000000  00141584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000364 	.word	0x20000364
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089f4 	.word	0x080089f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000368 	.word	0x20000368
 80001cc:	080089f4 	.word	0x080089f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	ssd1306_TestAll();
 8000584:	f000 fc14 	bl	8000db0 <ssd1306_TestAll>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fd95 	bl	80010be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f80c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f910 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f8de 	bl	800075c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005a0:	f000 f89c 	bl	80006dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80005a4:	f006 fe1c 	bl	80071e0 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 80005a8:	f7ff ffea 	bl	8000580 <init>
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x20>
	...

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b0ac      	sub	sp, #176	; 0xb0
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fbd8 	bl	8007d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2254      	movs	r2, #84	; 0x54
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fbca 	bl	8007d74 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005e0:	f002 fbe2 	bl	8002da8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e4:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <SystemClock_Config+0x128>)
 80005e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ea:	4a3b      	ldr	r2, [pc, #236]	; (80006d8 <SystemClock_Config+0x128>)
 80005ec:	f023 0318 	bic.w	r3, r3, #24
 80005f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f4:	2314      	movs	r3, #20
 80005f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000614:	2301      	movs	r3, #1
 8000616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000626:	2307      	movs	r3, #7
 8000628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fc37 	bl	8002eb0 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000648:	f000 f902 	bl	8000850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f810 	bl	800368c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000672:	f000 f8ed 	bl	8000850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000676:	f242 0342 	movw	r3, #8258	; 0x2042
 800067a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800068a:	2301      	movs	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000692:	2318      	movs	r3, #24
 8000694:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000696:	2307      	movs	r3, #7
 8000698:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006a6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f9f2 	bl	8003a94 <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80006b6:	f000 f8cb 	bl	8000850 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f002 fb91 	bl	8002de4 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006c8:	f000 f8c2 	bl	8000850 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006cc:	f003 fbd4 	bl	8003e78 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d0:	bf00      	nop
 80006d2:	37b0      	adds	r7, #176	; 0xb0
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_I2C1_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_I2C1_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_I2C1_Init+0x74>)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_I2C1_Init+0x7c>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_I2C1_Init+0x74>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_I2C1_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C1_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_I2C1_Init+0x74>)
 8000718:	f000 fff8 	bl	800170c <HAL_I2C_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000722:	f000 f895 	bl	8000850 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C1_Init+0x74>)
 800072a:	f001 fb5b 	bl	8001de4 <HAL_I2CEx_ConfigAnalogFilter>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 f88c 	bl	8000850 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_I2C1_Init+0x74>)
 800073c:	f001 fb9d 	bl	8001e7a <HAL_I2CEx_ConfigDigitalFilter>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 f883 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200009b8 	.word	0x200009b8
 8000754:	40005400 	.word	0x40005400
 8000758:	00707cbb 	.word	0x00707cbb

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_USART2_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x58>)
 80007a0:	f003 fc6a 	bl	8004078 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f851 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000a10 	.word	0x20000a10
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0x90>)
 8000820:	f000 ff5c 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000824:	2308      	movs	r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_GPIO_Init+0x90>)
 800083c:	f000 fde4 	bl	8001408 <HAL_GPIO_Init>

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48000400 	.word	0x48000400

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <ssd1306_Reset>:

#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af04      	add	r7, sp, #16
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	2200      	movs	r2, #0
 8000888:	2178      	movs	r1, #120	; 0x78
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <ssd1306_WriteCommand+0x2c>)
 800088c:	f000 ffce 	bl	800182c <HAL_I2C_Mem_Write>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200009b8 	.word	0x200009b8

0800089c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af04      	add	r7, sp, #16
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f04f 32ff 	mov.w	r2, #4294967295
 80008ae:	9202      	str	r2, [sp, #8]
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	2240      	movs	r2, #64	; 0x40
 80008ba:	2178      	movs	r1, #120	; 0x78
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <ssd1306_WriteData+0x30>)
 80008be:	f000 ffb5 	bl	800182c <HAL_I2C_Mem_Write>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200009b8 	.word	0x200009b8

080008d0 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80008d4:	f7ff ffc3 	bl	800085e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f000 fc61 	bl	80011a0 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80008de:	20ae      	movs	r0, #174	; 0xae
 80008e0:	f7ff ffc4 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008e4:	2020      	movs	r0, #32
 80008e6:	f7ff ffc1 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ffbe 	bl	800086c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008f0:	20b0      	movs	r0, #176	; 0xb0
 80008f2:	f7ff ffbb 	bl	800086c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008f6:	20c8      	movs	r0, #200	; 0xc8
 80008f8:	f7ff ffb8 	bl	800086c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff ffb5 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000902:	2010      	movs	r0, #16
 8000904:	f7ff ffb2 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000908:	2040      	movs	r0, #64	; 0x40
 800090a:	f7ff ffaf 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800090e:	2081      	movs	r0, #129	; 0x81
 8000910:	f7ff ffac 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000914:	20ff      	movs	r0, #255	; 0xff
 8000916:	f7ff ffa9 	bl	800086c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800091a:	20a1      	movs	r0, #161	; 0xa1
 800091c:	f7ff ffa6 	bl	800086c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000920:	20a6      	movs	r0, #166	; 0xa6
 8000922:	f7ff ffa3 	bl	800086c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000926:	20a8      	movs	r0, #168	; 0xa8
 8000928:	f7ff ffa0 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 800092c:	203f      	movs	r0, #63	; 0x3f
 800092e:	f7ff ff9d 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000932:	20a4      	movs	r0, #164	; 0xa4
 8000934:	f7ff ff9a 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000938:	20d3      	movs	r0, #211	; 0xd3
 800093a:	f7ff ff97 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ff94 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000944:	20d5      	movs	r0, #213	; 0xd5
 8000946:	f7ff ff91 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800094a:	20f0      	movs	r0, #240	; 0xf0
 800094c:	f7ff ff8e 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000950:	20d9      	movs	r0, #217	; 0xd9
 8000952:	f7ff ff8b 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000956:	2022      	movs	r0, #34	; 0x22
 8000958:	f7ff ff88 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800095c:	20da      	movs	r0, #218	; 0xda
 800095e:	f7ff ff85 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000962:	2012      	movs	r0, #18
 8000964:	f7ff ff82 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000968:	20db      	movs	r0, #219	; 0xdb
 800096a:	f7ff ff7f 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800096e:	2020      	movs	r0, #32
 8000970:	f7ff ff7c 	bl	800086c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000974:	208d      	movs	r0, #141	; 0x8d
 8000976:	f7ff ff79 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800097a:	2014      	movs	r0, #20
 800097c:	f7ff ff76 	bl	800086c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000980:	20af      	movs	r0, #175	; 0xaf
 8000982:	f7ff ff73 	bl	800086c <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f810 	bl	80009ac <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800098c:	f000 f830 	bl	80009f0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <ssd1306_Init+0xd8>)
 8000992:	2200      	movs	r2, #0
 8000994:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <ssd1306_Init+0xd8>)
 8000998:	2200      	movs	r2, #0
 800099a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <ssd1306_Init+0xd8>)
 800099e:	2201      	movs	r2, #1
 80009a0:	715a      	strb	r2, [r3, #5]
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000780 	.word	0x20000780

080009ac <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e00d      	b.n	80009d8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <ssd1306_Fill+0x1a>
 80009c2:	2100      	movs	r1, #0
 80009c4:	e000      	b.n	80009c8 <ssd1306_Fill+0x1c>
 80009c6:	21ff      	movs	r1, #255	; 0xff
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <ssd1306_Fill+0x40>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	460a      	mov	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009de:	d3ed      	bcc.n	80009bc <ssd1306_Fill+0x10>
    }
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000380 	.word	0x20000380

080009f0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	e016      	b.n	8000a2a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	3b50      	subs	r3, #80	; 0x50
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff32 	bl	800086c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff ff2f 	bl	800086c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000a0e:	2010      	movs	r0, #16
 8000a10:	f7ff ff2c 	bl	800086c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	01db      	lsls	r3, r3, #7
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <ssd1306_UpdateScreen+0x48>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff3c 	bl	800089c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	3301      	adds	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d9e5      	bls.n	80009fc <ssd1306_UpdateScreen+0xc>
    }
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000380 	.word	0x20000380

08000a3c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	460b      	mov	r3, r1
 8000a48:	71bb      	strb	r3, [r7, #6]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db48      	blt.n	8000ae8 <ssd1306_DrawPixel+0xac>
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	2b3f      	cmp	r3, #63	; 0x3f
 8000a5a:	d845      	bhi.n	8000ae8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <ssd1306_DrawPixel+0xb8>)
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000a64:	797b      	ldrb	r3, [r7, #5]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf0c      	ite	eq
 8000a6a:	2301      	moveq	r3, #1
 8000a6c:	2300      	movne	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d11a      	bne.n	8000aae <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	b2d8      	uxtb	r0, r3
 8000a80:	4603      	mov	r3, r0
 8000a82:	01db      	lsls	r3, r3, #7
 8000a84:	4413      	add	r3, r2
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <ssd1306_DrawPixel+0xbc>)
 8000a88:	5cd3      	ldrb	r3, [r2, r3]
 8000a8a:	b25a      	sxtb	r2, r3
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2101      	movs	r1, #1
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b259      	sxtb	r1, r3
 8000a9e:	79fa      	ldrb	r2, [r7, #7]
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	01db      	lsls	r3, r3, #7
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <ssd1306_DrawPixel+0xbc>)
 8000aaa:	54d1      	strb	r1, [r2, r3]
 8000aac:	e01d      	b.n	8000aea <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	01db      	lsls	r3, r3, #7
 8000aba:	4413      	add	r3, r2
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <ssd1306_DrawPixel+0xbc>)
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	b25a      	sxtb	r2, r3
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	b259      	sxtb	r1, r3
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	4603      	mov	r3, r0
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2c9      	uxtb	r1, r1
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <ssd1306_DrawPixel+0xbc>)
 8000ae4:	54d1      	strb	r1, [r2, r3]
 8000ae6:	e000      	b.n	8000aea <ssd1306_DrawPixel+0xae>
        return;
 8000ae8:	bf00      	nop
    }
}
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	20000780 	.word	0x20000780
 8000af8:	20000380 	.word	0x20000380

08000afc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	1d38      	adds	r0, r7, #4
 8000b06:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4623      	mov	r3, r4
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	4613      	mov	r3, r2
 8000b12:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b1f      	cmp	r3, #31
 8000b18:	d902      	bls.n	8000b20 <ssd1306_WriteChar+0x24>
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b1e:	d901      	bls.n	8000b24 <ssd1306_WriteChar+0x28>
        return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e06d      	b.n	8000c00 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	793b      	ldrb	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	2b80      	cmp	r3, #128	; 0x80
 8000b30:	dc06      	bgt.n	8000b40 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000b32:	4b35      	ldr	r3, [pc, #212]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000b34:	885b      	ldrh	r3, [r3, #2]
 8000b36:	461a      	mov	r2, r3
 8000b38:	797b      	ldrb	r3, [r7, #5]
 8000b3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b3c:	2b40      	cmp	r3, #64	; 0x40
 8000b3e:	dd01      	ble.n	8000b44 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e05d      	b.n	8000c00 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e04c      	b.n	8000be4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	3b20      	subs	r3, #32
 8000b50:	7979      	ldrb	r1, [r7, #5]
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	e034      	b.n	8000bd4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d012      	beq.n	8000ba0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4413      	add	r3, r2
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000b8a:	885b      	ldrh	r3, [r3, #2]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	7bba      	ldrb	r2, [r7, #14]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f7ff ff4f 	bl	8000a3c <ssd1306_DrawPixel>
 8000b9e:	e016      	b.n	8000bce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b2d8      	uxtb	r0, r3
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2d9      	uxtb	r1, r3
 8000bbc:	7bbb      	ldrb	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2301      	moveq	r3, #1
 8000bc4:	2300      	movne	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f7ff ff37 	bl	8000a3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	793b      	ldrb	r3, [r7, #4]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d3c5      	bcc.n	8000b6a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	461a      	mov	r2, r3
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d3ad      	bcc.n	8000b4a <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <ssd1306_WriteChar+0x10c>)
 8000bfc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3724      	adds	r7, #36	; 0x24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	20000780 	.word	0x20000780

08000c0c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	1d38      	adds	r0, r7, #4
 8000c16:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c1a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000c1c:	e012      	b.n	8000c44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	7818      	ldrb	r0, [r3, #0]
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	1d3a      	adds	r2, r7, #4
 8000c26:	ca06      	ldmia	r2, {r1, r2}
 8000c28:	f7ff ff68 	bl	8000afc <ssd1306_WriteChar>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d002      	beq.n	8000c3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	e008      	b.n	8000c50 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e8      	bne.n	8000c1e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	71fb      	strb	r3, [r7, #7]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <ssd1306_SetCursor+0x2c>)
 8000c6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <ssd1306_SetCursor+0x2c>)
 8000c76:	805a      	strh	r2, [r3, #2]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000780 	.word	0x20000780

08000c88 <ssd1306_TestFonts>:
    } while((end - start) < 8000);

    HAL_Delay(1000);
}

void ssd1306_TestFonts() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
	time_t t;
	srand((unsigned) &t);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f007 f876 	bl	8007d84 <srand>
	int check =0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
	int randx = rand()%128;
 8000c9c:	f007 f896 	bl	8007dcc <rand>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	425a      	negs	r2, r3
 8000ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cac:	bf58      	it	pl
 8000cae:	4253      	negpl	r3, r2
 8000cb0:	61fb      	str	r3, [r7, #28]
	int randy = rand()%63;
 8000cb2:	f007 f88b 	bl	8007dcc <rand>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <ssd1306_TestFonts+0x114>)
 8000cba:	fb83 1302 	smull	r1, r3, r3, r2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	1159      	asrs	r1, r3, #5
 8000cc2:	17d3      	asrs	r3, r2, #31
 8000cc4:	1ac9      	subs	r1, r1, r3
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	1a5b      	subs	r3, r3, r1
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	61bb      	str	r3, [r7, #24]
	 ssd1306_DrawPixel(randx, randy, White);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	b2d1      	uxtb	r1, r2
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff feae 	bl	8000a3c <ssd1306_DrawPixel>
	 ssd1306_UpdateScreen();
 8000ce0:	f7ff fe86 	bl	80009f0 <ssd1306_UpdateScreen>
		      ssd1306_WriteString(&*testing, Font_11x18, White);
		      ssd1306_UpdateScreen();
}
*/

		ssd1306_Fill(Black);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f7ff fe61 	bl	80009ac <ssd1306_Fill>
				char x[3];
				char z[3];
for(int index =0; index <3; index++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
 8000cee:	e016      	b.n	8000d1e <ssd1306_TestFonts+0x96>
	x[index]=testing[index+1];
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <ssd1306_TestFonts+0x118>)
 8000cf6:	5cd1      	ldrb	r1, [r2, r3]
 8000cf8:	f107 020c 	add.w	r2, r7, #12
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	4413      	add	r3, r2
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
	z[index]= testing[index+5];
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	3305      	adds	r3, #5
 8000d08:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <ssd1306_TestFonts+0x118>)
 8000d0a:	5cd1      	ldrb	r1, [r2, r3]
 8000d0c:	f107 0208 	add.w	r2, r7, #8
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	4413      	add	r3, r2
 8000d14:	460a      	mov	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
for(int index =0; index <3; index++){
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	dde5      	ble.n	8000cf0 <ssd1306_TestFonts+0x68>
				// ssd1306_SetCursor(2, 18+18);
				// ssd1306_WriteString(z, Font_11x18, White);
				// ssd1306_UpdateScreen();
				 int locx;
				 int locz;
				 sscanf(x, "%d", &locx);
 8000d24:	1d3a      	adds	r2, r7, #4
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	491e      	ldr	r1, [pc, #120]	; (8000da4 <ssd1306_TestFonts+0x11c>)
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f007 f881 	bl	8007e34 <siscanf>
				 sscanf(z, "%d", &locz);
 8000d32:	463a      	mov	r2, r7
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	491a      	ldr	r1, [pc, #104]	; (8000da4 <ssd1306_TestFonts+0x11c>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f007 f87a 	bl	8007e34 <siscanf>
				 ssd1306_DrawPixel(locx, locz, White);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	b2d1      	uxtb	r1, r2
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe76 	bl	8000a3c <ssd1306_DrawPixel>
				 ssd1306_DrawPixel(randx, randy, White);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	b2d1      	uxtb	r1, r2
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fe6e 	bl	8000a3c <ssd1306_DrawPixel>
				 ssd1306_UpdateScreen();
 8000d60:	f7ff fe46 	bl	80009f0 <ssd1306_UpdateScreen>
if( (locx == randx) && (locz == randy)){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d1bb      	bne.n	8000ce4 <ssd1306_TestFonts+0x5c>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d1b7      	bne.n	8000ce4 <ssd1306_TestFonts+0x5c>
	break;
}
}
	ssd1306_SetCursor(2, 18);
 8000d74:	2112      	movs	r1, #18
 8000d76:	2002      	movs	r0, #2
 8000d78:	f7ff ff6e 	bl	8000c58 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff fe15 	bl	80009ac <ssd1306_Fill>
	ssd1306_WriteString("Yeaj", Font_11x18, White);
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <ssd1306_TestFonts+0x120>)
 8000d84:	2301      	movs	r3, #1
 8000d86:	ca06      	ldmia	r2, {r1, r2}
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <ssd1306_TestFonts+0x124>)
 8000d8a:	f7ff ff3f 	bl	8000c0c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000d8e:	f7ff fe2f 	bl	80009f0 <ssd1306_UpdateScreen>

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	82082083 	.word	0x82082083
 8000da0:	20000a04 	.word	0x20000a04
 8000da4:	08008a0c 	.word	0x08008a0c
 8000da8:	20000000 	.word	0x20000000
 8000dac:	08008a10 	.word	0x08008a10

08000db0 <ssd1306_TestAll>:
    ssd1306_SetCursor(2, 18);
    ssd1306_WriteString(buff, Font_11x18, Black);
    ssd1306_UpdateScreen();
}

void ssd1306_TestAll() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000db4:	f7ff fd8c 	bl	80008d0 <ssd1306_Init>
  //  ssd1306_TestFPS();
  //  HAL_Delay(3000);
  //  ssd1306_TestBorder();
    ssd1306_TestFonts();
 8000db8:	f7ff ff66 	bl	8000c88 <ssd1306_TestFonts>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x44>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x44>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <HAL_MspInit+0x44>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_I2C_MspInit+0x80>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d129      	bne.n	8000e7e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 fad1 	bl	8001408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	; 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_UART_MspInit+0xa0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d13a      	bne.n	8000f28 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_UART_MspInit+0xa4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f000 fa82 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f16:	2303      	movs	r3, #3
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f000 fa70 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40021000 	.word	0x40021000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8c:	f000 f8ea 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <USB_IRQHandler+0x10>)
 8000f9a:	f001 f8c4 	bl	8002126 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20001700 	.word	0x20001700

08000fa8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x50>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x16>
		heap_end = &end;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <_sbrk+0x50>)
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <_sbrk+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <_sbrk+0x50>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <_sbrk+0x50>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	466a      	mov	r2, sp
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d907      	bls.n	8000fe2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fd2:	f006 fea5 	bl	8007d20 <__errno>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	230c      	movs	r3, #12
 8000fda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <_sbrk+0x50>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <_sbrk+0x50>)
 8000fec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000788 	.word	0x20000788
 8000ffc:	20001978 	.word	0x20001978

08001000 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <SystemInit+0x64>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <SystemInit+0x64>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <SystemInit+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <SystemInit+0x68>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <SystemInit+0x68>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SystemInit+0x68>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <SystemInit+0x68>)
 800102c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001030:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001034:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <SystemInit+0x68>)
 8001038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800103c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SystemInit+0x68>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <SystemInit+0x68>)
 8001044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <SystemInit+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SystemInit+0x64>)
 8001052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	40021000 	.word	0x40021000

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001070:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001072:	e003      	b.n	800107c <LoopCopyDataInit>

08001074 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001076:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001078:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800107a:	3104      	adds	r1, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001080:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001082:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001084:	d3f6      	bcc.n	8001074 <CopyDataInit>
	ldr	r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001088:	e002      	b.n	8001090 <LoopFillZerobss>

0800108a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800108a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800108c:	f842 3b04 	str.w	r3, [r2], #4

08001090 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <LoopForever+0x16>)
	cmp	r2, r3
 8001092:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001094:	d3f9      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001096:	f7ff ffb3 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f006 fe47 	bl	8007d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fa75 	bl	800058c <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010a8:	080099cc 	.word	0x080099cc
	ldr	r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010b0:	20000364 	.word	0x20000364
	ldr	r2, =_sbss
 80010b4:	20000364 	.word	0x20000364
	ldr	r3, = _ebss
 80010b8:	20001978 	.word	0x20001978

080010bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_IRQHandler>

080010be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f95b 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f80e 	bl	80010f0 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	e001      	b.n	80010e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e0:	f7ff fe6e 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <HAL_InitTick+0x68>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d022      	beq.n	800114a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_InitTick+0x6c>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_InitTick+0x68>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001110:	fbb1 f3f3 	udiv	r3, r1, r3
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f968 	bl	80013ee <HAL_SYSTICK_Config>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10f      	bne.n	8001144 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d809      	bhi.n	800113e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	2200      	movs	r2, #0
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	f04f 30ff 	mov.w	r0, #4294967295
 8001132:	f000 f932 	bl	800139a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_InitTick+0x70>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e007      	b.n	800114e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	e004      	b.n	800114e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000010 	.word	0x20000010
 800115c:	20000008 	.word	0x20000008
 8001160:	2000000c 	.word	0x2000000c

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4413      	add	r3, r2
 8001172:	4a03      	ldr	r2, [pc, #12]	; (8001180 <HAL_IncTick+0x1c>)
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000a90 	.word	0x20000a90
 8001184:	20000010 	.word	0x20000010

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000a90 	.word	0x20000a90

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d004      	beq.n	80011c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_Delay+0x40>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c4:	bf00      	nop
 80011c6:	f7ff ffdf 	bl	8001188 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d8f7      	bhi.n	80011c6 <HAL_Delay+0x26>
  {
  }
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000010 	.word	0x20000010

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e148      	b.n	80016aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 813a 	beq.w	80016a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x38>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d123      	bne.n	8001488 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	6939      	ldr	r1, [r7, #16]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d00b      	beq.n	80014dc <HAL_GPIO_Init+0xd4>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8094 	beq.w	80016a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157c:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <HAL_GPIO_Init+0x2c0>)
 800157e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001580:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <HAL_GPIO_Init+0x2c0>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6613      	str	r3, [r2, #96]	; 0x60
 8001588:	4b4f      	ldr	r3, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x2c0>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_GPIO_Init+0x2c4>)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1d4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <HAL_GPIO_Init+0x2c8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1d0>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_GPIO_Init+0x2cc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1cc>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x1d6>
 80015d4:	2307      	movs	r3, #7
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x1d6>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x1d6>
 80015dc:	2300      	movs	r3, #0
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ee:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x2c4>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_GPIO_Init+0x2d0>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f aeaf 	bne.w	8001418 <HAL_GPIO_Init+0x10>
  }
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	48000800 	.word	0x48000800
 80016d8:	40010400 	.word	0x40010400

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e081      	b.n	8001822 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff fb68 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800175c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800176c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e006      	b.n	8001794 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001792:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d104      	bne.n	80017a6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	ea42 0103 	orr.w	r1, r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	021a      	lsls	r2, r3, #8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69d9      	ldr	r1, [r3, #28]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2220      	movs	r2, #32
 800180e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4603      	mov	r3, r0
 800183c:	817b      	strh	r3, [r7, #10]
 800183e:	460b      	mov	r3, r1
 8001840:	813b      	strh	r3, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	f040 80f9 	bne.w	8001a46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_I2C_Mem_Write+0x34>
 800185a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0ed      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <HAL_I2C_Mem_Write+0x4e>
 8001876:	2302      	movs	r3, #2
 8001878:	e0e6      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001882:	f7ff fc81 	bl	8001188 <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2319      	movs	r3, #25
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f955 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0d1      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2221      	movs	r2, #33	; 0x21
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4603      	mov	r3, r0
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f8b9 	bl	8001a54 <I2C_RequestMemoryWrite>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0a9      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d90e      	bls.n	800191c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	22ff      	movs	r2, #255	; 0xff
 8001902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	b2da      	uxtb	r2, r3
 800190a:	8979      	ldrh	r1, [r7, #10]
 800190c:	2300      	movs	r3, #0
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fa37 	bl	8001d88 <I2C_TransferConfig>
 800191a:	e00f      	b.n	800193c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192a:	b2da      	uxtb	r2, r3
 800192c:	8979      	ldrh	r1, [r7, #10]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fa26 	bl	8001d88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f93f 	bl	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e07b      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	781a      	ldrb	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001978:	3b01      	subs	r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d034      	beq.n	80019f4 <HAL_I2C_Mem_Write+0x1c8>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d130      	bne.n	80019f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001998:	2200      	movs	r2, #0
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f8d1 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04d      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d90e      	bls.n	80019d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	8979      	ldrh	r1, [r7, #10]
 80019c4:	2300      	movs	r3, #0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f9db 	bl	8001d88 <I2C_TransferConfig>
 80019d2:	e00f      	b.n	80019f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	2300      	movs	r3, #0
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f9ca 	bl	8001d88 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d19e      	bne.n	800193c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f91e 	bl	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e01a      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2220      	movs	r2, #32
 8001a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6859      	ldr	r1, [r3, #4]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_I2C_Mem_Write+0x224>)
 8001a26:	400b      	ands	r3, r1
 8001a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a46:	2302      	movs	r3, #2
  }
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	fe00e800 	.word	0xfe00e800

08001a54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	8979      	ldrh	r1, [r7, #10]
 8001a74:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <I2C_RequestMemoryWrite+0xa4>)
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f983 	bl	8001d88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f89c 	bl	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e02c      	b.n	8001af0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9c:	893b      	ldrh	r3, [r7, #8]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
 8001aa6:	e015      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	69b9      	ldr	r1, [r7, #24]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f882 	bl	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e012      	b.n	8001af0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aca:	893b      	ldrh	r3, [r7, #8]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f830 	bl	8001b44 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	80002000 	.word	0x80002000

08001afc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d103      	bne.n	8001b1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d007      	beq.n	8001b38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	619a      	str	r2, [r3, #24]
  }
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b54:	e022      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d01e      	beq.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff fb13 	bl	8001188 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d113      	bne.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f043 0220 	orr.w	r2, r3, #32
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00f      	b.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d0cd      	beq.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd0:	e02c      	b.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f870 	bl	8001cbc <I2C_IsAcknowledgeFailed>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e02a      	b.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d01e      	beq.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bee:	f7ff facb 	bl	8001188 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d302      	bcc.n	8001c04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d113      	bne.n	8001c2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e007      	b.n	8001c3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d1cb      	bne.n	8001bd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c50:	e028      	b.n	8001ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f830 	bl	8001cbc <I2C_IsAcknowledgeFailed>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e026      	b.n	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff fa8f 	bl	8001188 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d113      	bne.n	8001ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e007      	b.n	8001cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d1cf      	bne.n	8001c52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d151      	bne.n	8001d7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd6:	e022      	b.n	8001d1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cde:	d01e      	beq.n	8001d1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff fa52 	bl	8001188 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d302      	bcc.n	8001cf6 <I2C_IsAcknowledgeFailed+0x3a>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d113      	bne.n	8001d1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02e      	b.n	8001d7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d1d5      	bne.n	8001cd8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fedd 	bl	8001afc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <I2C_IsAcknowledgeFailed+0xc8>)
 8001d4e:	400b      	ands	r3, r1
 8001d50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	fe00e800 	.word	0xfe00e800

08001d88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	817b      	strh	r3, [r7, #10]
 8001d96:	4613      	mov	r3, r2
 8001d98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	0d5b      	lsrs	r3, r3, #21
 8001da4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <I2C_TransferConfig+0x58>)
 8001daa:	430b      	orrs	r3, r1
 8001dac:	43db      	mvns	r3, r3
 8001dae:	ea02 0103 	and.w	r1, r2, r3
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001db8:	7a7b      	ldrb	r3, [r7, #9]
 8001dba:	041b      	lsls	r3, r3, #16
 8001dbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	03ff63ff 	.word	0x03ff63ff

08001de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d138      	bne.n	8001e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e032      	b.n	8001e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2224      	movs	r2, #36	; 0x24
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6819      	ldr	r1, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
  }
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d139      	bne.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e033      	b.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2224      	movs	r2, #36	; 0x24
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f14:	b08b      	sub	sp, #44	; 0x2c
 8001f16:	af06      	add	r7, sp, #24
 8001f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0da      	b.n	80020da <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d106      	bne.n	8001f3e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f005 fb7b 	bl	8007634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fd04 	bl	8004958 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	687e      	ldr	r6, [r7, #4]
 8001f58:	466d      	mov	r5, sp
 8001f5a:	f106 0410 	add.w	r4, r6, #16
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	602b      	str	r3, [r5, #0]
 8001f66:	1d33      	adds	r3, r6, #4
 8001f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f002 fccb 	bl	8004906 <USB_CoreInit>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e0ab      	b.n	80020da <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fd02 	bl	8004992 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	2300      	movs	r3, #0
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	e035      	b.n	8002000 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3329      	adds	r3, #41	; 0x29
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	4413      	add	r3, r2
 8001faa:	3328      	adds	r3, #40	; 0x28
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	b291      	uxth	r1, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	015b      	lsls	r3, r3, #5
 8001fba:	4413      	add	r3, r2
 8001fbc:	3336      	adds	r3, #54	; 0x36
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	015b      	lsls	r3, r3, #5
 8001fc8:	4413      	add	r3, r2
 8001fca:	332b      	adds	r3, #43	; 0x2b
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	015b      	lsls	r3, r3, #5
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	4413      	add	r3, r2
 8001fe6:	333c      	adds	r3, #60	; 0x3c
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3c4      	bcc.n	8001f94 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e031      	b.n	8002074 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	015b      	lsls	r3, r3, #5
 8002016:	4413      	add	r3, r2
 8002018:	f203 1329 	addw	r3, r3, #297	; 0x129
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	4413      	add	r3, r2
 8002028:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	4413      	add	r3, r2
 8002038:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	015b      	lsls	r3, r3, #5
 8002046:	4413      	add	r3, r2
 8002048:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	015b      	lsls	r3, r3, #5
 8002056:	4413      	add	r3, r2
 8002058:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	330a      	adds	r3, #10
 8002066:	015b      	lsls	r3, r3, #5
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	3301      	adds	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d3c8      	bcc.n	8002010 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	687e      	ldr	r6, [r7, #4]
 8002086:	466d      	mov	r5, sp
 8002088:	f106 0410 	add.w	r4, r6, #16
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	1d33      	adds	r3, r6, #4
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f002 fc87 	bl	80049ac <USB_DevInit>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e014      	b.n	80020da <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fe42 	bl	8002d52 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fcbb 	bl	8005a4e <USB_DevDisconnect>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_Start+0x16>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e012      	b.n	800211e <HAL_PCD_Start+0x3c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fc8b 	bl	8005a20 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f002 fc0a 	bl	8004928 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fca0 	bl	8005a78 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002142:	d102      	bne.n	800214a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb3f 	bl	80027c8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fc92 	bl	8005a78 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d112      	bne.n	8002186 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f005 fad0 	bl	800771e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f929 	bl	80023d8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fc74 	bl	8005a78 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800219a:	d10b      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021ae:	b292      	uxth	r2, r2
 80021b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fc5d 	bl	8005a78 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c8:	d10b      	bne.n	80021e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021dc:	b292      	uxth	r2, r2
 80021de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fc46 	bl	8005a78 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f6:	d133      	bne.n	8002260 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0204 	bic.w	r2, r2, #4
 800220a:	b292      	uxth	r2, r2
 800220c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0208 	bic.w	r2, r2, #8
 8002222:	b292      	uxth	r2, r2
 8002224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f005 fd1b 	bl	8007c78 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 faa4 	bl	8007790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800225a:	b292      	uxth	r2, r2
 800225c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 fc07 	bl	8005a78 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002274:	d131      	bne.n	80022da <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0208 	orr.w	r2, r2, #8
 8002288:	b292      	uxth	r2, r2
 800228a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a0:	b292      	uxth	r2, r2
 80022a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0204 	orr.w	r2, r2, #4
 80022b8:	b292      	uxth	r2, r2
 80022ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 fbd8 	bl	8005a78 <USB_ReadInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d2:	d002      	beq.n	80022da <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f005 fa41 	bl	800775c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fbca 	bl	8005a78 <USB_ReadInterrupts>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d13f      	bne.n	800236e <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002300:	b292      	uxth	r2, r2
 8002302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800230c:	2b00      	cmp	r3, #0
 800230e:	d12b      	bne.n	8002368 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0204 	orr.w	r2, r2, #4
 8002322:	b292      	uxth	r2, r2
 8002324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0208 	orr.w	r2, r2, #8
 800233a:	b292      	uxth	r2, r2
 800233c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002350:	b29b      	uxth	r3, r3
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800235e:	2101      	movs	r1, #1
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 fc89 	bl	8007c78 <HAL_PCDEx_LPM_Callback>
 8002366:	e002      	b.n	800236e <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 f9f7 	bl	800775c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fb80 	bl	8005a78 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002382:	d10e      	bne.n	80023a2 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002396:	b292      	uxth	r2, r2
 8002398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 f9b0 	bl	8007702 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 fb66 	bl	8005a78 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b6:	d10b      	bne.n	80023d0 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ca:	b292      	uxth	r2, r2
 80023cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_PCD_SetAddress+0x1a>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e013      	b.n	800241a <HAL_PCD_SetAddress+0x42>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f003 faf4 	bl	80059f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	4608      	mov	r0, r1
 800242c:	4611      	mov	r1, r2
 800242e:	461a      	mov	r2, r3
 8002430:	4603      	mov	r3, r0
 8002432:	70fb      	strb	r3, [r7, #3]
 8002434:	460b      	mov	r3, r1
 8002436:	803b      	strh	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002444:	2b00      	cmp	r3, #0
 8002446:	da0b      	bge.n	8002460 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	3328      	adds	r3, #40	; 0x28
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
 800245e:	e00b      	b.n	8002478 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002484:	883a      	ldrh	r2, [r7, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	78ba      	ldrb	r2, [r7, #2]
 800248e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024a2:	78bb      	ldrb	r3, [r7, #2]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d102      	bne.n	80024ae <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_PCD_EP_Open+0x9a>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e00e      	b.n	80024da <HAL_PCD_EP_Open+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fa92 	bl	80049f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80024d8:	7afb      	ldrb	r3, [r7, #11]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da0b      	bge.n	800250e <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	015b      	lsls	r3, r3, #5
 80024fe:	3328      	adds	r3, #40	; 0x28
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	705a      	strb	r2, [r3, #1]
 800250c:	e00b      	b.n	8002526 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_PCD_EP_Close+0x5e>
 800253c:	2302      	movs	r3, #2
 800253e:	e00e      	b.n	800255e <HAL_PCD_EP_Close+0x7c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	4618      	mov	r0, r3
 8002550:	f002 fd3a 	bl	8004fc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	460b      	mov	r3, r1
 8002574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	015b      	lsls	r3, r3, #5
 800257e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2200      	movs	r2, #0
 800259e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a0:	7afb      	ldrb	r3, [r7, #11]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ac:	7afb      	ldrb	r3, [r7, #11]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6979      	ldr	r1, [r7, #20]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fe99 	bl	80052f4 <USB_EPStartXfer>
 80025c2:	e005      	b.n	80025d0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fe92 	bl	80052f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	330a      	adds	r3, #10
 80025f0:	015b      	lsls	r3, r3, #5
 80025f2:	4413      	add	r3, r2
 80025f4:	3304      	adds	r3, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	3328      	adds	r3, #40	; 0x28
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2201      	movs	r2, #1
 800263a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	b2da      	uxtb	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6979      	ldr	r1, [r7, #20]
 8002658:	4618      	mov	r0, r3
 800265a:	f002 fe4b 	bl	80052f4 <USB_EPStartXfer>
 800265e:	e005      	b.n	800266c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fe44 	bl	80052f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 0207 	and.w	r2, r3, #7
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d901      	bls.n	8002694 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e046      	b.n	8002722 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da0b      	bge.n	80026b4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	015b      	lsls	r3, r3, #5
 80026a4:	3328      	adds	r3, #40	; 0x28
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	705a      	strb	r2, [r3, #1]
 80026b2:	e009      	b.n	80026c8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015b      	lsls	r3, r3, #5
 80026b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_EP_SetStall+0x72>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e01c      	b.n	8002722 <HAL_PCD_EP_SetStall+0xac>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 f8a8 	bl	800584c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f003 f9c0 	bl	8005a98 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	f003 020f 	and.w	r2, r3, #15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d901      	bls.n	8002748 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e03a      	b.n	80027be <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800274c:	2b00      	cmp	r3, #0
 800274e:	da0b      	bge.n	8002768 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	3328      	adds	r3, #40	; 0x28
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	705a      	strb	r2, [r3, #1]
 8002766:	e00b      	b.n	8002780 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002786:	78fb      	ldrb	r3, [r7, #3]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_PCD_EP_ClrStall+0x76>
 800279c:	2302      	movs	r3, #2
 800279e:	e00e      	b.n	80027be <HAL_PCD_EP_ClrStall+0x94>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 f88e 	bl	80058d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027d0:	e26f      	b.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027da:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80027e6:	7d7b      	ldrb	r3, [r7, #21]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8137 	bne.w	8002a5c <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027ee:	8afb      	ldrh	r3, [r7, #22]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d14f      	bne.n	8002898 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	b29c      	uxth	r4, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29b      	uxth	r3, r3
 8002818:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3328      	adds	r3, #40	; 0x28
 800281e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002856:	2100      	movs	r1, #0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f004 ff3b 	bl	80076d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8223 	beq.w	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f040 821e 	bne.w	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b292      	uxth	r2, r2
 800288a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002896:	e20c      	b.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800289e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d031      	beq.n	8002916 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f003 f920 	bl	8005b32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028fe:	4013      	ands	r3, r2
 8002900:	b29c      	uxth	r4, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800290a:	b292      	uxth	r2, r2
 800290c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f004 feb6 	bl	8007680 <HAL_PCD_SetupStageCallback>
 8002914:	e1cd      	b.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002916:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f280 81c9 	bge.w	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	b29a      	uxth	r2, r3
 8002928:	f640 738f 	movw	r3, #3983	; 0xf8f
 800292c:	4013      	ands	r3, r2
 800292e:	b29c      	uxth	r4, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002938:	b292      	uxth	r2, r2
 800293a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	4413      	add	r3, r2
 8002956:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <PCD_EP_ISR_Handler+0x1d8>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d015      	beq.n	80029a0 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6959      	ldr	r1, [r3, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002984:	b29b      	uxth	r3, r3
 8002986:	f003 f8d4 	bl	8005b32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	441a      	add	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002998:	2100      	movs	r1, #0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f004 fe82 	bl	80076a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461c      	mov	r4, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	441c      	add	r4, r3
 80029b2:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d110      	bne.n	80029e2 <PCD_EP_ISR_Handler+0x21a>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	801a      	strh	r2, [r3, #0]
 80029e0:	e026      	b.n	8002a30 <PCD_EP_ISR_Handler+0x268>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b3d      	cmp	r3, #61	; 0x3d
 80029e8:	d813      	bhi.n	8002a12 <PCD_EP_ISR_Handler+0x24a>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <PCD_EP_ISR_Handler+0x23c>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	029b      	lsls	r3, r3, #10
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	e00e      	b.n	8002a30 <PCD_EP_ISR_Handler+0x268>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	029b      	lsls	r3, r3, #10
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	b29c      	uxth	r4, r3
 8002a42:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002a46:	b29c      	uxth	r4, r3
 8002a48:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002a4c:	b29c      	uxth	r4, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b9f      	ldr	r3, [pc, #636]	; (8002cd0 <PCD_EP_ISR_Handler+0x508>)
 8002a54:	4323      	orrs	r3, r4
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8013      	strh	r3, [r2, #0]
 8002a5a:	e12a      	b.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	7d7b      	ldrb	r3, [r7, #21]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f280 80cb 	bge.w	8002c0c <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	7d7b      	ldrb	r3, [r7, #21]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b29c      	uxth	r4, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	7d7b      	ldrb	r3, [r7, #21]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002aa2:	7d7b      	ldrb	r3, [r7, #21]
 8002aa4:	015b      	lsls	r3, r3, #5
 8002aa6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7b1b      	ldrb	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d11f      	bne.n	8002af8 <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002adc:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002ade:	8bfb      	ldrh	r3, [r7, #30]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d06e      	beq.n	8002bc2 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6959      	ldr	r1, [r3, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	88da      	ldrh	r2, [r3, #6]
 8002af0:	8bfb      	ldrh	r3, [r7, #30]
 8002af2:	f003 f81e 	bl	8005b32 <USB_ReadPMA>
 8002af6:	e064      	b.n	8002bc2 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01f      	beq.n	8002b52 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b36:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002b38:	8bfb      	ldrh	r3, [r7, #30]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d028      	beq.n	8002b90 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6959      	ldr	r1, [r3, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	891a      	ldrh	r2, [r3, #8]
 8002b4a:	8bfb      	ldrh	r3, [r7, #30]
 8002b4c:	f002 fff1 	bl	8005b32 <USB_ReadPMA>
 8002b50:	e01e      	b.n	8002b90 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b76:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002b78:	8bfb      	ldrh	r3, [r7, #30]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6959      	ldr	r1, [r3, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	895a      	ldrh	r2, [r3, #10]
 8002b8a:	8bfb      	ldrh	r3, [r7, #30]
 8002b8c:	f002 ffd1 	bl	8005b32 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	b29c      	uxth	r4, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <PCD_EP_ISR_Handler+0x50c>)
 8002bbc:	4323      	orrs	r3, r4
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	8bfb      	ldrh	r3, [r7, #30]
 8002bc8:	441a      	add	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	8bfb      	ldrh	r3, [r7, #30]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d004      	beq.n	8002bec <PCD_EP_ISR_Handler+0x424>
 8002be2:	8bfa      	ldrh	r2, [r7, #30]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d206      	bcs.n	8002bfa <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f004 fd56 	bl	80076a4 <HAL_PCD_DataOutStageCallback>
 8002bf8:	e008      	b.n	8002c0c <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	7819      	ldrb	r1, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fcad 	bl	8002566 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d04d      	beq.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c16:	7d7b      	ldrb	r3, [r7, #21]
 8002c18:	015b      	lsls	r3, r3, #5
 8002c1a:	3328      	adds	r3, #40	; 0x28
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	7d7b      	ldrb	r3, [r7, #21]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	b29c      	uxth	r4, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	7d7b      	ldrb	r3, [r7, #21]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	441a      	add	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f004 fd1b 	bl	80076d4 <HAL_PCD_DataInStageCallback>
 8002c9e:	e008      	b.n	8002cb2 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	7819      	ldrb	r1, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fca9 	bl	8002604 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f6ff ad87 	blt.w	80027d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	ffff8080 	.word	0xffff8080
 8002cd4:	ffff80c0 	.word	0xffff80c0

08002cd8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	817b      	strh	r3, [r7, #10]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	015b      	lsls	r3, r3, #5
 8002cfe:	3328      	adds	r3, #40	; 0x28
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e006      	b.n	8002d16 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d08:	897b      	ldrh	r3, [r7, #10]
 8002d0a:	015b      	lsls	r3, r3, #5
 8002d0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d16:	893b      	ldrh	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d107      	bne.n	8002d2c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	80da      	strh	r2, [r3, #6]
 8002d2a:	e00b      	b.n	8002d44 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f043 0302 	orr.w	r3, r3, #2
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000

08002de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df2:	d130      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d038      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2232      	movs	r2, #50	; 0x32
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	3301      	adds	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e28:	e002      	b.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d102      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f2      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d110      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d007      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9e:	6053      	str	r3, [r2, #4]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e3db      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec2:	4ba4      	ldr	r3, [pc, #656]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ecc:	4ba1      	ldr	r3, [pc, #644]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80e1 	beq.w	80030a6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_RCC_OscConfig+0x4a>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	f040 8088 	bne.w	8003002 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 8084 	bne.w	8003002 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002efa:	4b96      	ldr	r3, [pc, #600]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <HAL_RCC_OscConfig+0x62>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e3b3      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1a      	ldr	r2, [r3, #32]
 8002f16:	4b8f      	ldr	r3, [pc, #572]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_RCC_OscConfig+0x7c>
 8002f22:	4b8c      	ldr	r3, [pc, #560]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f2a:	e005      	b.n	8002f38 <HAL_RCC_OscConfig+0x88>
 8002f2c:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d223      	bcs.n	8002f84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fd47 	bl	80039d4 <RCC_SetFlashLatencyFromMSIRange>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e394      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f50:	4b80      	ldr	r3, [pc, #512]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a7f      	ldr	r2, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f56:	f043 0308 	orr.w	r3, r3, #8
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b7d      	ldr	r3, [pc, #500]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	497a      	ldr	r1, [pc, #488]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6e:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	4975      	ldr	r1, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
 8002f82:	e022      	b.n	8002fca <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f8a:	f043 0308 	orr.w	r3, r3, #8
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b70      	ldr	r3, [pc, #448]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	496d      	ldr	r1, [pc, #436]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	4968      	ldr	r1, [pc, #416]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fd0a 	bl	80039d4 <RCC_SetFlashLatencyFromMSIRange>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e357      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fca:	f000 fc41 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8002fce:	4601      	mov	r1, r0
 8002fd0:	4b60      	ldr	r3, [pc, #384]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a5f      	ldr	r2, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x2a8>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fe6:	4a5d      	ldr	r2, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fea:	4b5d      	ldr	r3, [pc, #372]	; (8003160 <HAL_RCC_OscConfig+0x2b0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe f87e 	bl	80010f0 <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d052      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	e33b      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d032      	beq.n	8003070 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800300a:	4b52      	ldr	r3, [pc, #328]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a51      	ldr	r2, [pc, #324]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003016:	f7fe f8b7 	bl	8001188 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800301e:	f7fe f8b3 	bl	8001188 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e324      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003030:	4b48      	ldr	r3, [pc, #288]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b45      	ldr	r3, [pc, #276]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a44      	ldr	r2, [pc, #272]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	493f      	ldr	r1, [pc, #252]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b3e      	ldr	r3, [pc, #248]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	493a      	ldr	r1, [pc, #232]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e01a      	b.n	80030a6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003070:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a37      	ldr	r2, [pc, #220]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800307c:	f7fe f884 	bl	8001188 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003084:	f7fe f880 	bl	8001188 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e2f1      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x1d4>
 80030a2:	e000      	b.n	80030a6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d074      	beq.n	800319c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x214>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d10e      	bne.n	80030dc <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d064      	beq.n	800319a <HAL_RCC_OscConfig+0x2ea>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d160      	bne.n	800319a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e2ce      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x244>
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0x280>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x268>
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0x280>
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_RCC_OscConfig+0x2a4>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01c      	beq.n	8003172 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe f826 	bl	8001188 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	e011      	b.n	8003164 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe f822 	bl	8001188 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d90a      	bls.n	8003164 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e293      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	080097e8 	.word	0x080097e8
 800315c:	20000008 	.word	0x20000008
 8003160:	2000000c 	.word	0x2000000c
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003164:	4bae      	ldr	r3, [pc, #696]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0e7      	beq.n	8003140 <HAL_RCC_OscConfig+0x290>
 8003170:	e014      	b.n	800319c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe f809 	bl	8001188 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317a:	f7fe f805 	bl	8001188 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e276      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800318c:	4ba4      	ldr	r3, [pc, #656]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x2ca>
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d060      	beq.n	800326a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x30a>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d119      	bne.n	80031e8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ba:	4b99      	ldr	r3, [pc, #612]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x322>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e253      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b93      	ldr	r3, [pc, #588]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	061b      	lsls	r3, r3, #24
 80031e0:	498f      	ldr	r1, [pc, #572]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e6:	e040      	b.n	800326a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b8b      	ldr	r3, [pc, #556]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a8a      	ldr	r2, [pc, #552]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fd ffc4 	bl	8001188 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fd ffc0 	bl	8001188 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e231      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003216:	4b82      	ldr	r3, [pc, #520]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b7f      	ldr	r3, [pc, #508]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	061b      	lsls	r3, r3, #24
 8003230:	497b      	ldr	r1, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
 8003236:	e018      	b.n	800326a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003238:	4b79      	ldr	r3, [pc, #484]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a78      	ldr	r2, [pc, #480]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800323e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd ffa0 	bl	8001188 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324c:	f7fd ff9c 	bl	8001188 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e20d      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325e:	4b70      	ldr	r3, [pc, #448]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003284:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fd ff7b 	bl	8001188 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fd ff77 	bl	8001188 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1e8      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ef      	beq.n	8003296 <HAL_RCC_OscConfig+0x3e6>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fd ff5e 	bl	8001188 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fd ff5a 	bl	8001188 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1cb      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e2:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ef      	bne.n	80032d0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a5 	beq.w	8003448 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b44      	ldr	r3, [pc, #272]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	4a43      	ldr	r2, [pc, #268]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	; 0x58
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <HAL_RCC_OscConfig+0x574>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCC_OscConfig+0x574>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a3a      	ldr	r2, [pc, #232]	; (8003424 <HAL_RCC_OscConfig+0x574>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd ff21 	bl	8001188 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd ff1d 	bl	8001188 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e18e      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x574>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_RCC_OscConfig+0x4d2>
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a2a      	ldr	r2, [pc, #168]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003380:	e024      	b.n	80033cc <HAL_RCC_OscConfig+0x51c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d110      	bne.n	80033ac <HAL_RCC_OscConfig+0x4fc>
 800338a:	4b25      	ldr	r3, [pc, #148]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033aa:	e00f      	b.n	80033cc <HAL_RCC_OscConfig+0x51c>
 80033ac:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d016      	beq.n	8003402 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fd fed8 	bl	8001188 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033dc:	f7fd fed4 	bl	8001188 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e143      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x570>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ed      	beq.n	80033dc <HAL_RCC_OscConfig+0x52c>
 8003400:	e019      	b.n	8003436 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fd fec1 	bl	8001188 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003408:	e00e      	b.n	8003428 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fd febd 	bl	8001188 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d905      	bls.n	8003428 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e12c      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
 8003420:	40021000 	.word	0x40021000
 8003424:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003428:	4b96      	ldr	r3, [pc, #600]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e9      	bne.n	800340a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b91      	ldr	r3, [pc, #580]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	4a90      	ldr	r2, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d03c      	beq.n	80034ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01c      	beq.n	8003496 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800345c:	4b89      	ldr	r3, [pc, #548]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800345e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003462:	4a88      	ldr	r2, [pc, #544]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fd fe8c 	bl	8001188 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003474:	f7fd fe88 	bl	8001188 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e0f9      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003486:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ef      	beq.n	8003474 <HAL_RCC_OscConfig+0x5c4>
 8003494:	e01b      	b.n	80034ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003496:	4b7b      	ldr	r3, [pc, #492]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349c:	4a79      	ldr	r2, [pc, #484]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fd fe6f 	bl	8001188 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ae:	f7fd fe6b 	bl	8001188 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e0dc      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80034c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ef      	bne.n	80034ae <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80d0 	beq.w	8003678 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	f000 808d 	beq.w	80035fa <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d15a      	bne.n	800359e <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b66      	ldr	r3, [pc, #408]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a65      	ldr	r2, [pc, #404]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fd fe48 	bl	8001188 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fd fe44 	bl	8001188 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0b5      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350e:	4b5d      	ldr	r3, [pc, #372]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351a:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <HAL_RCC_OscConfig+0x7d8>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800352a:	3a01      	subs	r2, #1
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003534:	0212      	lsls	r2, r2, #8
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800353c:	0852      	lsrs	r2, r2, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	0552      	lsls	r2, r2, #21
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003548:	0852      	lsrs	r2, r2, #1
 800354a:	3a01      	subs	r2, #1
 800354c:	0652      	lsls	r2, r2, #25
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003554:	06d2      	lsls	r2, r2, #27
 8003556:	430a      	orrs	r2, r1
 8003558:	494a      	ldr	r1, [pc, #296]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355e:	4b49      	ldr	r3, [pc, #292]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800356a:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a45      	ldr	r2, [pc, #276]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003570:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003574:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fe07 	bl	8001188 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7fd fe03 	bl	8001188 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e074      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003590:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x6ce>
 800359c:	e06c      	b.n	8003678 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b39      	ldr	r3, [pc, #228]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035aa:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035b6:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4a32      	ldr	r2, [pc, #200]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80035c2:	4b30      	ldr	r3, [pc, #192]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fdd9 	bl	8001188 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fdd5 	bl	8001188 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e046      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x72a>
 80035f8:	e03e      	b.n	8003678 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e039      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003606:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_RCC_OscConfig+0x7d4>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0203 	and.w	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	429a      	cmp	r2, r3
 8003618:	d12c      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	3b01      	subs	r3, #1
 8003626:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d123      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d11b      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d113      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d109      	bne.n	8003674 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	019d808c 	.word	0x019d808c

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0c8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4961      	ldr	r1, [pc, #388]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04c      	beq.n	8003776 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e4:	4b56      	ldr	r3, [pc, #344]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e09e      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e092      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003714:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e086      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e07e      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 0203 	bic.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	493f      	ldr	r1, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fd fd1f 	bl	8001188 <HAL_GetTick>
 800374a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374c:	e00a      	b.n	8003764 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fd fd1b 	bl	8001188 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e066      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 020c 	and.w	r2, r3, #12
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	429a      	cmp	r2, r3
 8003774:	d1eb      	bne.n	800374e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003782:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	492c      	ldr	r1, [pc, #176]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d210      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4924      	ldr	r1, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e036      	b.n	8003832 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4918      	ldr	r1, [pc, #96]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4910      	ldr	r1, [pc, #64]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003802:	f000 f825 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003806:	4601      	mov	r1, r0
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_RCC_ClockConfig+0x1b4>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	fa21 f303 	lsr.w	r3, r1, r3
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fc62 	bl	80010f0 <HAL_InitTick>
 800382c:	4603      	mov	r3, r0
 800382e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003830:	7afb      	ldrb	r3, [r7, #11]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	080097e8 	.word	0x080097e8
 8003848:	20000008 	.word	0x20000008
 800384c:	2000000c 	.word	0x2000000c

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003868:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d121      	bne.n	80038c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d11e      	bne.n	80038c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003884:	4b33      	ldr	r3, [pc, #204]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	e005      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e004      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_GetSysClockFreq+0x110>)
 80038d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d133      	bne.n	8003946 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d003      	beq.n	80038fa <HAL_RCC_GetSysClockFreq+0xaa>
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_RCC_GetSysClockFreq+0x10c>)
 80038f6:	617b      	str	r3, [r7, #20]
      break;
 80038f8:	e005      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_GetSysClockFreq+0x110>)
 80038fc:	617b      	str	r3, [r7, #20]
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	617b      	str	r3, [r7, #20]
      break;
 8003904:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	3301      	adds	r3, #1
 8003912:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	fb02 f203 	mul.w	r2, r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_GetSysClockFreq+0x104>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0e5b      	lsrs	r3, r3, #25
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	3301      	adds	r3, #1
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003946:	69bb      	ldr	r3, [r7, #24]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3724      	adds	r7, #36	; 0x24
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000
 8003958:	08009800 	.word	0x08009800
 800395c:	00f42400 	.word	0x00f42400
 8003960:	007a1200 	.word	0x007a1200

08003964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_GetHCLKFreq+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000008 	.word	0x20000008

0800397c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003980:	f7ff fff0 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8003984:	4601      	mov	r1, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4a04      	ldr	r2, [pc, #16]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	080097f8 	.word	0x080097f8

080039a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039ac:	f7ff ffda 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039b0:	4601      	mov	r1, r0
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	0adb      	lsrs	r3, r3, #11
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	080097f8 	.word	0x080097f8

080039d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039ec:	f7ff f9ec 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 80039f0:	6178      	str	r0, [r7, #20]
 80039f2:	e014      	b.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a0c:	f7ff f9dc 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 8003a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a12:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a24:	d10b      	bne.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d919      	bls.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a30:	d902      	bls.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a32:	2302      	movs	r3, #2
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e013      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a38:	2301      	movs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e010      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	; 0x80
 8003a42:	d902      	bls.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a44:	2303      	movs	r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e00a      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d102      	bne.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a50:	2302      	movs	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	e004      	b.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b70      	cmp	r3, #112	; 0x70
 8003a5a:	d101      	bne.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 0207 	bic.w	r2, r3, #7
 8003a68:	4909      	ldr	r1, [pc, #36]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d001      	beq.n	8003a82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40022000 	.word	0x40022000

08003a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02f      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003aba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ac6:	4bac      	ldr	r3, [pc, #688]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	4aab      	ldr	r2, [pc, #684]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad2:	e00c      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f9dc 	bl	8003e98 <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af4:	4ba0      	ldr	r3, [pc, #640]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	499d      	ldr	r1, [pc, #628]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b0a:	e001      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8099 	beq.w	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b22:	4b95      	ldr	r3, [pc, #596]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003b32:	2300      	movs	r3, #0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	4a8e      	ldr	r2, [pc, #568]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	6593      	str	r3, [r2, #88]	; 0x58
 8003b44:	4b8c      	ldr	r3, [pc, #560]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b54:	4b89      	ldr	r3, [pc, #548]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a88      	ldr	r2, [pc, #544]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b60:	f7fd fb12 	bl	8001188 <HAL_GetTick>
 8003b64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b66:	e009      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd fb0e 	bl	8001188 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d902      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	74fb      	strb	r3, [r7, #19]
        break;
 8003b7a:	e005      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b7c:	4b7f      	ldr	r3, [pc, #508]	; (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d155      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d019      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003baa:	4b73      	ldr	r3, [pc, #460]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb6:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbc:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc6:	4b6c      	ldr	r3, [pc, #432]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bd6:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d016      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd face 	bl	8001188 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bee:	e00b      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fd faca 	bl	8001188 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	74fb      	strb	r3, [r7, #19]
            break;
 8003c06:	e006      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c08:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0ec      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1c:	4b56      	ldr	r3, [pc, #344]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	4953      	ldr	r1, [pc, #332]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
 8003c38:	e001      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3e:	7c7b      	ldrb	r3, [r7, #17]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	4a4b      	ldr	r2, [pc, #300]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5c:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4943      	ldr	r1, [pc, #268]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f023 020c 	bic.w	r2, r3, #12
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	493a      	ldr	r1, [pc, #232]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	4932      	ldr	r1, [pc, #200]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	4929      	ldr	r1, [pc, #164]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	4921      	ldr	r1, [pc, #132]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4918      	ldr	r1, [pc, #96]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4910      	ldr	r1, [pc, #64]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02c      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4907      	ldr	r1, [pc, #28]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6a:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4a02      	ldr	r2, [pc, #8]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d74:	60d3      	str	r3, [r2, #12]
 8003d76:	e015      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f881 	bl	8003e98 <RCCEx_PLLSAI1_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d028      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003db0:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	492d      	ldr	r1, [pc, #180]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dce:	d106      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a27      	ldr	r2, [pc, #156]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dda:	60d3      	str	r3, [r2, #12]
 8003ddc:	e011      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003de6:	d10c      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	2101      	movs	r1, #1
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f852 	bl	8003e98 <RCCEx_PLLSAI1_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	4915      	ldr	r1, [pc, #84]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f82f 	bl	8003e98 <RCCEx_PLLSAI1_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4904      	ldr	r1, [pc, #16]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6013      	str	r3, [r2, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000

08003e98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ea6:	4b73      	ldr	r3, [pc, #460]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d018      	beq.n	8003ee4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eb2:	4b70      	ldr	r3, [pc, #448]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10d      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d044      	beq.n	8003f68 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e041      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d00c      	beq.n	8003f06 <RCCEx_PLLSAI1_Config+0x6e>
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d013      	beq.n	8003f18 <RCCEx_PLLSAI1_Config+0x80>
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d120      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef4:	4b5f      	ldr	r3, [pc, #380]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11d      	bne.n	8003f3c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e01a      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f06:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d116      	bne.n	8003f40 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f16:	e013      	b.n	8003f40 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f18:	4b56      	ldr	r3, [pc, #344]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f34:	e006      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3a:	e004      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003f44:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f4c:	4b49      	ldr	r3, [pc, #292]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	430b      	orrs	r3, r1
 8003f62:	4944      	ldr	r1, [pc, #272]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d17c      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fd f905 	bl	8001188 <HAL_GetTick>
 8003f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f80:	e009      	b.n	8003f96 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f82:	f7fd f901 	bl	8001188 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d902      	bls.n	8003f96 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	73fb      	strb	r3, [r7, #15]
        break;
 8003f94:	e005      	b.n	8003fa2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f96:	4b37      	ldr	r3, [pc, #220]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1ef      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d15f      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fae:	4b31      	ldr	r3, [pc, #196]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6892      	ldr	r2, [r2, #8]
 8003fbe:	0211      	lsls	r1, r2, #8
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68d2      	ldr	r2, [r2, #12]
 8003fc4:	06d2      	lsls	r2, r2, #27
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	492a      	ldr	r1, [pc, #168]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
 8003fce:	e027      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d112      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	0211      	lsls	r1, r2, #8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	0852      	lsrs	r2, r2, #1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0552      	lsls	r2, r2, #21
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	491f      	ldr	r1, [pc, #124]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e011      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
 800400c:	0211      	lsls	r1, r2, #8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6952      	ldr	r2, [r2, #20]
 8004012:	0852      	lsrs	r2, r2, #1
 8004014:	3a01      	subs	r2, #1
 8004016:	0652      	lsls	r2, r2, #25
 8004018:	430a      	orrs	r2, r1
 800401a:	4916      	ldr	r1, [pc, #88]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd f8ac 	bl	8001188 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fd f8a8 	bl	8001188 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
          break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	4904      	ldr	r1, [pc, #16]	; (8004074 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000

08004078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e040      	b.n	800410c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fc fef8 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	; 0x24
 80040a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f82c 	bl	8004114 <UART_SetConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e022      	b.n	800410c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 faea 	bl	80046a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb71 	bl	80047ec <UART_CheckIdleState>
 800410a:	4603      	mov	r3, r0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004118:	b088      	sub	sp, #32
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4bbc      	ldr	r3, [pc, #752]	; (800443c <UART_SetConfig+0x328>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	69f9      	ldr	r1, [r7, #28]
 8004152:	430b      	orrs	r3, r1
 8004154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4ab2      	ldr	r2, [pc, #712]	; (8004440 <UART_SetConfig+0x32c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	4313      	orrs	r3, r2
 8004184:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4aa9      	ldr	r2, [pc, #676]	; (8004444 <UART_SetConfig+0x330>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d121      	bne.n	80041e8 <UART_SetConfig+0xd4>
 80041a4:	4ba8      	ldr	r3, [pc, #672]	; (8004448 <UART_SetConfig+0x334>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d816      	bhi.n	80041e0 <UART_SetConfig+0xcc>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0xa4>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	080041d5 	.word	0x080041d5
 80041c0:	080041cf 	.word	0x080041cf
 80041c4:	080041db 	.word	0x080041db
 80041c8:	2301      	movs	r3, #1
 80041ca:	76fb      	strb	r3, [r7, #27]
 80041cc:	e072      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80041ce:	2302      	movs	r3, #2
 80041d0:	76fb      	strb	r3, [r7, #27]
 80041d2:	e06f      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80041d4:	2304      	movs	r3, #4
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e06c      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80041da:	2308      	movs	r3, #8
 80041dc:	76fb      	strb	r3, [r7, #27]
 80041de:	e069      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80041e0:	2310      	movs	r3, #16
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	bf00      	nop
 80041e6:	e065      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a97      	ldr	r2, [pc, #604]	; (800444c <UART_SetConfig+0x338>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d134      	bne.n	800425c <UART_SetConfig+0x148>
 80041f2:	4b95      	ldr	r3, [pc, #596]	; (8004448 <UART_SetConfig+0x334>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d829      	bhi.n	8004254 <UART_SetConfig+0x140>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0xf4>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	0800423d 	.word	0x0800423d
 800420c:	08004255 	.word	0x08004255
 8004210:	08004255 	.word	0x08004255
 8004214:	08004255 	.word	0x08004255
 8004218:	08004249 	.word	0x08004249
 800421c:	08004255 	.word	0x08004255
 8004220:	08004255 	.word	0x08004255
 8004224:	08004255 	.word	0x08004255
 8004228:	08004243 	.word	0x08004243
 800422c:	08004255 	.word	0x08004255
 8004230:	08004255 	.word	0x08004255
 8004234:	08004255 	.word	0x08004255
 8004238:	0800424f 	.word	0x0800424f
 800423c:	2300      	movs	r3, #0
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e038      	b.n	80042b4 <UART_SetConfig+0x1a0>
 8004242:	2302      	movs	r3, #2
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e035      	b.n	80042b4 <UART_SetConfig+0x1a0>
 8004248:	2304      	movs	r3, #4
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	e032      	b.n	80042b4 <UART_SetConfig+0x1a0>
 800424e:	2308      	movs	r3, #8
 8004250:	76fb      	strb	r3, [r7, #27]
 8004252:	e02f      	b.n	80042b4 <UART_SetConfig+0x1a0>
 8004254:	2310      	movs	r3, #16
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	bf00      	nop
 800425a:	e02b      	b.n	80042b4 <UART_SetConfig+0x1a0>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a77      	ldr	r2, [pc, #476]	; (8004440 <UART_SetConfig+0x32c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d124      	bne.n	80042b0 <UART_SetConfig+0x19c>
 8004266:	4b78      	ldr	r3, [pc, #480]	; (8004448 <UART_SetConfig+0x334>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d012      	beq.n	800429c <UART_SetConfig+0x188>
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427a:	d802      	bhi.n	8004282 <UART_SetConfig+0x16e>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <UART_SetConfig+0x17c>
 8004280:	e012      	b.n	80042a8 <UART_SetConfig+0x194>
 8004282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004286:	d006      	beq.n	8004296 <UART_SetConfig+0x182>
 8004288:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428c:	d009      	beq.n	80042a2 <UART_SetConfig+0x18e>
 800428e:	e00b      	b.n	80042a8 <UART_SetConfig+0x194>
 8004290:	2300      	movs	r3, #0
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e00e      	b.n	80042b4 <UART_SetConfig+0x1a0>
 8004296:	2302      	movs	r3, #2
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e00b      	b.n	80042b4 <UART_SetConfig+0x1a0>
 800429c:	2304      	movs	r3, #4
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	e008      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80042a2:	2308      	movs	r3, #8
 80042a4:	76fb      	strb	r3, [r7, #27]
 80042a6:	e005      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80042a8:	2310      	movs	r3, #16
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	bf00      	nop
 80042ae:	e001      	b.n	80042b4 <UART_SetConfig+0x1a0>
 80042b0:	2310      	movs	r3, #16
 80042b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a61      	ldr	r2, [pc, #388]	; (8004440 <UART_SetConfig+0x32c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f040 80f4 	bne.w	80044a8 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c0:	7efb      	ldrb	r3, [r7, #27]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d823      	bhi.n	800430e <UART_SetConfig+0x1fa>
 80042c6:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x1b8>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	080042ff 	.word	0x080042ff
 80042e0:	0800430f 	.word	0x0800430f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800430f 	.word	0x0800430f
 80042ec:	08004307 	.word	0x08004307
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7ff fb44 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042f6:	e00d      	b.n	8004314 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80042f8:	4b55      	ldr	r3, [pc, #340]	; (8004450 <UART_SetConfig+0x33c>)
 80042fa:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042fc:	e00a      	b.n	8004314 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80042fe:	f7ff faa7 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8004302:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004304:	e006      	b.n	8004314 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800430c:	e002      	b.n	8004314 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	74fb      	strb	r3, [r7, #19]
        break;
 8004312:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 81b9 	beq.w	800468e <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4413      	add	r3, r2
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d305      	bcc.n	8004338 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	429a      	cmp	r2, r3
 8004336:	d902      	bls.n	800433e <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	74fb      	strb	r3, [r7, #19]
 800433c:	e1a7      	b.n	800468e <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 800433e:	7efb      	ldrb	r3, [r7, #27]
 8004340:	2b08      	cmp	r3, #8
 8004342:	f200 809e 	bhi.w	8004482 <UART_SetConfig+0x36e>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x238>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004371 	.word	0x08004371
 8004350:	08004483 	.word	0x08004483
 8004354:	080043bd 	.word	0x080043bd
 8004358:	08004483 	.word	0x08004483
 800435c:	080043f1 	.word	0x080043f1
 8004360:	08004483 	.word	0x08004483
 8004364:	08004483 	.word	0x08004483
 8004368:	08004483 	.word	0x08004483
 800436c:	08004459 	.word	0x08004459
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004370:	f7ff fb04 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 8004374:	4603      	mov	r3, r0
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	f04f 0400 	mov.w	r4, #0
 8004384:	0214      	lsls	r4, r2, #8
 8004386:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800438a:	020b      	lsls	r3, r1, #8
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6852      	ldr	r2, [r2, #4]
 8004390:	0852      	lsrs	r2, r2, #1
 8004392:	4611      	mov	r1, r2
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	eb13 0b01 	adds.w	fp, r3, r1
 800439c:	eb44 0c02 	adc.w	ip, r4, r2
 80043a0:	4658      	mov	r0, fp
 80043a2:	4661      	mov	r1, ip
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	461a      	mov	r2, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	f7fb ff66 	bl	8000280 <__aeabi_uldivmod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ba:	e065      	b.n	8004488 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	4923      	ldr	r1, [pc, #140]	; (8004454 <UART_SetConfig+0x340>)
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	eb13 0b01 	adds.w	fp, r3, r1
 80043d0:	eb44 0c02 	adc.w	ip, r4, r2
 80043d4:	4658      	mov	r0, fp
 80043d6:	4661      	mov	r1, ip
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	461a      	mov	r2, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	f7fb ff4c 	bl	8000280 <__aeabi_uldivmod>
 80043e8:	4603      	mov	r3, r0
 80043ea:	460c      	mov	r4, r1
 80043ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80043ee:	e04b      	b.n	8004488 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043f0:	f7ff fa2e 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 80043f4:	4603      	mov	r3, r0
 80043f6:	4619      	mov	r1, r3
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	0214      	lsls	r4, r2, #8
 8004406:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800440a:	020b      	lsls	r3, r1, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	0852      	lsrs	r2, r2, #1
 8004412:	4611      	mov	r1, r2
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	eb13 0b01 	adds.w	fp, r3, r1
 800441c:	eb44 0c02 	adc.w	ip, r4, r2
 8004420:	4658      	mov	r0, fp
 8004422:	4661      	mov	r1, ip
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	461a      	mov	r2, r3
 800442e:	4623      	mov	r3, r4
 8004430:	f7fb ff26 	bl	8000280 <__aeabi_uldivmod>
 8004434:	4603      	mov	r3, r0
 8004436:	460c      	mov	r4, r1
 8004438:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800443a:	e025      	b.n	8004488 <UART_SetConfig+0x374>
 800443c:	efff69f3 	.word	0xefff69f3
 8004440:	40008000 	.word	0x40008000
 8004444:	40013800 	.word	0x40013800
 8004448:	40021000 	.word	0x40021000
 800444c:	40004400 	.word	0x40004400
 8004450:	00f42400 	.word	0x00f42400
 8004454:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004466:	f144 0100 	adc.w	r1, r4, #0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	461a      	mov	r2, r3
 8004474:	4623      	mov	r3, r4
 8004476:	f7fb ff03 	bl	8000280 <__aeabi_uldivmod>
 800447a:	4603      	mov	r3, r0
 800447c:	460c      	mov	r4, r1
 800447e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004480:	e002      	b.n	8004488 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	74fb      	strb	r3, [r7, #19]
            break;
 8004486:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800448e:	d308      	bcc.n	80044a2 <UART_SetConfig+0x38e>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d204      	bcs.n	80044a2 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	e0f5      	b.n	800468e <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	74fb      	strb	r3, [r7, #19]
 80044a6:	e0f2      	b.n	800468e <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	d17f      	bne.n	80045b2 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80044b2:	7efb      	ldrb	r3, [r7, #27]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d85c      	bhi.n	8004572 <UART_SetConfig+0x45e>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <UART_SetConfig+0x3ac>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	08004503 	.word	0x08004503
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004573 	.word	0x08004573
 80044d0:	0800453d 	.word	0x0800453d
 80044d4:	08004573 	.word	0x08004573
 80044d8:	08004573 	.word	0x08004573
 80044dc:	08004573 	.word	0x08004573
 80044e0:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044e4:	f7ff fa4a 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80044e8:	4603      	mov	r3, r0
 80044ea:	005a      	lsls	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004500:	e03a      	b.n	8004578 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004502:	f7ff fa51 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004506:	4603      	mov	r3, r0
 8004508:	005a      	lsls	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	b29b      	uxth	r3, r3
 800451c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800451e:	e02b      	b.n	8004578 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800452a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6852      	ldr	r2, [r2, #4]
 8004532:	fbb3 f3f2 	udiv	r3, r3, r2
 8004536:	b29b      	uxth	r3, r3
 8004538:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800453a:	e01d      	b.n	8004578 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800453c:	f7ff f988 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8004540:	4603      	mov	r3, r0
 8004542:	005a      	lsls	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	441a      	add	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	b29b      	uxth	r3, r3
 8004556:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004558:	e00e      	b.n	8004578 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	b29b      	uxth	r3, r3
 800456e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004570:	e002      	b.n	8004578 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	74fb      	strb	r3, [r7, #19]
        break;
 8004576:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b0f      	cmp	r3, #15
 800457c:	d916      	bls.n	80045ac <UART_SetConfig+0x498>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d212      	bcs.n	80045ac <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f023 030f 	bic.w	r3, r3, #15
 800458e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	b29a      	uxth	r2, r3
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	4313      	orrs	r3, r2
 80045a0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	897a      	ldrh	r2, [r7, #10]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e070      	b.n	800468e <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	74fb      	strb	r3, [r7, #19]
 80045b0:	e06d      	b.n	800468e <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80045b2:	7efb      	ldrb	r3, [r7, #27]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d859      	bhi.n	800466c <UART_SetConfig+0x558>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <UART_SetConfig+0x4ac>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	08004601 	.word	0x08004601
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	0800466d 	.word	0x0800466d
 80045d0:	08004639 	.word	0x08004639
 80045d4:	0800466d 	.word	0x0800466d
 80045d8:	0800466d 	.word	0x0800466d
 80045dc:	0800466d 	.word	0x0800466d
 80045e0:	08004655 	.word	0x08004655
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045e4:	f7ff f9ca 	bl	800397c <HAL_RCC_GetPCLK1Freq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	085b      	lsrs	r3, r3, #1
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fe:	e038      	b.n	8004672 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004600:	f7ff f9d2 	bl	80039a8 <HAL_RCC_GetPCLK2Freq>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	b29b      	uxth	r3, r3
 8004618:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800461a:	e02a      	b.n	8004672 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004626:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004636:	e01c      	b.n	8004672 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004638:	f7ff f90a 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	b29b      	uxth	r3, r3
 8004650:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004652:	e00e      	b.n	8004672 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	b29b      	uxth	r3, r3
 8004668:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800466a:	e002      	b.n	8004672 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	74fb      	strb	r3, [r7, #19]
        break;
 8004670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b0f      	cmp	r3, #15
 8004676:	d908      	bls.n	800468a <UART_SetConfig+0x576>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d204      	bcs.n	800468a <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e001      	b.n	800468e <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800469a:	7cfb      	ldrb	r3, [r7, #19]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80046a6:	bf00      	nop

080046a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0310 	and.w	r3, r3, #16
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01a      	beq.n	80047be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a6:	d10a      	bne.n	80047be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80047fa:	f7fc fcc5 	bl	8001188 <HAL_GetTick>
 80047fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	d10e      	bne.n	800482c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f82a 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e020      	b.n	800486e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d10e      	bne.n	8004858 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f814 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e00a      	b.n	800486e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e02a      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d026      	beq.n	80048de <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7fc fc7a 	bl	8001188 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11b      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e00f      	b.n	80048fe <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d0c5      	beq.n	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004906:	b084      	sub	sp, #16
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	f107 0014 	add.w	r0, r7, #20
 8004914:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	b004      	add	sp, #16
 8004926:	4770      	bx	lr

08004928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004930:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004934:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800493c:	b29a      	uxth	r2, r3
 800493e:	89fb      	ldrh	r3, [r7, #14]
 8004940:	4313      	orrs	r3, r2
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004960:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004964:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800496c:	b29b      	uxth	r3, r3
 800496e:	b21a      	sxth	r2, r3
 8004970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004974:	43db      	mvns	r3, r3
 8004976:	b21b      	sxth	r3, r3
 8004978:	4013      	ands	r3, r2
 800497a:	b21b      	sxth	r3, r3
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049ac:	b084      	sub	sp, #16
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	f107 0014 	add.w	r0, r7, #20
 80049ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ffa2 	bl	8004928 <USB_EnableGlobalInt>

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f0:	b004      	add	sp, #16
 80049f2:	4770      	bx	lr

080049f4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f4:	b490      	push	{r4, r7}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d819      	bhi.n	8004a56 <USB_ActivateEndpoint+0x62>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <USB_ActivateEndpoint+0x34>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	08004a43 	.word	0x08004a43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a38:	8abb      	ldrh	r3, [r7, #20]
 8004a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3e:	82bb      	strh	r3, [r7, #20]
      break;
 8004a40:	e00d      	b.n	8004a5e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a42:	8abb      	ldrh	r3, [r7, #20]
 8004a44:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a48:	82bb      	strh	r3, [r7, #20]
      break;
 8004a4a:	e008      	b.n	8004a5e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a4c:	8abb      	ldrh	r3, [r7, #20]
 8004a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a52:	82bb      	strh	r3, [r7, #20]
      break;
 8004a54:	e003      	b.n	8004a5e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
      break;
 8004a5a:	e000      	b.n	8004a5e <USB_ActivateEndpoint+0x6a>
      break;
 8004a5c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8abb      	ldrh	r3, [r7, #20]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	b21b      	sxth	r3, r3
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	b21a      	sxth	r2, r3
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b21b      	sxth	r3, r3
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	b21b      	sxth	r3, r3
 8004aa2:	b29c      	uxth	r4, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	441a      	add	r2, r3
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <USB_ActivateEndpoint+0x2d8>)
 8004ab0:	4323      	orrs	r3, r4
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	7b1b      	ldrb	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 810c 	bne.w	8004cd8 <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d067      	beq.n	8004b98 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ac8:	687c      	ldr	r4, [r7, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	441c      	add	r4, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4423      	add	r3, r4
 8004adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	88db      	ldrh	r3, [r3, #6]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29c      	uxth	r4, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d014      	beq.n	8004b32 <USB_ActivateEndpoint+0x13e>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	b29c      	uxth	r4, r3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	4b69      	ldr	r3, [pc, #420]	; (8004cd0 <USB_ActivateEndpoint+0x2dc>)
 8004b2c:	4323      	orrs	r3, r4
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	78db      	ldrb	r3, [r3, #3]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d018      	beq.n	8004b6c <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b50:	b29c      	uxth	r4, r3
 8004b52:	f084 0320 	eor.w	r3, r4, #32
 8004b56:	b29c      	uxth	r4, r3
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	4b5a      	ldr	r3, [pc, #360]	; (8004ccc <USB_ActivateEndpoint+0x2d8>)
 8004b64:	4323      	orrs	r3, r4
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
 8004b6a:	e225      	b.n	8004fb8 <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	b29c      	uxth	r4, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	441a      	add	r2, r3
 8004b8e:	4b4f      	ldr	r3, [pc, #316]	; (8004ccc <USB_ActivateEndpoint+0x2d8>)
 8004b90:	4323      	orrs	r3, r4
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	8013      	strh	r3, [r2, #0]
 8004b96:	e20f      	b.n	8004fb8 <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b98:	687c      	ldr	r4, [r7, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	441c      	add	r4, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4423      	add	r3, r4
 8004bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	88db      	ldrh	r3, [r3, #6]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bc0:	687c      	ldr	r4, [r7, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	441c      	add	r4, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4423      	add	r3, r4
 8004bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d110      	bne.n	8004c04 <USB_ActivateEndpoint+0x210>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	801a      	strh	r2, [r3, #0]
 8004c02:	e026      	b.n	8004c52 <USB_ActivateEndpoint+0x25e>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b3d      	cmp	r3, #61	; 0x3d
 8004c0a:	d813      	bhi.n	8004c34 <USB_ActivateEndpoint+0x240>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <USB_ActivateEndpoint+0x232>
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3301      	adds	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	029b      	lsls	r3, r3, #10
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e00e      	b.n	8004c52 <USB_ActivateEndpoint+0x25e>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29c      	uxth	r4, r3
 8004c60:	4623      	mov	r3, r4
 8004c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d014      	beq.n	8004c94 <USB_ActivateEndpoint+0x2a0>
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c80:	b29c      	uxth	r4, r3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	441a      	add	r2, r3
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <USB_ActivateEndpoint+0x2e0>)
 8004c8e:	4323      	orrs	r3, r4
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	b29c      	uxth	r4, r3
 8004cac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004cb0:	b29c      	uxth	r4, r3
 8004cb2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004cb6:	b29c      	uxth	r4, r3
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <USB_ActivateEndpoint+0x2d8>)
 8004cc4:	4323      	orrs	r3, r4
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
 8004cca:	e175      	b.n	8004fb8 <USB_ActivateEndpoint+0x5c4>
 8004ccc:	ffff8080 	.word	0xffff8080
 8004cd0:	ffff80c0 	.word	0xffff80c0
 8004cd4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	b29c      	uxth	r4, r3
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	4b96      	ldr	r3, [pc, #600]	; (8004f54 <USB_ActivateEndpoint+0x560>)
 8004cfc:	4323      	orrs	r3, r4
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d02:	687c      	ldr	r4, [r7, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	441c      	add	r4, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4423      	add	r3, r4
 8004d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	891b      	ldrh	r3, [r3, #8]
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8023      	strh	r3, [r4, #0]
 8004d2a:	687c      	ldr	r4, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	441c      	add	r4, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4423      	add	r3, r4
 8004d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d42:	461c      	mov	r4, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	895b      	ldrh	r3, [r3, #10]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8088 	bne.w	8004e6c <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29c      	uxth	r4, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d014      	beq.n	8004d9e <USB_ActivateEndpoint+0x3aa>
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	b29c      	uxth	r4, r3
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	4b70      	ldr	r3, [pc, #448]	; (8004f58 <USB_ActivateEndpoint+0x564>)
 8004d98:	4323      	orrs	r3, r4
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29c      	uxth	r4, r3
 8004dac:	4623      	mov	r3, r4
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d014      	beq.n	8004de0 <USB_ActivateEndpoint+0x3ec>
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	b29c      	uxth	r4, r3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	441a      	add	r2, r3
 8004dd8:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <USB_ActivateEndpoint+0x568>)
 8004dda:	4323      	orrs	r3, r4
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	b29c      	uxth	r4, r3
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	441a      	add	r2, r3
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <USB_ActivateEndpoint+0x568>)
 8004e04:	4323      	orrs	r3, r4
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	b29c      	uxth	r4, r3
 8004e22:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004e26:	b29c      	uxth	r4, r3
 8004e28:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004e2c:	b29c      	uxth	r4, r3
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	441a      	add	r2, r3
 8004e38:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <USB_ActivateEndpoint+0x56c>)
 8004e3a:	4323      	orrs	r3, r4
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	b29c      	uxth	r4, r3
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	441a      	add	r2, r3
 8004e62:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <USB_ActivateEndpoint+0x56c>)
 8004e64:	4323      	orrs	r3, r4
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
 8004e6a:	e0a5      	b.n	8004fb8 <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29c      	uxth	r4, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d014      	beq.n	8004eae <USB_ActivateEndpoint+0x4ba>
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	b29c      	uxth	r4, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	4b2c      	ldr	r3, [pc, #176]	; (8004f58 <USB_ActivateEndpoint+0x564>)
 8004ea8:	4323      	orrs	r3, r4
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29c      	uxth	r4, r3
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <USB_ActivateEndpoint+0x4fc>
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	b29c      	uxth	r4, r3
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <USB_ActivateEndpoint+0x568>)
 8004eea:	4323      	orrs	r3, r4
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	b29c      	uxth	r4, r3
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <USB_ActivateEndpoint+0x564>)
 8004f14:	4323      	orrs	r3, r4
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	78db      	ldrb	r3, [r3, #3]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d020      	beq.n	8004f64 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f38:	b29c      	uxth	r4, r3
 8004f3a:	f084 0320 	eor.w	r3, r4, #32
 8004f3e:	b29c      	uxth	r4, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	441a      	add	r2, r3
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <USB_ActivateEndpoint+0x56c>)
 8004f4c:	4323      	orrs	r3, r4
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
 8004f52:	e01c      	b.n	8004f8e <USB_ActivateEndpoint+0x59a>
 8004f54:	ffff8180 	.word	0xffff8180
 8004f58:	ffffc080 	.word	0xffffc080
 8004f5c:	ffff80c0 	.word	0xffff80c0
 8004f60:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7a:	b29c      	uxth	r4, r3
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <USB_ActivateEndpoint+0x5d0>)
 8004f88:	4323      	orrs	r3, r4
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa4:	b29c      	uxth	r4, r3
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	4b04      	ldr	r3, [pc, #16]	; (8004fc4 <USB_ActivateEndpoint+0x5d0>)
 8004fb2:	4323      	orrs	r3, r4
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc90      	pop	{r4, r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	ffff8080 	.word	0xffff8080

08004fc8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fc8:	b490      	push	{r4, r7}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	7b1b      	ldrb	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d171      	bne.n	80050be <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	785b      	ldrb	r3, [r3, #1]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d036      	beq.n	8005050 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29c      	uxth	r4, r3
 8004ff0:	4623      	mov	r3, r4
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d014      	beq.n	8005024 <USB_DeactivateEndpoint+0x5c>
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	b29c      	uxth	r4, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	4b6b      	ldr	r3, [pc, #428]	; (80051cc <USB_DeactivateEndpoint+0x204>)
 800501e:	4323      	orrs	r3, r4
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503a:	b29c      	uxth	r4, r3
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	441a      	add	r2, r3
 8005046:	4b62      	ldr	r3, [pc, #392]	; (80051d0 <USB_DeactivateEndpoint+0x208>)
 8005048:	4323      	orrs	r3, r4
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]
 800504e:	e144      	b.n	80052da <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	b29c      	uxth	r4, r3
 800505e:	4623      	mov	r3, r4
 8005060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d014      	beq.n	8005092 <USB_DeactivateEndpoint+0xca>
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	b29c      	uxth	r4, r3
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	4b52      	ldr	r3, [pc, #328]	; (80051d4 <USB_DeactivateEndpoint+0x20c>)
 800508c:	4323      	orrs	r3, r4
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	b29c      	uxth	r4, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	441a      	add	r2, r3
 80050b4:	4b46      	ldr	r3, [pc, #280]	; (80051d0 <USB_DeactivateEndpoint+0x208>)
 80050b6:	4323      	orrs	r3, r4
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
 80050bc:	e10d      	b.n	80052da <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f040 8088 	bne.w	80051d8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29c      	uxth	r4, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d014      	beq.n	800510a <USB_DeactivateEndpoint+0x142>
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	b29c      	uxth	r4, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	4b34      	ldr	r3, [pc, #208]	; (80051d4 <USB_DeactivateEndpoint+0x20c>)
 8005104:	4323      	orrs	r3, r4
 8005106:	b29b      	uxth	r3, r3
 8005108:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29c      	uxth	r4, r3
 8005118:	4623      	mov	r3, r4
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d014      	beq.n	800514c <USB_DeactivateEndpoint+0x184>
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	b29c      	uxth	r4, r3
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <USB_DeactivateEndpoint+0x204>)
 8005146:	4323      	orrs	r3, r4
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	b29c      	uxth	r4, r3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	4b17      	ldr	r3, [pc, #92]	; (80051cc <USB_DeactivateEndpoint+0x204>)
 8005170:	4323      	orrs	r3, r4
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518c:	b29c      	uxth	r4, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <USB_DeactivateEndpoint+0x208>)
 800519a:	4323      	orrs	r3, r4
 800519c:	b29b      	uxth	r3, r3
 800519e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b6:	b29c      	uxth	r4, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	441a      	add	r2, r3
 80051c2:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <USB_DeactivateEndpoint+0x208>)
 80051c4:	4323      	orrs	r3, r4
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
 80051ca:	e086      	b.n	80052da <USB_DeactivateEndpoint+0x312>
 80051cc:	ffff80c0 	.word	0xffff80c0
 80051d0:	ffff8080 	.word	0xffff8080
 80051d4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29c      	uxth	r4, r3
 80051e6:	4623      	mov	r3, r4
 80051e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d014      	beq.n	800521a <USB_DeactivateEndpoint+0x252>
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	b29c      	uxth	r4, r3
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <USB_DeactivateEndpoint+0x320>)
 8005214:	4323      	orrs	r3, r4
 8005216:	b29b      	uxth	r3, r3
 8005218:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29c      	uxth	r4, r3
 8005228:	4623      	mov	r3, r4
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d014      	beq.n	800525c <USB_DeactivateEndpoint+0x294>
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	b29c      	uxth	r4, r3
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	4b25      	ldr	r3, [pc, #148]	; (80052ec <USB_DeactivateEndpoint+0x324>)
 8005256:	4323      	orrs	r3, r4
 8005258:	b29b      	uxth	r3, r3
 800525a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	b29c      	uxth	r4, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	441a      	add	r2, r3
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <USB_DeactivateEndpoint+0x320>)
 8005280:	4323      	orrs	r3, r4
 8005282:	b29b      	uxth	r3, r3
 8005284:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529c:	b29c      	uxth	r4, r3
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	441a      	add	r2, r3
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <USB_DeactivateEndpoint+0x328>)
 80052aa:	4323      	orrs	r3, r4
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	b29c      	uxth	r4, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <USB_DeactivateEndpoint+0x328>)
 80052d4:	4323      	orrs	r3, r4
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc90      	pop	{r4, r7}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	ffffc080 	.word	0xffffc080
 80052ec:	ffff80c0 	.word	0xffff80c0
 80052f0:	ffff8080 	.word	0xffff8080

080052f4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b095      	sub	sp, #84	; 0x54
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b01      	cmp	r3, #1
 8005304:	f040 815d 	bne.w	80055c2 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d909      	bls.n	8005328 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	1ad2      	subs	r2, r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	619a      	str	r2, [r3, #24]
 8005326:	e005      	b.n	8005334 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	7b1b      	ldrb	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11a      	bne.n	8005372 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6959      	ldr	r1, [r3, #20]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	88da      	ldrh	r2, [r3, #6]
 8005344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005346:	b29b      	uxth	r3, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fbb1 	bl	8005ab0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800534e:	687c      	ldr	r4, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005356:	b29b      	uxth	r3, r3
 8005358:	441c      	add	r4, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4423      	add	r3, r4
 8005362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e10b      	b.n	800558a <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d062      	beq.n	800544e <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005388:	687c      	ldr	r4, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d144      	bne.n	800541c <USB_EPStartXfer+0x128>
 8005392:	687c      	ldr	r4, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	441c      	add	r4, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4423      	add	r3, r4
 80053a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d110      	bne.n	80053d4 <USB_EPStartXfer+0xe0>
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e037      	b.n	8005444 <USB_EPStartXfer+0x150>
 80053d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d6:	2b3d      	cmp	r3, #61	; 0x3d
 80053d8:	d811      	bhi.n	80053fe <USB_EPStartXfer+0x10a>
 80053da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	647b      	str	r3, [r7, #68]	; 0x44
 80053e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <USB_EPStartXfer+0xfc>
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	3301      	adds	r3, #1
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e022      	b.n	8005444 <USB_EPStartXfer+0x150>
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
 8005404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005406:	b29b      	uxth	r3, r3
 8005408:	029b      	lsls	r3, r3, #10
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e013      	b.n	8005444 <USB_EPStartXfer+0x150>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10f      	bne.n	8005444 <USB_EPStartXfer+0x150>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	441c      	add	r4, r3
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4423      	add	r3, r4
 8005436:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	b29a      	uxth	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	895b      	ldrh	r3, [r3, #10]
 8005448:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800544c:	e061      	b.n	8005512 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	785b      	ldrb	r3, [r3, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d144      	bne.n	80054e0 <USB_EPStartXfer+0x1ec>
 8005456:	687c      	ldr	r4, [r7, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545e:	b29b      	uxth	r3, r3
 8005460:	441c      	add	r4, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4423      	add	r3, r4
 800546a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005472:	2b00      	cmp	r3, #0
 8005474:	d110      	bne.n	8005498 <USB_EPStartXfer+0x1a4>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800547e:	b29a      	uxth	r2, r3
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	801a      	strh	r2, [r3, #0]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005490:	b29a      	uxth	r2, r3
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e038      	b.n	800550a <USB_EPStartXfer+0x216>
 8005498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549a:	2b3d      	cmp	r3, #61	; 0x3d
 800549c:	d811      	bhi.n	80054c2 <USB_EPStartXfer+0x1ce>
 800549e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	643b      	str	r3, [r7, #64]	; 0x40
 80054a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <USB_EPStartXfer+0x1c0>
 80054ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b0:	3301      	adds	r3, #1
 80054b2:	643b      	str	r3, [r7, #64]	; 0x40
 80054b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	029b      	lsls	r3, r3, #10
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e023      	b.n	800550a <USB_EPStartXfer+0x216>
 80054c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
 80054c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d8:	b29a      	uxth	r2, r3
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e014      	b.n	800550a <USB_EPStartXfer+0x216>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d110      	bne.n	800550a <USB_EPStartXfer+0x216>
 80054e8:	687c      	ldr	r4, [r7, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	441c      	add	r4, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4423      	add	r3, r4
 80054fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005504:	b29a      	uxth	r2, r3
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	891b      	ldrh	r3, [r3, #8]
 800550e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005518:	b29b      	uxth	r3, r3
 800551a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fac6 	bl	8005ab0 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d115      	bne.n	8005558 <USB_EPStartXfer+0x264>
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	b29c      	uxth	r4, r3
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	4b99      	ldr	r3, [pc, #612]	; (80057b4 <USB_EPStartXfer+0x4c0>)
 8005550:	4323      	orrs	r3, r4
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]
 8005556:	e018      	b.n	800558a <USB_EPStartXfer+0x296>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d114      	bne.n	800558a <USB_EPStartXfer+0x296>
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	b29c      	uxth	r4, r3
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	4b8d      	ldr	r3, [pc, #564]	; (80057b8 <USB_EPStartXfer+0x4c4>)
 8005584:	4323      	orrs	r3, r4
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a0:	b29c      	uxth	r4, r3
 80055a2:	f084 0310 	eor.w	r3, r4, #16
 80055a6:	b29c      	uxth	r4, r3
 80055a8:	f084 0320 	eor.w	r3, r4, #32
 80055ac:	b29c      	uxth	r4, r3
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	441a      	add	r2, r3
 80055b8:	4b80      	ldr	r3, [pc, #512]	; (80057bc <USB_EPStartXfer+0x4c8>)
 80055ba:	4323      	orrs	r3, r4
 80055bc:	b29b      	uxth	r3, r3
 80055be:	8013      	strh	r3, [r2, #0]
 80055c0:	e13c      	b.n	800583c <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d909      	bls.n	80055e2 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	619a      	str	r2, [r3, #24]
 80055e0:	e005      	b.n	80055ee <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d144      	bne.n	8005680 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80055f6:	687c      	ldr	r4, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	441c      	add	r4, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4423      	add	r3, r4
 800560a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005612:	2b00      	cmp	r3, #0
 8005614:	d110      	bne.n	8005638 <USB_EPStartXfer+0x344>
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561e:	b29a      	uxth	r2, r3
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e0e6      	b.n	8005806 <USB_EPStartXfer+0x512>
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	2b3d      	cmp	r3, #61	; 0x3d
 800563c:	d811      	bhi.n	8005662 <USB_EPStartXfer+0x36e>
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <USB_EPStartXfer+0x360>
 800564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005650:	3301      	adds	r3, #1
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e0d1      	b.n	8005806 <USB_EPStartXfer+0x512>
 8005662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	e0c2      	b.n	8005806 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d144      	bne.n	8005712 <USB_EPStartXfer+0x41e>
 8005688:	687c      	ldr	r4, [r7, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005690:	b29b      	uxth	r3, r3
 8005692:	441c      	add	r4, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4423      	add	r3, r4
 800569c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d110      	bne.n	80056ca <USB_EPStartXfer+0x3d6>
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e038      	b.n	800573c <USB_EPStartXfer+0x448>
 80056ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056cc:	2b3d      	cmp	r3, #61	; 0x3d
 80056ce:	d811      	bhi.n	80056f4 <USB_EPStartXfer+0x400>
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <USB_EPStartXfer+0x3f2>
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	3301      	adds	r3, #1
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	029b      	lsls	r3, r3, #10
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e023      	b.n	800573c <USB_EPStartXfer+0x448>
 80056f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	029b      	lsls	r3, r3, #10
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e014      	b.n	800573c <USB_EPStartXfer+0x448>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d110      	bne.n	800573c <USB_EPStartXfer+0x448>
 800571a:	687c      	ldr	r4, [r7, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005722:	b29b      	uxth	r3, r3
 8005724:	441c      	add	r4, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4423      	add	r3, r4
 800572e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005732:	633b      	str	r3, [r7, #48]	; 0x30
 8005734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005736:	b29a      	uxth	r2, r3
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	687c      	ldr	r4, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d14b      	bne.n	80057de <USB_EPStartXfer+0x4ea>
 8005746:	687c      	ldr	r4, [r7, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800574e:	b29b      	uxth	r3, r3
 8005750:	441c      	add	r4, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4423      	add	r3, r4
 800575a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
 8005760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005762:	2b00      	cmp	r3, #0
 8005764:	d110      	bne.n	8005788 <USB_EPStartXfer+0x494>
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800576e:	b29a      	uxth	r2, r3
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005780:	b29a      	uxth	r2, r3
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e03e      	b.n	8005806 <USB_EPStartXfer+0x512>
 8005788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800578a:	2b3d      	cmp	r3, #61	; 0x3d
 800578c:	d818      	bhi.n	80057c0 <USB_EPStartXfer+0x4cc>
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	637b      	str	r3, [r7, #52]	; 0x34
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <USB_EPStartXfer+0x4b0>
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	3301      	adds	r3, #1
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e029      	b.n	8005806 <USB_EPStartXfer+0x512>
 80057b2:	bf00      	nop
 80057b4:	ffff80c0 	.word	0xffff80c0
 80057b8:	ffffc080 	.word	0xffffc080
 80057bc:	ffff8080 	.word	0xffff8080
 80057c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	637b      	str	r3, [r7, #52]	; 0x34
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e013      	b.n	8005806 <USB_EPStartXfer+0x512>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10f      	bne.n	8005806 <USB_EPStartXfer+0x512>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	441c      	add	r4, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4423      	add	r3, r4
 80057f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005800:	b29a      	uxth	r2, r3
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	b29c      	uxth	r4, r3
 800581e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005822:	b29c      	uxth	r4, r3
 8005824:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005828:	b29c      	uxth	r4, r3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <USB_EPStartXfer+0x554>)
 8005836:	4323      	orrs	r3, r4
 8005838:	b29b      	uxth	r3, r3
 800583a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3754      	adds	r7, #84	; 0x54
 8005842:	46bd      	mov	sp, r7
 8005844:	bd90      	pop	{r4, r7, pc}
 8005846:	bf00      	nop
 8005848:	ffff8080 	.word	0xffff8080

0800584c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800584c:	b490      	push	{r4, r7}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d018      	beq.n	8005890 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	b29c      	uxth	r4, r3
 8005876:	f084 0310 	eor.w	r3, r4, #16
 800587a:	b29c      	uxth	r4, r3
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	4b11      	ldr	r3, [pc, #68]	; (80058cc <USB_EPSetStall+0x80>)
 8005888:	4323      	orrs	r3, r4
 800588a:	b29b      	uxth	r3, r3
 800588c:	8013      	strh	r3, [r2, #0]
 800588e:	e017      	b.n	80058c0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	881b      	ldrh	r3, [r3, #0]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	b29c      	uxth	r4, r3
 80058a8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80058ac:	b29c      	uxth	r4, r3
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	441a      	add	r2, r3
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <USB_EPSetStall+0x80>)
 80058ba:	4323      	orrs	r3, r4
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc90      	pop	{r4, r7}
 80058ca:	4770      	bx	lr
 80058cc:	ffff8080 	.word	0xffff8080

080058d0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058d0:	b490      	push	{r4, r7}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7b1b      	ldrb	r3, [r3, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d17d      	bne.n	80059de <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d03d      	beq.n	8005966 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29c      	uxth	r4, r3
 80058f8:	4623      	mov	r3, r4
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d014      	beq.n	800592c <USB_EPClearStall+0x5c>
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005918:	b29c      	uxth	r4, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	4b31      	ldr	r3, [pc, #196]	; (80059ec <USB_EPClearStall+0x11c>)
 8005926:	4323      	orrs	r3, r4
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	78db      	ldrb	r3, [r3, #3]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d054      	beq.n	80059de <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594a:	b29c      	uxth	r4, r3
 800594c:	f084 0320 	eor.w	r3, r4, #32
 8005950:	b29c      	uxth	r4, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	441a      	add	r2, r3
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <USB_EPClearStall+0x120>)
 800595e:	4323      	orrs	r3, r4
 8005960:	b29b      	uxth	r3, r3
 8005962:	8013      	strh	r3, [r2, #0]
 8005964:	e03b      	b.n	80059de <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29c      	uxth	r4, r3
 8005974:	4623      	mov	r3, r4
 8005976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <USB_EPClearStall+0xd8>
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005994:	b29c      	uxth	r4, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <USB_EPClearStall+0x124>)
 80059a2:	4323      	orrs	r3, r4
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	b29c      	uxth	r4, r3
 80059c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80059c4:	b29c      	uxth	r4, r3
 80059c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80059ca:	b29c      	uxth	r4, r3
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <USB_EPClearStall+0x120>)
 80059d8:	4323      	orrs	r3, r4
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc90      	pop	{r4, r7}
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	ffff80c0 	.word	0xffff80c0
 80059f0:	ffff8080 	.word	0xffff8080
 80059f4:	ffffc080 	.word	0xffffc080

080059f8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d103      	bne.n	8005a12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2280      	movs	r2, #128	; 0x80
 8005a0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b08d      	sub	sp, #52	; 0x34
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	460b      	mov	r3, r1
 8005ac0:	80fb      	strh	r3, [r7, #6]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ac6:	88bb      	ldrh	r3, [r7, #4]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	e01b      	b.n	8005b20 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	3301      	adds	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	3302      	adds	r3, #2
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e0      	bne.n	8005ae8 <USB_WritePMA+0x38>
  }
}
 8005b26:	bf00      	nop
 8005b28:	3734      	adds	r7, #52	; 0x34
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b08b      	sub	sp, #44	; 0x2c
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	80fb      	strh	r3, [r7, #6]
 8005b44:	4613      	mov	r3, r2
 8005b46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005b48:	88bb      	ldrh	r3, [r7, #4]
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b62:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	e017      	b.n	8005b9a <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	3302      	adds	r3, #2
 8005b74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3301      	adds	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	3b01      	subs	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e4      	bne.n	8005b6a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ba0:	88bb      	ldrh	r3, [r7, #4]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	701a      	strb	r2, [r3, #0]
  }
}
 8005bba:	bf00      	nop
 8005bbc:	372c      	adds	r7, #44	; 0x2c
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7c1b      	ldrb	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d115      	bne.n	8005c0a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005be2:	2202      	movs	r2, #2
 8005be4:	2181      	movs	r1, #129	; 0x81
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fe82 	bl	80078f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fe78 	bl	80078f0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8005c08:	e012      	b.n	8005c30 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	2181      	movs	r1, #129	; 0x81
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fe6d 	bl	80078f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	2202      	movs	r2, #2
 8005c20:	2101      	movs	r1, #1
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fe64 	bl	80078f0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c30:	2308      	movs	r3, #8
 8005c32:	2203      	movs	r2, #3
 8005c34:	2182      	movs	r1, #130	; 0x82
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fe5a 	bl	80078f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005c42:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c46:	f002 f84d 	bl	8007ce4 <USBD_static_malloc>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
 8005c60:	e026      	b.n	8005cb0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005c68:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	7c1b      	ldrb	r3, [r3, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 ff9f 	bl	8007bdc <USBD_LL_PrepareReceive>
 8005c9e:	e007      	b.n	8005cb0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ca6:	2340      	movs	r3, #64	; 0x40
 8005ca8:	2101      	movs	r1, #1
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 ff96 	bl	8007bdc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cca:	2181      	movs	r1, #129	; 0x81
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 fe4d 	bl	800796c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005cd8:	2101      	movs	r1, #1
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fe46 	bl	800796c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ce8:	2182      	movs	r1, #130	; 0x82
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fe3e 	bl	800796c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00e      	beq.n	8005d1e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fff5 	bl	8007d00 <USBD_static_free>
    pdev->pClassData = NULL;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005d38:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d039      	beq.n	8005dc6 <USBD_CDC_Setup+0x9e>
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d17c      	bne.n	8005e50 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	88db      	ldrh	r3, [r3, #6]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d029      	beq.n	8005db2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	b25b      	sxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da11      	bge.n	8005d8c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8005d74:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	88d2      	ldrh	r2, [r2, #6]
 8005d7a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	88db      	ldrh	r3, [r3, #6]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 f9a7 	bl	80070d8 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8005d8a:	e068      	b.n	8005e5e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785a      	ldrb	r2, [r3, #1]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	88db      	ldrh	r3, [r3, #6]
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005da2:	6939      	ldr	r1, [r7, #16]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	88db      	ldrh	r3, [r3, #6]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f001 f9c2 	bl	8007134 <USBD_CtlPrepareRx>
    break;
 8005db0:	e055      	b.n	8005e5e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	7850      	ldrb	r0, [r2, #1]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	4798      	blx	r3
    break;
 8005dc4:	e04b      	b.n	8005e5e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	785b      	ldrb	r3, [r3, #1]
 8005dca:	2b0a      	cmp	r3, #10
 8005dcc:	d017      	beq.n	8005dfe <USBD_CDC_Setup+0xd6>
 8005dce:	2b0b      	cmp	r3, #11
 8005dd0:	d029      	beq.n	8005e26 <USBD_CDC_Setup+0xfe>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d133      	bne.n	8005e3e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d107      	bne.n	8005df0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8005de0:	f107 030c 	add.w	r3, r7, #12
 8005de4:	2202      	movs	r2, #2
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 f975 	bl	80070d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005dee:	e02e      	b.n	8005e4e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 f905 	bl	8007002 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005dfc:	e027      	b.n	8005e4e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d107      	bne.n	8005e18 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8005e08:	f107 030f 	add.w	r3, r7, #15
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f961 	bl	80070d8 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8005e16:	e01a      	b.n	8005e4e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 f8f1 	bl	8007002 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005e20:	2302      	movs	r3, #2
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	e013      	b.n	8005e4e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d00d      	beq.n	8005e4c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 f8e5 	bl	8007002 <USBD_CtlError>
			  ret = USBD_FAIL;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005e3c:	e006      	b.n	8005e4c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 f8de 	bl	8007002 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e46:	2302      	movs	r3, #2
 8005e48:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4a:	e000      	b.n	8005e4e <USBD_CDC_Setup+0x126>
      break;
 8005e4c:	bf00      	nop
    }
    break;
 8005e4e:	e006      	b.n	8005e5e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 f8d5 	bl	8007002 <USBD_CtlError>
    ret = USBD_FAIL;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	75fb      	strb	r3, [r7, #23]
    break;
 8005e5c:	bf00      	nop
  }

  return ret;
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3718      	adds	r7, #24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e7a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005e82:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d037      	beq.n	8005efe <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	331c      	adds	r3, #28
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d026      	beq.n	8005ef2 <USBD_CDC_DataIn+0x8a>
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	440b      	add	r3, r1
 8005eb2:	331c      	adds	r3, #28
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	0152      	lsls	r2, r2, #5
 8005ebc:	440a      	add	r2, r1
 8005ebe:	3238      	adds	r2, #56	; 0x38
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ec6:	fb02 f201 	mul.w	r2, r2, r1
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d110      	bne.n	8005ef2 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	440b      	add	r3, r1
 8005ede:	331c      	adds	r3, #28
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8005ee4:	78f9      	ldrb	r1, [r7, #3]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2200      	movs	r2, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f001 fe3c 	bl	8007b68 <USBD_LL_Transmit>
 8005ef0:	e003      	b.n	8005efa <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 fe95 	bl	8007c50 <USBD_LL_GetRxDataSize>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4798      	blx	r3

    return USBD_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e000      	b.n	8005f56 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005f6c:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <USBD_CDC_EP0_RxReady+0x46>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f7e:	2bff      	cmp	r3, #255	; 0xff
 8005f80:	d010      	beq.n	8005fa4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005f90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2243      	movs	r2, #67	; 0x43
 8005fbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005fbe:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr
 8005fcc:	2000009c 	.word	0x2000009c

08005fd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2243      	movs	r2, #67	; 0x43
 8005fdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005fde:	4b03      	ldr	r3, [pc, #12]	; (8005fec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000058 	.word	0x20000058

08005ff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2243      	movs	r2, #67	; 0x43
 8005ffc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005ffe:	4b03      	ldr	r3, [pc, #12]	; (800600c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	200000e0 	.word	0x200000e0

08006010 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	220a      	movs	r2, #10
 800601c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800601e:	4b03      	ldr	r3, [pc, #12]	; (800602c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000014 	.word	0x20000014

08006030 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800603a:	2302      	movs	r3, #2
 800603c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006072:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060c8:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01c      	beq.n	800610e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d115      	bne.n	800610a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2181      	movs	r1, #129	; 0x81
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 fd31 	bl	8007b68 <USBD_LL_Transmit>

      return USBD_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e002      	b.n	8006110 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800610e:	2302      	movs	r3, #2
  }
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006126:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800612e:	2b00      	cmp	r3, #0
 8006130:	d017      	beq.n	8006162 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7c1b      	ldrb	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006144:	2101      	movs	r1, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 fd48 	bl	8007bdc <USBD_LL_PrepareReceive>
 800614c:	e007      	b.n	800615e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006154:	2340      	movs	r3, #64	; 0x40
 8006156:	2101      	movs	r1, #1
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 fd3f 	bl	8007bdc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006180:	2302      	movs	r3, #2
 8006182:	e01a      	b.n	80061ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	79fa      	ldrb	r2, [r7, #7]
 80061b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f001 fb08 	bl	80077c8 <USBD_LL_Init>

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d006      	beq.n	80061e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e001      	b.n	80061e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80061e4:	2302      	movs	r3, #2
 80061e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fb44 	bl	800788c <USBD_LL_Start>

  return USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006230:	2302      	movs	r3, #2
 8006232:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	4611      	mov	r1, r2
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	78fa      	ldrb	r2, [r7, #3]
 8006278:	4611      	mov	r1, r2
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
  return USBD_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fe74 	bl	8006f88 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d00c      	beq.n	80062de <USBD_LL_SetupStage+0x56>
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d302      	bcc.n	80062ce <USBD_LL_SetupStage+0x46>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d010      	beq.n	80062ee <USBD_LL_SetupStage+0x66>
 80062cc:	e017      	b.n	80062fe <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f9c8 	bl	800666c <USBD_StdDevReq>
    break;
 80062dc:	e01a      	b.n	8006314 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa2a 	bl	8006740 <USBD_StdItfReq>
    break;
 80062ec:	e012      	b.n	8006314 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa68 	bl	80067cc <USBD_StdEPReq>
    break;
 80062fc:	e00a      	b.n	8006314 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006308:	b2db      	uxtb	r3, r3
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fb63 	bl	80079d8 <USBD_LL_StallEP>
    break;
 8006312:	bf00      	nop
  }

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	460b      	mov	r3, r1
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d14b      	bne.n	80063ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006338:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006340:	2b03      	cmp	r3, #3
 8006342:	d134      	bne.n	80063ae <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d919      	bls.n	8006384 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	1ad2      	subs	r2, r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006366:	429a      	cmp	r2, r3
 8006368:	d203      	bcs.n	8006372 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800636e:	b29b      	uxth	r3, r3
 8006370:	e002      	b.n	8006378 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fef7 	bl	8007170 <USBD_CtlContinueRx>
 8006382:	e038      	b.n	80063f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006396:	2b03      	cmp	r3, #3
 8006398:	d105      	bne.n	80063a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fef4 	bl	8007194 <USBD_CtlSendStatus>
 80063ac:	e023      	b.n	80063f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d11e      	bne.n	80063f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80063c0:	2100      	movs	r1, #0
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 fb08 	bl	80079d8 <USBD_LL_StallEP>
 80063c8:	e015      	b.n	80063f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00d      	beq.n	80063f2 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d108      	bne.n	80063f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	7afa      	ldrb	r2, [r7, #11]
 80063ea:	4611      	mov	r1, r2
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	4798      	blx	r3
 80063f0:	e001      	b.n	80063f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063f2:	2302      	movs	r3, #2
 80063f4:	e000      	b.n	80063f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	460b      	mov	r3, r1
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800640e:	7afb      	ldrb	r3, [r7, #11]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d17f      	bne.n	8006514 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3314      	adds	r3, #20
 8006418:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006420:	2b02      	cmp	r3, #2
 8006422:	d15c      	bne.n	80064de <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	429a      	cmp	r2, r3
 800642e:	d915      	bls.n	800645c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	1ad2      	subs	r2, r2, r3
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	b29b      	uxth	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fe61 	bl	8007110 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800644e:	2300      	movs	r3, #0
 8006450:	2200      	movs	r2, #0
 8006452:	2100      	movs	r1, #0
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f001 fbc1 	bl	8007bdc <USBD_LL_PrepareReceive>
 800645a:	e04e      	b.n	80064fa <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	6912      	ldr	r2, [r2, #16]
 8006464:	fbb3 f1f2 	udiv	r1, r3, r2
 8006468:	fb02 f201 	mul.w	r2, r2, r1
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11c      	bne.n	80064ac <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800647a:	429a      	cmp	r2, r3
 800647c:	d316      	bcc.n	80064ac <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006488:	429a      	cmp	r2, r3
 800648a:	d20f      	bcs.n	80064ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800648c:	2200      	movs	r2, #0
 800648e:	2100      	movs	r1, #0
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fe3d 	bl	8007110 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800649e:	2300      	movs	r3, #0
 80064a0:	2200      	movs	r2, #0
 80064a2:	2100      	movs	r1, #0
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f001 fb99 	bl	8007bdc <USBD_LL_PrepareReceive>
 80064aa:	e026      	b.n	80064fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80064be:	2b03      	cmp	r3, #3
 80064c0:	d105      	bne.n	80064ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f001 fa81 	bl	80079d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fe6f 	bl	80071ba <USBD_CtlReceiveStatus>
 80064dc:	e00d      	b.n	80064fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d004      	beq.n	80064f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80064f2:	2180      	movs	r1, #128	; 0x80
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f001 fa6f 	bl	80079d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006500:	2b01      	cmp	r3, #1
 8006502:	d11d      	bne.n	8006540 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff fe82 	bl	800620e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006512:	e015      	b.n	8006540 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006526:	2b03      	cmp	r3, #3
 8006528:	d108      	bne.n	800653c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	7afa      	ldrb	r2, [r7, #11]
 8006534:	4611      	mov	r1, r2
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	4798      	blx	r3
 800653a:	e001      	b.n	8006540 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800653c:	2302      	movs	r3, #2
 800653e:	e000      	b.n	8006542 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006552:	2340      	movs	r3, #64	; 0x40
 8006554:	2200      	movs	r2, #0
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f9c9 	bl	80078f0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2240      	movs	r2, #64	; 0x40
 800656a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f9bb 	bl	80078f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2240      	movs	r2, #64	; 0x40
 8006584:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6852      	ldr	r2, [r2, #4]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	4611      	mov	r1, r2
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	4798      	blx	r3
  }

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2204      	movs	r2, #4
 8006604:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006646:	2b03      	cmp	r3, #3
 8006648:	d10b      	bne.n	8006662 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006682:	2b20      	cmp	r3, #32
 8006684:	d004      	beq.n	8006690 <USBD_StdDevReq+0x24>
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d002      	beq.n	8006690 <USBD_StdDevReq+0x24>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <USBD_StdDevReq+0x34>
 800668e:	e04c      	b.n	800672a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
    break;
 800669e:	e049      	b.n	8006734 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b09      	cmp	r3, #9
 80066a6:	d83a      	bhi.n	800671e <USBD_StdDevReq+0xb2>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <USBD_StdDevReq+0x44>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	08006701 	.word	0x08006701
 80066b4:	08006715 	.word	0x08006715
 80066b8:	0800671f 	.word	0x0800671f
 80066bc:	0800670b 	.word	0x0800670b
 80066c0:	0800671f 	.word	0x0800671f
 80066c4:	080066e3 	.word	0x080066e3
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	0800671f 	.word	0x0800671f
 80066d0:	080066f7 	.word	0x080066f7
 80066d4:	080066ed 	.word	0x080066ed
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9d2 	bl	8006a84 <USBD_GetDescriptor>
      break;
 80066e0:	e022      	b.n	8006728 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fae3 	bl	8006cb0 <USBD_SetAddress>
      break;
 80066ea:	e01d      	b.n	8006728 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fb20 	bl	8006d34 <USBD_SetConfig>
      break;
 80066f4:	e018      	b.n	8006728 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fba9 	bl	8006e50 <USBD_GetConfig>
      break;
 80066fe:	e013      	b.n	8006728 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbd8 	bl	8006eb8 <USBD_GetStatus>
      break;
 8006708:	e00e      	b.n	8006728 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fc06 	bl	8006f1e <USBD_SetFeature>
      break;
 8006712:	e009      	b.n	8006728 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc15 	bl	8006f46 <USBD_ClrFeature>
      break;
 800671c:	e004      	b.n	8006728 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc6e 	bl	8007002 <USBD_CtlError>
      break;
 8006726:	bf00      	nop
    }
    break;
 8006728:	e004      	b.n	8006734 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800672a:	6839      	ldr	r1, [r7, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc68 	bl	8007002 <USBD_CtlError>
    break;
 8006732:	bf00      	nop
  }

  return ret;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006756:	2b20      	cmp	r3, #32
 8006758:	d003      	beq.n	8006762 <USBD_StdItfReq+0x22>
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d001      	beq.n	8006762 <USBD_StdItfReq+0x22>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d12a      	bne.n	80067b8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006768:	3b01      	subs	r3, #1
 800676a:	2b02      	cmp	r3, #2
 800676c:	d81d      	bhi.n	80067aa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	889b      	ldrh	r3, [r3, #4]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d813      	bhi.n	80067a0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	88db      	ldrh	r3, [r3, #6]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d110      	bne.n	80067b4 <USBD_StdItfReq+0x74>
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10d      	bne.n	80067b4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fcfb 	bl	8007194 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800679e:	e009      	b.n	80067b4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fc2d 	bl	8007002 <USBD_CtlError>
      break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fc28 	bl	8007002 <USBD_CtlError>
      break;
 80067b2:	e000      	b.n	80067b6 <USBD_StdItfReq+0x76>
      break;
 80067b4:	bf00      	nop
    }
    break;
 80067b6:	e004      	b.n	80067c2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fc21 	bl	8007002 <USBD_CtlError>
    break;
 80067c0:	bf00      	nop
  }

  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	889b      	ldrh	r3, [r3, #4]
 80067de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d004      	beq.n	80067f6 <USBD_StdEPReq+0x2a>
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d002      	beq.n	80067f6 <USBD_StdEPReq+0x2a>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <USBD_StdEPReq+0x3a>
 80067f4:	e13b      	b.n	8006a6e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
    break;
 8006804:	e138      	b.n	8006a78 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800680e:	2b20      	cmp	r3, #32
 8006810:	d10a      	bne.n	8006828 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

      return ret;
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	e128      	b.n	8006a7a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d03e      	beq.n	80068ae <USBD_StdEPReq+0xe2>
 8006830:	2b03      	cmp	r3, #3
 8006832:	d002      	beq.n	800683a <USBD_StdEPReq+0x6e>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d070      	beq.n	800691a <USBD_StdEPReq+0x14e>
 8006838:	e113      	b.n	8006a62 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006840:	2b02      	cmp	r3, #2
 8006842:	d002      	beq.n	800684a <USBD_StdEPReq+0x7e>
 8006844:	2b03      	cmp	r3, #3
 8006846:	d015      	beq.n	8006874 <USBD_StdEPReq+0xa8>
 8006848:	e02b      	b.n	80068a2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <USBD_StdEPReq+0x9e>
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d009      	beq.n	800686a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 f8bc 	bl	80079d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 f8b8 	bl	80079d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006868:	e020      	b.n	80068ac <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fbc8 	bl	8007002 <USBD_CtlError>
        break;
 8006872:	e01b      	b.n	80068ac <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10e      	bne.n	800689a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <USBD_StdEPReq+0xce>
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d008      	beq.n	800689a <USBD_StdEPReq+0xce>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 f89f 	bl	80079d8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc7a 	bl	8007194 <USBD_CtlSendStatus>

        break;
 80068a0:	e004      	b.n	80068ac <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fbac 	bl	8007002 <USBD_CtlError>
        break;
 80068aa:	bf00      	nop
      }
      break;
 80068ac:	e0de      	b.n	8006a6c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d002      	beq.n	80068be <USBD_StdEPReq+0xf2>
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d015      	beq.n	80068e8 <USBD_StdEPReq+0x11c>
 80068bc:	e026      	b.n	800690c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00c      	beq.n	80068de <USBD_StdEPReq+0x112>
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d009      	beq.n	80068de <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f882 	bl	80079d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80068d4:	2180      	movs	r1, #128	; 0x80
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f001 f87e 	bl	80079d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80068dc:	e01c      	b.n	8006918 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb8e 	bl	8007002 <USBD_CtlError>
        break;
 80068e6:	e017      	b.n	8006918 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	885b      	ldrh	r3, [r3, #2]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d112      	bne.n	8006916 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f001 f8a0 	bl	8007a44 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fc45 	bl	8007194 <USBD_CtlSendStatus>
        }
        break;
 800690a:	e004      	b.n	8006916 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb77 	bl	8007002 <USBD_CtlError>
        break;
 8006914:	e000      	b.n	8006918 <USBD_StdEPReq+0x14c>
        break;
 8006916:	bf00      	nop
      }
      break;
 8006918:	e0a8      	b.n	8006a6c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006920:	2b02      	cmp	r3, #2
 8006922:	d002      	beq.n	800692a <USBD_StdEPReq+0x15e>
 8006924:	2b03      	cmp	r3, #3
 8006926:	d031      	beq.n	800698c <USBD_StdEPReq+0x1c0>
 8006928:	e095      	b.n	8006a56 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <USBD_StdEPReq+0x174>
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b80      	cmp	r3, #128	; 0x80
 8006934:	d004      	beq.n	8006940 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb62 	bl	8007002 <USBD_CtlError>
          break;
 800693e:	e08f      	b.n	8006a60 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da0b      	bge.n	8006960 <USBD_StdEPReq+0x194>
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	3310      	adds	r3, #16
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	3304      	adds	r3, #4
 800695e:	e00a      	b.n	8006976 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2202      	movs	r2, #2
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fba7 	bl	80070d8 <USBD_CtlSendData>
          break;
 800698a:	e069      	b.n	8006a60 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800698c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	da11      	bge.n	80069b8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	f003 020f 	and.w	r2, r3, #15
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3318      	adds	r3, #24
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d117      	bne.n	80069de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fb26 	bl	8007002 <USBD_CtlError>
            break;
 80069b6:	e053      	b.n	8006a60 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb13 	bl	8007002 <USBD_CtlError>
            break;
 80069dc:	e040      	b.n	8006a60 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80069de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da0b      	bge.n	80069fe <USBD_StdEPReq+0x232>
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	3310      	adds	r3, #16
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	4413      	add	r3, r2
 80069fa:	3304      	adds	r3, #4
 80069fc:	e00a      	b.n	8006a14 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <USBD_StdEPReq+0x256>
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d103      	bne.n	8006a2a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e00e      	b.n	8006a48 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 f83e 	bl	8007ab0 <USBD_LL_IsStallEP>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	e002      	b.n	8006a48 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb42 	bl	80070d8 <USBD_CtlSendData>
          break;
 8006a54:	e004      	b.n	8006a60 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fad2 	bl	8007002 <USBD_CtlError>
        break;
 8006a5e:	bf00      	nop
      }
      break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 facc 	bl	8007002 <USBD_CtlError>
      break;
 8006a6a:	bf00      	nop
    }
    break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fac6 	bl	8007002 <USBD_CtlError>
    break;
 8006a76:	bf00      	nop
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	885b      	ldrh	r3, [r3, #2]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b0e      	cmp	r3, #14
 8006a9a:	f200 80e5 	bhi.w	8006c68 <USBD_GetDescriptor+0x1e4>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <USBD_GetDescriptor+0x20>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006b11 	.word	0x08006b11
 8006aac:	08006b51 	.word	0x08006b51
 8006ab0:	08006c69 	.word	0x08006c69
 8006ab4:	08006c69 	.word	0x08006c69
 8006ab8:	08006c15 	.word	0x08006c15
 8006abc:	08006c3b 	.word	0x08006c3b
 8006ac0:	08006c69 	.word	0x08006c69
 8006ac4:	08006c69 	.word	0x08006c69
 8006ac8:	08006c69 	.word	0x08006c69
 8006acc:	08006c69 	.word	0x08006c69
 8006ad0:	08006c69 	.word	0x08006c69
 8006ad4:	08006c69 	.word	0x08006c69
 8006ad8:	08006c69 	.word	0x08006c69
 8006adc:	08006ae1 	.word	0x08006ae1
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	7c12      	ldrb	r2, [r2, #16]
 8006aec:	f107 010a 	add.w	r1, r7, #10
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
    break;
 8006af6:	e0bc      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	7c12      	ldrb	r2, [r2, #16]
 8006b04:	f107 010a 	add.w	r1, r7, #10
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4798      	blx	r3
 8006b0c:	60f8      	str	r0, [r7, #12]
    break;
 8006b0e:	e0b0      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7c1b      	ldrb	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10d      	bne.n	8006b34 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	f107 020a 	add.w	r2, r7, #10
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	2202      	movs	r2, #2
 8006b30:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b32:	e09e      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	f107 020a 	add.w	r2, r7, #10
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	701a      	strb	r2, [r3, #0]
    break;
 8006b4e:	e090      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	885b      	ldrh	r3, [r3, #2]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	d856      	bhi.n	8006c08 <USBD_GetDescriptor+0x184>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USBD_GetDescriptor+0xdc>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b79 	.word	0x08006b79
 8006b64:	08006b91 	.word	0x08006b91
 8006b68:	08006ba9 	.word	0x08006ba9
 8006b6c:	08006bc1 	.word	0x08006bc1
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006bf1 	.word	0x08006bf1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	7c12      	ldrb	r2, [r2, #16]
 8006b84:	f107 010a 	add.w	r1, r7, #10
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
      break;
 8006b8e:	e040      	b.n	8006c12 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	7c12      	ldrb	r2, [r2, #16]
 8006b9c:	f107 010a 	add.w	r1, r7, #10
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	4798      	blx	r3
 8006ba4:	60f8      	str	r0, [r7, #12]
      break;
 8006ba6:	e034      	b.n	8006c12 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 010a 	add.w	r1, r7, #10
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
      break;
 8006bbe:	e028      	b.n	8006c12 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	7c12      	ldrb	r2, [r2, #16]
 8006bcc:	f107 010a 	add.w	r1, r7, #10
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
      break;
 8006bd6:	e01c      	b.n	8006c12 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	7c12      	ldrb	r2, [r2, #16]
 8006be4:	f107 010a 	add.w	r1, r7, #10
 8006be8:	4610      	mov	r0, r2
 8006bea:	4798      	blx	r3
 8006bec:	60f8      	str	r0, [r7, #12]
      break;
 8006bee:	e010      	b.n	8006c12 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7c12      	ldrb	r2, [r2, #16]
 8006bfc:	f107 010a 	add.w	r1, r7, #10
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
      break;
 8006c06:	e004      	b.n	8006c12 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9f9 	bl	8007002 <USBD_CtlError>
      return;
 8006c10:	e04b      	b.n	8006caa <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8006c12:	e02e      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7c1b      	ldrb	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d109      	bne.n	8006c30 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	f107 020a 	add.w	r2, r7, #10
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
      break;
 8006c2e:	e020      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9e5 	bl	8007002 <USBD_CtlError>
      return;
 8006c38:	e037      	b.n	8006caa <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	7c1b      	ldrb	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f107 020a 	add.w	r2, r7, #10
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4798      	blx	r3
 8006c52:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	2207      	movs	r2, #7
 8006c5a:	701a      	strb	r2, [r3, #0]
      break;
 8006c5c:	e009      	b.n	8006c72 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f9ce 	bl	8007002 <USBD_CtlError>
      return;
 8006c66:	e020      	b.n	8006caa <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9c9 	bl	8007002 <USBD_CtlError>
    return;
 8006c70:	e01b      	b.n	8006caa <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8006c72:	897b      	ldrh	r3, [r7, #10]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <USBD_GetDescriptor+0x218>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88db      	ldrh	r3, [r3, #6]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	88da      	ldrh	r2, [r3, #6]
 8006c84:	897b      	ldrh	r3, [r7, #10]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	bf28      	it	cs
 8006c8a:	4613      	movcs	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8006c90:	897b      	ldrh	r3, [r7, #10]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68f9      	ldr	r1, [r7, #12]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa1e 	bl	80070d8 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fa75 	bl	8007194 <USBD_CtlSendStatus>
  }
}
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d130      	bne.n	8006d24 <USBD_SetAddress+0x74>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d12c      	bne.n	8006d24 <USBD_SetAddress+0x74>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	885b      	ldrh	r3, [r3, #2]
 8006cce:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd0:	d828      	bhi.n	8006d24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d104      	bne.n	8006cf2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f989 	bl	8007002 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf0:	e01c      	b.n	8006d2c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7bfa      	ldrb	r2, [r7, #15]
 8006cf6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fefc 	bl	8007afc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa45 	bl	8007194 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	e008      	b.n	8006d2c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d22:	e003      	b.n	8006d2c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f96b 	bl	8007002 <USBD_CtlError>
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	885b      	ldrh	r3, [r3, #2]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	4b41      	ldr	r3, [pc, #260]	; (8006e4c <USBD_SetConfig+0x118>)
 8006d46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d48:	4b40      	ldr	r3, [pc, #256]	; (8006e4c <USBD_SetConfig+0x118>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d904      	bls.n	8006d5a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f955 	bl	8007002 <USBD_CtlError>
 8006d58:	e075      	b.n	8006e46 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d002      	beq.n	8006d6a <USBD_SetConfig+0x36>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d023      	beq.n	8006db0 <USBD_SetConfig+0x7c>
 8006d68:	e062      	b.n	8006e30 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8006d6a:	4b38      	ldr	r3, [pc, #224]	; (8006e4c <USBD_SetConfig+0x118>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01a      	beq.n	8006da8 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8006d72:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <USBD_SetConfig+0x118>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006d84:	4b31      	ldr	r3, [pc, #196]	; (8006e4c <USBD_SetConfig+0x118>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fa4a 	bl	8006224 <USBD_SetClassConfig>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d104      	bne.n	8006da0 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f932 	bl	8007002 <USBD_CtlError>
          return;
 8006d9e:	e052      	b.n	8006e46 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f9f7 	bl	8007194 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006da6:	e04e      	b.n	8006e46 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f9f3 	bl	8007194 <USBD_CtlSendStatus>
      break;
 8006dae:	e04a      	b.n	8006e46 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006db0:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <USBD_SetConfig+0x118>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d112      	bne.n	8006dde <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8006dc0:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <USBD_SetConfig+0x118>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8006dca:	4b20      	ldr	r3, [pc, #128]	; (8006e4c <USBD_SetConfig+0x118>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fa46 	bl	8006262 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9dc 	bl	8007194 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006ddc:	e033      	b.n	8006e46 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8006dde:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <USBD_SetConfig+0x118>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d01d      	beq.n	8006e28 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff fa34 	bl	8006262 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <USBD_SetConfig+0x118>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006e04:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <USBD_SetConfig+0x118>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fa0a 	bl	8006224 <USBD_SetClassConfig>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d104      	bne.n	8006e20 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8f2 	bl	8007002 <USBD_CtlError>
          return;
 8006e1e:	e012      	b.n	8006e46 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9b7 	bl	8007194 <USBD_CtlSendStatus>
      break;
 8006e26:	e00e      	b.n	8006e46 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9b3 	bl	8007194 <USBD_CtlSendStatus>
      break;
 8006e2e:	e00a      	b.n	8006e46 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8e5 	bl	8007002 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <USBD_SetConfig+0x118>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fa0f 	bl	8006262 <USBD_ClrClassConfig>
      break;
 8006e44:	bf00      	nop
    }
  }
}
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	2000078c 	.word	0x2000078c

08006e50 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d004      	beq.n	8006e6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8cc 	bl	8007002 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8006e6a:	e021      	b.n	8006eb0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	db17      	blt.n	8006ea6 <USBD_GetConfig+0x56>
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	dd02      	ble.n	8006e80 <USBD_GetConfig+0x30>
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d00b      	beq.n	8006e96 <USBD_GetConfig+0x46>
 8006e7e:	e012      	b.n	8006ea6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3308      	adds	r3, #8
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f922 	bl	80070d8 <USBD_CtlSendData>
      break;
 8006e94:	e00c      	b.n	8006eb0 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f91a 	bl	80070d8 <USBD_CtlSendData>
      break;
 8006ea4:	e004      	b.n	8006eb0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f8aa 	bl	8007002 <USBD_CtlError>
      break;
 8006eae:	bf00      	nop
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d81e      	bhi.n	8006f0c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	88db      	ldrh	r3, [r3, #6]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d004      	beq.n	8006ee0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f892 	bl	8007002 <USBD_CtlError>
      break;
 8006ede:	e01a      	b.n	8006f16 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f043 0202 	orr.w	r2, r3, #2
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	330c      	adds	r3, #12
 8006f00:	2202      	movs	r2, #2
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f8e7 	bl	80070d8 <USBD_CtlSendData>
    break;
 8006f0a:	e004      	b.n	8006f16 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f877 	bl	8007002 <USBD_CtlError>
    break;
 8006f14:	bf00      	nop
  }
}
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	885b      	ldrh	r3, [r3, #2]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d106      	bne.n	8006f3e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f92b 	bl	8007194 <USBD_CtlSendStatus>
  }

}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f56:	3b01      	subs	r3, #1
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d80b      	bhi.n	8006f74 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	885b      	ldrh	r3, [r3, #2]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10c      	bne.n	8006f7e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f911 	bl	8007194 <USBD_CtlSendStatus>
    }
    break;
 8006f72:	e004      	b.n	8006f7e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f843 	bl	8007002 <USBD_CtlError>
    break;
 8006f7c:	e000      	b.n	8006f80 <USBD_ClrFeature+0x3a>
    break;
 8006f7e:	bf00      	nop
  }
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	785a      	ldrb	r2, [r3, #1]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	3302      	adds	r3, #2
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	3303      	adds	r3, #3
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	021b      	lsls	r3, r3, #8
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3305      	adds	r3, #5
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	3306      	adds	r3, #6
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	3307      	adds	r3, #7
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	80da      	strh	r2, [r3, #6]

}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800700c:	2180      	movs	r1, #128	; 0x80
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fce2 	bl	80079d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007014:	2100      	movs	r1, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fcde 	bl	80079d8 <USBD_LL_StallEP>
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d032      	beq.n	80070a0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f834 	bl	80070a8 <USBD_GetLen>
 8007040:	4603      	mov	r3, r0
 8007042:	3301      	adds	r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	75fa      	strb	r2, [r7, #23]
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	75fa      	strb	r2, [r7, #23]
 8007066:	461a      	mov	r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	2203      	movs	r2, #3
 800706e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007070:	e012      	b.n	8007098 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	60fa      	str	r2, [r7, #12]
 8007078:	7dfa      	ldrb	r2, [r7, #23]
 800707a:	1c51      	adds	r1, r2, #1
 800707c:	75f9      	strb	r1, [r7, #23]
 800707e:	4611      	mov	r1, r2
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	440a      	add	r2, r1
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	75fa      	strb	r2, [r7, #23]
 800708e:	461a      	mov	r2, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4413      	add	r3, r2
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e8      	bne.n	8007072 <USBD_GetString+0x4e>
    }
  }
}
 80070a0:	bf00      	nop
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80070b4:	e005      	b.n	80070c2 <USBD_GetLen+0x1a>
    {
        len++;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	3301      	adds	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
        buf++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3301      	adds	r3, #1
 80070c0:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f5      	bne.n	80070b6 <USBD_GetLen+0xe>
    }

    return len;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	4613      	mov	r3, r2
 80070e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	2100      	movs	r1, #0
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fd31 	bl	8007b68 <USBD_LL_Transmit>

  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800711e:	88fb      	ldrh	r3, [r7, #6]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	2100      	movs	r1, #0
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fd1f 	bl	8007b68 <USBD_LL_Transmit>

  return USBD_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2203      	movs	r2, #3
 8007146:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	2100      	movs	r1, #0
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 fd3b 	bl	8007bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	2100      	movs	r1, #0
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 fd29 	bl	8007bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2204      	movs	r2, #4
 80071a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071a4:	2300      	movs	r3, #0
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fcdc 	bl	8007b68 <USBD_LL_Transmit>

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2205      	movs	r2, #5
 80071c6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80071ca:	2300      	movs	r3, #0
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd03 	bl	8007bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071e4:	2200      	movs	r2, #0
 80071e6:	4912      	ldr	r1, [pc, #72]	; (8007230 <MX_USB_DEVICE_Init+0x50>)
 80071e8:	4812      	ldr	r0, [pc, #72]	; (8007234 <MX_USB_DEVICE_Init+0x54>)
 80071ea:	f7fe ffbf 	bl	800616c <USBD_Init>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071f4:	f7f9 fb2c 	bl	8000850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071f8:	490f      	ldr	r1, [pc, #60]	; (8007238 <MX_USB_DEVICE_Init+0x58>)
 80071fa:	480e      	ldr	r0, [pc, #56]	; (8007234 <MX_USB_DEVICE_Init+0x54>)
 80071fc:	f7fe ffe1 	bl	80061c2 <USBD_RegisterClass>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007206:	f7f9 fb23 	bl	8000850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800720a:	490c      	ldr	r1, [pc, #48]	; (800723c <MX_USB_DEVICE_Init+0x5c>)
 800720c:	4809      	ldr	r0, [pc, #36]	; (8007234 <MX_USB_DEVICE_Init+0x54>)
 800720e:	f7fe ff0f 	bl	8006030 <USBD_CDC_RegisterInterface>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007218:	f7f9 fb1a 	bl	8000850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <MX_USB_DEVICE_Init+0x54>)
 800721e:	f7fe ffea 	bl	80061f6 <USBD_Start>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007228:	f7f9 fb12 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800722c:	bf00      	nop
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000134 	.word	0x20000134
 8007234:	20000a94 	.word	0x20000a94
 8007238:	20000020 	.word	0x20000020
 800723c:	20000124 	.word	0x20000124

08007240 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007244:	2200      	movs	r2, #0
 8007246:	4905      	ldr	r1, [pc, #20]	; (800725c <CDC_Init_FS+0x1c>)
 8007248:	4805      	ldr	r0, [pc, #20]	; (8007260 <CDC_Init_FS+0x20>)
 800724a:	f7fe ff08 	bl	800605e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800724e:	4905      	ldr	r1, [pc, #20]	; (8007264 <CDC_Init_FS+0x24>)
 8007250:	4803      	ldr	r0, [pc, #12]	; (8007260 <CDC_Init_FS+0x20>)
 8007252:	f7fe ff1e 	bl	8006092 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007256:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20001118 	.word	0x20001118
 8007260:	20000a94 	.word	0x20000a94
 8007264:	20000d30 	.word	0x20000d30

08007268 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800726c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800726e:	4618      	mov	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	71fb      	strb	r3, [r7, #7]
 8007284:	4613      	mov	r3, r2
 8007286:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b23      	cmp	r3, #35	; 0x23
 800728c:	d84a      	bhi.n	8007324 <CDC_Control_FS+0xac>
 800728e:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <CDC_Control_FS+0x1c>)
 8007290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007294:	08007325 	.word	0x08007325
 8007298:	08007325 	.word	0x08007325
 800729c:	08007325 	.word	0x08007325
 80072a0:	08007325 	.word	0x08007325
 80072a4:	08007325 	.word	0x08007325
 80072a8:	08007325 	.word	0x08007325
 80072ac:	08007325 	.word	0x08007325
 80072b0:	08007325 	.word	0x08007325
 80072b4:	08007325 	.word	0x08007325
 80072b8:	08007325 	.word	0x08007325
 80072bc:	08007325 	.word	0x08007325
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007325 	.word	0x08007325
 80072c8:	08007325 	.word	0x08007325
 80072cc:	08007325 	.word	0x08007325
 80072d0:	08007325 	.word	0x08007325
 80072d4:	08007325 	.word	0x08007325
 80072d8:	08007325 	.word	0x08007325
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007325 	.word	0x08007325
 80072e8:	08007325 	.word	0x08007325
 80072ec:	08007325 	.word	0x08007325
 80072f0:	08007325 	.word	0x08007325
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007325 	.word	0x08007325
 80072fc:	08007325 	.word	0x08007325
 8007300:	08007325 	.word	0x08007325
 8007304:	08007325 	.word	0x08007325
 8007308:	08007325 	.word	0x08007325
 800730c:	08007325 	.word	0x08007325
 8007310:	08007325 	.word	0x08007325
 8007314:	08007325 	.word	0x08007325
 8007318:	08007325 	.word	0x08007325
 800731c:	08007325 	.word	0x08007325
 8007320:	08007325 	.word	0x08007325
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007324:	bf00      	nop
  }

  return (USBD_OK);
 8007326:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4815      	ldr	r0, [pc, #84]	; (8007398 <CDC_Receive_FS+0x64>)
 8007342:	f7fe fea6 	bl	8006092 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007346:	4814      	ldr	r0, [pc, #80]	; (8007398 <CDC_Receive_FS+0x64>)
 8007348:	f7fe fee6 	bl	8006118 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f827 	bl	80073a8 <CDC_Transmit_FS>

  for(int i=0; i < *Len; i++){
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	e00b      	b.n	8007378 <CDC_Receive_FS+0x44>
	  testing[i] =UserRxBufferFS[i];
 8007360:	4a0e      	ldr	r2, [pc, #56]	; (800739c <CDC_Receive_FS+0x68>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	7819      	ldrb	r1, [r3, #0]
 8007368:	4a0d      	ldr	r2, [pc, #52]	; (80073a0 <CDC_Receive_FS+0x6c>)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	460a      	mov	r2, r1
 8007370:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < *Len; i++){
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	429a      	cmp	r2, r3
 8007380:	d8ee      	bhi.n	8007360 <CDC_Receive_FS+0x2c>
  }
  Length = *Len;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <CDC_Receive_FS+0x70>)
 800738a:	601a      	str	r2, [r3, #0]

  return (USBD_OK);
 800738c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000a94 	.word	0x20000a94
 800739c:	20000d30 	.word	0x20000d30
 80073a0:	20000a04 	.word	0x20000a04
 80073a4:	20000a0c 	.word	0x20000a0c

080073a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <CDC_Transmit_FS+0x48>)
 80073ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e00b      	b.n	80073e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073ce:	887b      	ldrh	r3, [r7, #2]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4806      	ldr	r0, [pc, #24]	; (80073f0 <CDC_Transmit_FS+0x48>)
 80073d6:	f7fe fe42 	bl	800605e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073da:	4805      	ldr	r0, [pc, #20]	; (80073f0 <CDC_Transmit_FS+0x48>)
 80073dc:	f7fe fe6d 	bl	80060ba <USBD_CDC_TransmitPacket>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000a94 	.word	0x20000a94

080073f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	6039      	str	r1, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2212      	movs	r2, #18
 8007404:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007406:	4b03      	ldr	r3, [pc, #12]	; (8007414 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20000154 	.word	0x20000154

08007418 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	6039      	str	r1, [r7, #0]
 8007422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2204      	movs	r2, #4
 8007428:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800742a:	4b03      	ldr	r3, [pc, #12]	; (8007438 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000174 	.word	0x20000174

0800743c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	6039      	str	r1, [r7, #0]
 8007446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d105      	bne.n	800745a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	4907      	ldr	r1, [pc, #28]	; (8007470 <USBD_FS_ProductStrDescriptor+0x34>)
 8007452:	4808      	ldr	r0, [pc, #32]	; (8007474 <USBD_FS_ProductStrDescriptor+0x38>)
 8007454:	f7ff fde6 	bl	8007024 <USBD_GetString>
 8007458:	e004      	b.n	8007464 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4904      	ldr	r1, [pc, #16]	; (8007470 <USBD_FS_ProductStrDescriptor+0x34>)
 800745e:	4805      	ldr	r0, [pc, #20]	; (8007474 <USBD_FS_ProductStrDescriptor+0x38>)
 8007460:	f7ff fde0 	bl	8007024 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20001500 	.word	0x20001500
 8007474:	08008a38 	.word	0x08008a38

08007478 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	6039      	str	r1, [r7, #0]
 8007482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	4904      	ldr	r1, [pc, #16]	; (8007498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007488:	4804      	ldr	r0, [pc, #16]	; (800749c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800748a:	f7ff fdcb 	bl	8007024 <USBD_GetString>
  return USBD_StrDesc;
 800748e:	4b02      	ldr	r3, [pc, #8]	; (8007498 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20001500 	.word	0x20001500
 800749c:	08008a50 	.word	0x08008a50

080074a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	6039      	str	r1, [r7, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	221a      	movs	r2, #26
 80074b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074b2:	f000 f855 	bl	8007560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074b6:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000178 	.word	0x20000178

080074c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4907      	ldr	r1, [pc, #28]	; (80074f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074da:	4808      	ldr	r0, [pc, #32]	; (80074fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074dc:	f7ff fda2 	bl	8007024 <USBD_GetString>
 80074e0:	e004      	b.n	80074ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4904      	ldr	r1, [pc, #16]	; (80074f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80074e8:	f7ff fd9c 	bl	8007024 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20001500 	.word	0x20001500
 80074fc:	08008a64 	.word	0x08008a64

08007500 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	4907      	ldr	r1, [pc, #28]	; (8007534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007516:	4808      	ldr	r0, [pc, #32]	; (8007538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007518:	f7ff fd84 	bl	8007024 <USBD_GetString>
 800751c:	e004      	b.n	8007528 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4904      	ldr	r1, [pc, #16]	; (8007534 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007522:	4805      	ldr	r0, [pc, #20]	; (8007538 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007524:	f7ff fd7e 	bl	8007024 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20001500 	.word	0x20001500
 8007538:	08008a70 	.word	0x08008a70

0800753c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	220c      	movs	r2, #12
 800754c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800754e:	4b03      	ldr	r3, [pc, #12]	; (800755c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	20000168 	.word	0x20000168

08007560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <Get_SerialNum+0x44>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <Get_SerialNum+0x48>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007572:	4b0e      	ldr	r3, [pc, #56]	; (80075ac <Get_SerialNum+0x4c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007586:	2208      	movs	r2, #8
 8007588:	4909      	ldr	r1, [pc, #36]	; (80075b0 <Get_SerialNum+0x50>)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f814 	bl	80075b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007590:	2204      	movs	r2, #4
 8007592:	4908      	ldr	r1, [pc, #32]	; (80075b4 <Get_SerialNum+0x54>)
 8007594:	68b8      	ldr	r0, [r7, #8]
 8007596:	f000 f80f 	bl	80075b8 <IntToUnicode>
  }
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	1fff7590 	.word	0x1fff7590
 80075a8:	1fff7594 	.word	0x1fff7594
 80075ac:	1fff7598 	.word	0x1fff7598
 80075b0:	2000017a 	.word	0x2000017a
 80075b4:	2000018a 	.word	0x2000018a

080075b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]
 80075ce:	e027      	b.n	8007620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0f1b      	lsrs	r3, r3, #28
 80075d4:	2b09      	cmp	r3, #9
 80075d6:	d80b      	bhi.n	80075f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	0f1b      	lsrs	r3, r3, #28
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4619      	mov	r1, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	440b      	add	r3, r1
 80075e8:	3230      	adds	r2, #48	; 0x30
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	e00a      	b.n	8007606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	0f1b      	lsrs	r3, r3, #28
 80075f4:	b2da      	uxtb	r2, r3
 80075f6:	7dfb      	ldrb	r3, [r7, #23]
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	4619      	mov	r1, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	440b      	add	r3, r1
 8007600:	3237      	adds	r2, #55	; 0x37
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	3301      	adds	r3, #1
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4413      	add	r3, r2
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800761a:	7dfb      	ldrb	r3, [r7, #23]
 800761c:	3301      	adds	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
 8007620:	7dfa      	ldrb	r2, [r7, #23]
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3d3      	bcc.n	80075d0 <IntToUnicode+0x18>
  }
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0d      	ldr	r2, [pc, #52]	; (8007678 <HAL_PCD_MspInit+0x44>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d113      	bne.n	800766e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <HAL_PCD_MspInit+0x48>)
 8007648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764a:	4a0c      	ldr	r2, [pc, #48]	; (800767c <HAL_PCD_MspInit+0x48>)
 800764c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007650:	6593      	str	r3, [r2, #88]	; 0x58
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <HAL_PCD_MspInit+0x48>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	2043      	movs	r0, #67	; 0x43
 8007664:	f7f9 fe99 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007668:	2043      	movs	r0, #67	; 0x43
 800766a:	f7f9 feb2 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40006800 	.word	0x40006800
 800767c:	40021000 	.word	0x40021000

08007680 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe fdf6 	bl	8006288 <USBD_LL_SetupStage>
}
 800769c:	bf00      	nop
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80076b6:	78fb      	ldrb	r3, [r7, #3]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	015b      	lsls	r3, r3, #5
 80076bc:	4413      	add	r3, r2
 80076be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	4619      	mov	r1, r3
 80076c8:	f7fe fe29 	bl	800631e <USBD_LL_DataOutStage>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	015b      	lsls	r3, r3, #5
 80076ec:	4413      	add	r3, r2
 80076ee:	333c      	adds	r3, #60	; 0x3c
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	4619      	mov	r1, r3
 80076f6:	f7fe fe83 	bl	8006400 <USBD_LL_DataInStage>
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe ff91 	bl	8006638 <USBD_LL_SOF>
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007726:	2301      	movs	r3, #1
 8007728:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d001      	beq.n	8007736 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007732:	f7f9 f88d 	bl	8000850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	4611      	mov	r1, r2
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe ff43 	bl	80065cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fefc 	bl	800654a <USBD_LL_Reset>
}
 8007752:	bf00      	nop
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe ff3e 	bl	80065ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <HAL_PCD_SuspendCallback+0x30>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	4a03      	ldr	r2, [pc, #12]	; (800778c <HAL_PCD_SuspendCallback+0x30>)
 800777e:	f043 0306 	orr.w	r3, r3, #6
 8007782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	e000ed00 	.word	0xe000ed00

08007790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80077a0:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <HAL_PCD_ResumeCallback+0x34>)
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <HAL_PCD_ResumeCallback+0x34>)
 80077a6:	f023 0306 	bic.w	r3, r3, #6
 80077aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80077ac:	f000 fab2 	bl	8007d14 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe ff2d 	bl	8006616 <USBD_LL_Resume>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	e000ed00 	.word	0xe000ed00

080077c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80077d0:	f7fb fb5e 	bl	8002e90 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80077d4:	4a2b      	ldr	r2, [pc, #172]	; (8007884 <USBD_LL_Init+0xbc>)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a29      	ldr	r2, [pc, #164]	; (8007884 <USBD_LL_Init+0xbc>)
 80077e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80077e4:	4b27      	ldr	r3, [pc, #156]	; (8007884 <USBD_LL_Init+0xbc>)
 80077e6:	4a28      	ldr	r2, [pc, #160]	; (8007888 <USBD_LL_Init+0xc0>)
 80077e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80077ea:	4b26      	ldr	r3, [pc, #152]	; (8007884 <USBD_LL_Init+0xbc>)
 80077ec:	2208      	movs	r2, #8
 80077ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80077f0:	4b24      	ldr	r3, [pc, #144]	; (8007884 <USBD_LL_Init+0xbc>)
 80077f2:	2202      	movs	r2, #2
 80077f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80077f6:	4b23      	ldr	r3, [pc, #140]	; (8007884 <USBD_LL_Init+0xbc>)
 80077f8:	2202      	movs	r2, #2
 80077fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80077fc:	4b21      	ldr	r3, [pc, #132]	; (8007884 <USBD_LL_Init+0xbc>)
 80077fe:	2200      	movs	r2, #0
 8007800:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007802:	4b20      	ldr	r3, [pc, #128]	; (8007884 <USBD_LL_Init+0xbc>)
 8007804:	2200      	movs	r2, #0
 8007806:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <USBD_LL_Init+0xbc>)
 800780a:	2200      	movs	r2, #0
 800780c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800780e:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <USBD_LL_Init+0xbc>)
 8007810:	2200      	movs	r2, #0
 8007812:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007814:	481b      	ldr	r0, [pc, #108]	; (8007884 <USBD_LL_Init+0xbc>)
 8007816:	f7fa fb7c 	bl	8001f12 <HAL_PCD_Init>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007820:	f7f9 f816 	bl	8000850 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800782a:	2318      	movs	r3, #24
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	f7fb fa52 	bl	8002cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800783a:	2358      	movs	r3, #88	; 0x58
 800783c:	2200      	movs	r2, #0
 800783e:	2180      	movs	r1, #128	; 0x80
 8007840:	f7fb fa4a 	bl	8002cd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800784a:	23c0      	movs	r3, #192	; 0xc0
 800784c:	2200      	movs	r2, #0
 800784e:	2181      	movs	r1, #129	; 0x81
 8007850:	f7fb fa42 	bl	8002cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800785a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800785e:	2200      	movs	r2, #0
 8007860:	2101      	movs	r1, #1
 8007862:	f7fb fa39 	bl	8002cd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800786c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007870:	2200      	movs	r2, #0
 8007872:	2182      	movs	r1, #130	; 0x82
 8007874:	f7fb fa30 	bl	8002cd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20001700 	.word	0x20001700
 8007888:	40006800 	.word	0x40006800

0800788c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fa fc1d 	bl	80020e2 <HAL_PCD_Start>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d816      	bhi.n	80078e0 <USBD_LL_Start+0x54>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBD_LL_Start+0x2c>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078cf 	.word	0x080078cf
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	080078db 	.word	0x080078db
    case HAL_OK :
      usb_status = USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
    break;
 80078cc:	e00b      	b.n	80078e6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078ce:	2302      	movs	r3, #2
 80078d0:	73fb      	strb	r3, [r7, #15]
    break;
 80078d2:	e008      	b.n	80078e6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078d4:	2301      	movs	r3, #1
 80078d6:	73fb      	strb	r3, [r7, #15]
    break;
 80078d8:	e005      	b.n	80078e6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078da:	2302      	movs	r3, #2
 80078dc:	73fb      	strb	r3, [r7, #15]
    break;
 80078de:	e002      	b.n	80078e6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80078e0:	2302      	movs	r3, #2
 80078e2:	73fb      	strb	r3, [r7, #15]
    break;
 80078e4:	bf00      	nop
  }
  return usb_status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4603      	mov	r3, r0
 8007900:	70fb      	strb	r3, [r7, #3]
 8007902:	460b      	mov	r3, r1
 8007904:	70bb      	strb	r3, [r7, #2]
 8007906:	4613      	mov	r3, r2
 8007908:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007918:	78bb      	ldrb	r3, [r7, #2]
 800791a:	883a      	ldrh	r2, [r7, #0]
 800791c:	78f9      	ldrb	r1, [r7, #3]
 800791e:	f7fa fd80 	bl	8002422 <HAL_PCD_EP_Open>
 8007922:	4603      	mov	r3, r0
 8007924:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b03      	cmp	r3, #3
 800792a:	d817      	bhi.n	800795c <USBD_LL_OpenEP+0x6c>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <USBD_LL_OpenEP+0x44>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007945 	.word	0x08007945
 8007938:	0800794b 	.word	0x0800794b
 800793c:	08007951 	.word	0x08007951
 8007940:	08007957 	.word	0x08007957
    case HAL_OK :
      usb_status = USBD_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	e00b      	b.n	8007962 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800794a:	2302      	movs	r3, #2
 800794c:	73fb      	strb	r3, [r7, #15]
    break;
 800794e:	e008      	b.n	8007962 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
    break;
 8007954:	e005      	b.n	8007962 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007956:	2302      	movs	r3, #2
 8007958:	73fb      	strb	r3, [r7, #15]
    break;
 800795a:	e002      	b.n	8007962 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	73fb      	strb	r3, [r7, #15]
    break;
 8007960:	bf00      	nop
  }
  return usb_status;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	4611      	mov	r1, r2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fa fda9 	bl	80024e2 <HAL_PCD_EP_Close>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b03      	cmp	r3, #3
 8007998:	d816      	bhi.n	80079c8 <USBD_LL_CloseEP+0x5c>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <USBD_LL_CloseEP+0x34>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079b7 	.word	0x080079b7
 80079a8:	080079bd 	.word	0x080079bd
 80079ac:	080079c3 	.word	0x080079c3
    case HAL_OK :
      usb_status = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]
    break;
 80079b4:	e00b      	b.n	80079ce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079b6:	2302      	movs	r3, #2
 80079b8:	73fb      	strb	r3, [r7, #15]
    break;
 80079ba:	e008      	b.n	80079ce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079bc:	2301      	movs	r3, #1
 80079be:	73fb      	strb	r3, [r7, #15]
    break;
 80079c0:	e005      	b.n	80079ce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079c2:	2302      	movs	r3, #2
 80079c4:	73fb      	strb	r3, [r7, #15]
    break;
 80079c6:	e002      	b.n	80079ce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80079c8:	2302      	movs	r3, #2
 80079ca:	73fb      	strb	r3, [r7, #15]
    break;
 80079cc:	bf00      	nop
  }
  return usb_status;  
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fa fe3d 	bl	8002676 <HAL_PCD_EP_SetStall>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d816      	bhi.n	8007a34 <USBD_LL_StallEP+0x5c>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBD_LL_StallEP+0x34>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a23 	.word	0x08007a23
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a2f 	.word	0x08007a2f
    case HAL_OK :
      usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a20:	e00b      	b.n	8007a3a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a22:	2302      	movs	r3, #2
 8007a24:	73fb      	strb	r3, [r7, #15]
    break;
 8007a26:	e008      	b.n	8007a3a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a2c:	e005      	b.n	8007a3a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	73fb      	strb	r3, [r7, #15]
    break;
 8007a32:	e002      	b.n	8007a3a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	bf00      	nop
  }
  return usb_status;  
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fa fe61 	bl	800272a <HAL_PCD_EP_ClrStall>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d816      	bhi.n	8007aa0 <USBD_LL_ClearStallEP+0x5c>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USBD_LL_ClearStallEP+0x34>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007a8f 	.word	0x08007a8f
 8007a80:	08007a95 	.word	0x08007a95
 8007a84:	08007a9b 	.word	0x08007a9b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8c:	e00b      	b.n	8007aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	73fb      	strb	r3, [r7, #15]
    break;
 8007a92:	e008      	b.n	8007aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
    break;
 8007a98:	e005      	b.n	8007aa6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a9e:	e002      	b.n	8007aa6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	bf00      	nop
  }
  return usb_status; 
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007ac2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da08      	bge.n	8007ade <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	015b      	lsls	r3, r3, #5
 8007ad6:	4413      	add	r3, r2
 8007ad8:	332a      	adds	r3, #42	; 0x2a
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	e008      	b.n	8007af0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	015b      	lsls	r3, r3, #5
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007aee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fa fc5c 	bl	80023d8 <HAL_PCD_SetAddress>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d816      	bhi.n	8007b58 <USBD_LL_SetUSBAddress+0x5c>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <USBD_LL_SetUSBAddress+0x34>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b47 	.word	0x08007b47
 8007b38:	08007b4d 	.word	0x08007b4d
 8007b3c:	08007b53 	.word	0x08007b53
    case HAL_OK :
      usb_status = USBD_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
    break;
 8007b44:	e00b      	b.n	8007b5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b46:	2302      	movs	r3, #2
 8007b48:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4a:	e008      	b.n	8007b5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b50:	e005      	b.n	8007b5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]
    break;
 8007b56:	e002      	b.n	8007b5e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	bf00      	nop
  }
  return usb_status;  
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	607a      	str	r2, [r7, #4]
 8007b72:	461a      	mov	r2, r3
 8007b74:	460b      	mov	r3, r1
 8007b76:	72fb      	strb	r3, [r7, #11]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007b8a:	893b      	ldrh	r3, [r7, #8]
 8007b8c:	7af9      	ldrb	r1, [r7, #11]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	f7fa fd38 	bl	8002604 <HAL_PCD_EP_Transmit>
 8007b94:	4603      	mov	r3, r0
 8007b96:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007b98:	7dbb      	ldrb	r3, [r7, #22]
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d816      	bhi.n	8007bcc <USBD_LL_Transmit+0x64>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_LL_Transmit+0x3c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bb5 	.word	0x08007bb5
 8007ba8:	08007bbb 	.word	0x08007bbb
 8007bac:	08007bc1 	.word	0x08007bc1
 8007bb0:	08007bc7 	.word	0x08007bc7
    case HAL_OK :
      usb_status = USBD_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
    break;
 8007bb8:	e00b      	b.n	8007bd2 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	75fb      	strb	r3, [r7, #23]
    break;
 8007bbe:	e008      	b.n	8007bd2 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
    break;
 8007bc4:	e005      	b.n	8007bd2 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	75fb      	strb	r3, [r7, #23]
    break;
 8007bca:	e002      	b.n	8007bd2 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	75fb      	strb	r3, [r7, #23]
    break;
 8007bd0:	bf00      	nop
  }
  return usb_status;    
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	461a      	mov	r2, r3
 8007be8:	460b      	mov	r3, r1
 8007bea:	72fb      	strb	r3, [r7, #11]
 8007bec:	4613      	mov	r3, r2
 8007bee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007bfe:	893b      	ldrh	r3, [r7, #8]
 8007c00:	7af9      	ldrb	r1, [r7, #11]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	f7fa fcaf 	bl	8002566 <HAL_PCD_EP_Receive>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007c0c:	7dbb      	ldrb	r3, [r7, #22]
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d816      	bhi.n	8007c40 <USBD_LL_PrepareReceive+0x64>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBD_LL_PrepareReceive+0x3c>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c2f 	.word	0x08007c2f
 8007c20:	08007c35 	.word	0x08007c35
 8007c24:	08007c3b 	.word	0x08007c3b
    case HAL_OK :
      usb_status = USBD_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	75fb      	strb	r3, [r7, #23]
    break;
 8007c2c:	e00b      	b.n	8007c46 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c2e:	2302      	movs	r3, #2
 8007c30:	75fb      	strb	r3, [r7, #23]
    break;
 8007c32:	e008      	b.n	8007c46 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c34:	2301      	movs	r3, #1
 8007c36:	75fb      	strb	r3, [r7, #23]
    break;
 8007c38:	e005      	b.n	8007c46 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	75fb      	strb	r3, [r7, #23]
    break;
 8007c3e:	e002      	b.n	8007c46 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007c40:	2302      	movs	r3, #2
 8007c42:	75fb      	strb	r3, [r7, #23]
    break;
 8007c44:	bf00      	nop
  }
  return usb_status; 
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007c62:	78fa      	ldrb	r2, [r7, #3]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa fcb7 	bl	80025da <HAL_PCD_EP_GetRxCount>
 8007c6c:	4603      	mov	r3, r0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <HAL_PCDEx_LPM_Callback+0x18>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d013      	beq.n	8007cb6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8007c8e:	e023      	b.n	8007cd8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007c98:	f000 f83c 	bl	8007d14 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c9c:	4b10      	ldr	r3, [pc, #64]	; (8007ce0 <HAL_PCDEx_LPM_Callback+0x68>)
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	4a0f      	ldr	r2, [pc, #60]	; (8007ce0 <HAL_PCDEx_LPM_Callback+0x68>)
 8007ca2:	f023 0306 	bic.w	r3, r3, #6
 8007ca6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fcb1 	bl	8006616 <USBD_LL_Resume>
    break;
 8007cb4:	e010      	b.n	8007cd8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fc95 	bl	80065ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <HAL_PCDEx_LPM_Callback+0x68>)
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	4a04      	ldr	r2, [pc, #16]	; (8007ce0 <HAL_PCDEx_LPM_Callback+0x68>)
 8007cd0:	f043 0306 	orr.w	r3, r3, #6
 8007cd4:	6113      	str	r3, [r2, #16]
    break;   
 8007cd6:	bf00      	nop
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cec:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <USBD_static_malloc+0x18>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20000790 	.word	0x20000790

08007d00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007d18:	f7f8 fc4a 	bl	80005b0 <SystemClock_Config>
}
 8007d1c:	bf00      	nop
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <__errno>:
 8007d20:	4b01      	ldr	r3, [pc, #4]	; (8007d28 <__errno+0x8>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000194 	.word	0x20000194

08007d2c <__libc_init_array>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4e0d      	ldr	r6, [pc, #52]	; (8007d64 <__libc_init_array+0x38>)
 8007d30:	4c0d      	ldr	r4, [pc, #52]	; (8007d68 <__libc_init_array+0x3c>)
 8007d32:	1ba4      	subs	r4, r4, r6
 8007d34:	10a4      	asrs	r4, r4, #2
 8007d36:	2500      	movs	r5, #0
 8007d38:	42a5      	cmp	r5, r4
 8007d3a:	d109      	bne.n	8007d50 <__libc_init_array+0x24>
 8007d3c:	4e0b      	ldr	r6, [pc, #44]	; (8007d6c <__libc_init_array+0x40>)
 8007d3e:	4c0c      	ldr	r4, [pc, #48]	; (8007d70 <__libc_init_array+0x44>)
 8007d40:	f000 fe58 	bl	80089f4 <_init>
 8007d44:	1ba4      	subs	r4, r4, r6
 8007d46:	10a4      	asrs	r4, r4, #2
 8007d48:	2500      	movs	r5, #0
 8007d4a:	42a5      	cmp	r5, r4
 8007d4c:	d105      	bne.n	8007d5a <__libc_init_array+0x2e>
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d54:	4798      	blx	r3
 8007d56:	3501      	adds	r5, #1
 8007d58:	e7ee      	b.n	8007d38 <__libc_init_array+0xc>
 8007d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d5e:	4798      	blx	r3
 8007d60:	3501      	adds	r5, #1
 8007d62:	e7f2      	b.n	8007d4a <__libc_init_array+0x1e>
 8007d64:	080099c4 	.word	0x080099c4
 8007d68:	080099c4 	.word	0x080099c4
 8007d6c:	080099c4 	.word	0x080099c4
 8007d70:	080099c8 	.word	0x080099c8

08007d74 <memset>:
 8007d74:	4402      	add	r2, r0
 8007d76:	4603      	mov	r3, r0
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d100      	bne.n	8007d7e <memset+0xa>
 8007d7c:	4770      	bx	lr
 8007d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d82:	e7f9      	b.n	8007d78 <memset+0x4>

08007d84 <srand>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <srand+0x38>)
 8007d88:	681c      	ldr	r4, [r3, #0]
 8007d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	b97b      	cbnz	r3, 8007db0 <srand+0x2c>
 8007d90:	2018      	movs	r0, #24
 8007d92:	f000 f87b 	bl	8007e8c <malloc>
 8007d96:	4a0a      	ldr	r2, [pc, #40]	; (8007dc0 <srand+0x3c>)
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <srand+0x40>)
 8007d9a:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d9c:	e9c0 2300 	strd	r2, r3, [r0]
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <srand+0x44>)
 8007da2:	6083      	str	r3, [r0, #8]
 8007da4:	230b      	movs	r3, #11
 8007da6:	8183      	strh	r3, [r0, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	2300      	movs	r3, #0
 8007dac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007db2:	2200      	movs	r2, #0
 8007db4:	611d      	str	r5, [r3, #16]
 8007db6:	615a      	str	r2, [r3, #20]
 8007db8:	bd38      	pop	{r3, r4, r5, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000194 	.word	0x20000194
 8007dc0:	abcd330e 	.word	0xabcd330e
 8007dc4:	e66d1234 	.word	0xe66d1234
 8007dc8:	0005deec 	.word	0x0005deec

08007dcc <rand>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <rand+0x50>)
 8007dd0:	681c      	ldr	r4, [r3, #0]
 8007dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007dd4:	b97b      	cbnz	r3, 8007df6 <rand+0x2a>
 8007dd6:	2018      	movs	r0, #24
 8007dd8:	f000 f858 	bl	8007e8c <malloc>
 8007ddc:	4a10      	ldr	r2, [pc, #64]	; (8007e20 <rand+0x54>)
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <rand+0x58>)
 8007de0:	63a0      	str	r0, [r4, #56]	; 0x38
 8007de2:	e9c0 2300 	strd	r2, r3, [r0]
 8007de6:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <rand+0x5c>)
 8007de8:	6083      	str	r3, [r0, #8]
 8007dea:	230b      	movs	r3, #11
 8007dec:	8183      	strh	r3, [r0, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	2300      	movs	r3, #0
 8007df2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007df6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007df8:	480c      	ldr	r0, [pc, #48]	; (8007e2c <rand+0x60>)
 8007dfa:	690a      	ldr	r2, [r1, #16]
 8007dfc:	694b      	ldr	r3, [r1, #20]
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <rand+0x64>)
 8007e00:	4350      	muls	r0, r2
 8007e02:	fb04 0003 	mla	r0, r4, r3, r0
 8007e06:	fba2 2304 	umull	r2, r3, r2, r4
 8007e0a:	4403      	add	r3, r0
 8007e0c:	1c54      	adds	r4, r2, #1
 8007e0e:	f143 0500 	adc.w	r5, r3, #0
 8007e12:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007e16:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	20000194 	.word	0x20000194
 8007e20:	abcd330e 	.word	0xabcd330e
 8007e24:	e66d1234 	.word	0xe66d1234
 8007e28:	0005deec 	.word	0x0005deec
 8007e2c:	5851f42d 	.word	0x5851f42d
 8007e30:	4c957f2d 	.word	0x4c957f2d

08007e34 <siscanf>:
 8007e34:	b40e      	push	{r1, r2, r3}
 8007e36:	b530      	push	{r4, r5, lr}
 8007e38:	b09c      	sub	sp, #112	; 0x70
 8007e3a:	ac1f      	add	r4, sp, #124	; 0x7c
 8007e3c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007e40:	f854 5b04 	ldr.w	r5, [r4], #4
 8007e44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007e48:	9002      	str	r0, [sp, #8]
 8007e4a:	9006      	str	r0, [sp, #24]
 8007e4c:	f7f8 f9c0 	bl	80001d0 <strlen>
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <siscanf+0x4c>)
 8007e52:	9003      	str	r0, [sp, #12]
 8007e54:	9007      	str	r0, [sp, #28]
 8007e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e58:	480a      	ldr	r0, [pc, #40]	; (8007e84 <siscanf+0x50>)
 8007e5a:	9401      	str	r4, [sp, #4]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e60:	9314      	str	r3, [sp, #80]	; 0x50
 8007e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	4623      	mov	r3, r4
 8007e6e:	a902      	add	r1, sp, #8
 8007e70:	6800      	ldr	r0, [r0, #0]
 8007e72:	f000 f915 	bl	80080a0 <__ssvfiscanf_r>
 8007e76:	b01c      	add	sp, #112	; 0x70
 8007e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e7c:	b003      	add	sp, #12
 8007e7e:	4770      	bx	lr
 8007e80:	08007e89 	.word	0x08007e89
 8007e84:	20000194 	.word	0x20000194

08007e88 <__seofread>:
 8007e88:	2000      	movs	r0, #0
 8007e8a:	4770      	bx	lr

08007e8c <malloc>:
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <malloc+0xc>)
 8007e8e:	4601      	mov	r1, r0
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	f000 b851 	b.w	8007f38 <_malloc_r>
 8007e96:	bf00      	nop
 8007e98:	20000194 	.word	0x20000194

08007e9c <_free_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	d045      	beq.n	8007f30 <_free_r+0x94>
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f0c      	subs	r4, r1, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfb8      	it	lt
 8007eae:	18e4      	addlt	r4, r4, r3
 8007eb0:	f000 fd63 	bl	800897a <__malloc_lock>
 8007eb4:	4a1f      	ldr	r2, [pc, #124]	; (8007f34 <_free_r+0x98>)
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	4610      	mov	r0, r2
 8007eba:	b933      	cbnz	r3, 8007eca <_free_r+0x2e>
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6014      	str	r4, [r2, #0]
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ec6:	f000 bd59 	b.w	800897c <__malloc_unlock>
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d90c      	bls.n	8007ee8 <_free_r+0x4c>
 8007ece:	6821      	ldr	r1, [r4, #0]
 8007ed0:	1862      	adds	r2, r4, r1
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bf04      	itt	eq
 8007ed6:	681a      	ldreq	r2, [r3, #0]
 8007ed8:	685b      	ldreq	r3, [r3, #4]
 8007eda:	6063      	str	r3, [r4, #4]
 8007edc:	bf04      	itt	eq
 8007ede:	1852      	addeq	r2, r2, r1
 8007ee0:	6022      	streq	r2, [r4, #0]
 8007ee2:	6004      	str	r4, [r0, #0]
 8007ee4:	e7ec      	b.n	8007ec0 <_free_r+0x24>
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	b10a      	cbz	r2, 8007ef0 <_free_r+0x54>
 8007eec:	42a2      	cmp	r2, r4
 8007eee:	d9fa      	bls.n	8007ee6 <_free_r+0x4a>
 8007ef0:	6819      	ldr	r1, [r3, #0]
 8007ef2:	1858      	adds	r0, r3, r1
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d10b      	bne.n	8007f10 <_free_r+0x74>
 8007ef8:	6820      	ldr	r0, [r4, #0]
 8007efa:	4401      	add	r1, r0
 8007efc:	1858      	adds	r0, r3, r1
 8007efe:	4282      	cmp	r2, r0
 8007f00:	6019      	str	r1, [r3, #0]
 8007f02:	d1dd      	bne.n	8007ec0 <_free_r+0x24>
 8007f04:	6810      	ldr	r0, [r2, #0]
 8007f06:	6852      	ldr	r2, [r2, #4]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	4401      	add	r1, r0
 8007f0c:	6019      	str	r1, [r3, #0]
 8007f0e:	e7d7      	b.n	8007ec0 <_free_r+0x24>
 8007f10:	d902      	bls.n	8007f18 <_free_r+0x7c>
 8007f12:	230c      	movs	r3, #12
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	e7d3      	b.n	8007ec0 <_free_r+0x24>
 8007f18:	6820      	ldr	r0, [r4, #0]
 8007f1a:	1821      	adds	r1, r4, r0
 8007f1c:	428a      	cmp	r2, r1
 8007f1e:	bf04      	itt	eq
 8007f20:	6811      	ldreq	r1, [r2, #0]
 8007f22:	6852      	ldreq	r2, [r2, #4]
 8007f24:	6062      	str	r2, [r4, #4]
 8007f26:	bf04      	itt	eq
 8007f28:	1809      	addeq	r1, r1, r0
 8007f2a:	6021      	streq	r1, [r4, #0]
 8007f2c:	605c      	str	r4, [r3, #4]
 8007f2e:	e7c7      	b.n	8007ec0 <_free_r+0x24>
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	200009b0 	.word	0x200009b0

08007f38 <_malloc_r>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	1ccd      	adds	r5, r1, #3
 8007f3c:	f025 0503 	bic.w	r5, r5, #3
 8007f40:	3508      	adds	r5, #8
 8007f42:	2d0c      	cmp	r5, #12
 8007f44:	bf38      	it	cc
 8007f46:	250c      	movcc	r5, #12
 8007f48:	2d00      	cmp	r5, #0
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	db01      	blt.n	8007f52 <_malloc_r+0x1a>
 8007f4e:	42a9      	cmp	r1, r5
 8007f50:	d903      	bls.n	8007f5a <_malloc_r+0x22>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	2000      	movs	r0, #0
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	f000 fd0e 	bl	800897a <__malloc_lock>
 8007f5e:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <_malloc_r+0xac>)
 8007f60:	6814      	ldr	r4, [r2, #0]
 8007f62:	4621      	mov	r1, r4
 8007f64:	b991      	cbnz	r1, 8007f8c <_malloc_r+0x54>
 8007f66:	4c20      	ldr	r4, [pc, #128]	; (8007fe8 <_malloc_r+0xb0>)
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	b91b      	cbnz	r3, 8007f74 <_malloc_r+0x3c>
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 fb3f 	bl	80085f0 <_sbrk_r>
 8007f72:	6020      	str	r0, [r4, #0]
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 fb3a 	bl	80085f0 <_sbrk_r>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	d124      	bne.n	8007fca <_malloc_r+0x92>
 8007f80:	230c      	movs	r3, #12
 8007f82:	6033      	str	r3, [r6, #0]
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 fcf9 	bl	800897c <__malloc_unlock>
 8007f8a:	e7e4      	b.n	8007f56 <_malloc_r+0x1e>
 8007f8c:	680b      	ldr	r3, [r1, #0]
 8007f8e:	1b5b      	subs	r3, r3, r5
 8007f90:	d418      	bmi.n	8007fc4 <_malloc_r+0x8c>
 8007f92:	2b0b      	cmp	r3, #11
 8007f94:	d90f      	bls.n	8007fb6 <_malloc_r+0x7e>
 8007f96:	600b      	str	r3, [r1, #0]
 8007f98:	50cd      	str	r5, [r1, r3]
 8007f9a:	18cc      	adds	r4, r1, r3
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f000 fced 	bl	800897c <__malloc_unlock>
 8007fa2:	f104 000b 	add.w	r0, r4, #11
 8007fa6:	1d23      	adds	r3, r4, #4
 8007fa8:	f020 0007 	bic.w	r0, r0, #7
 8007fac:	1ac3      	subs	r3, r0, r3
 8007fae:	d0d3      	beq.n	8007f58 <_malloc_r+0x20>
 8007fb0:	425a      	negs	r2, r3
 8007fb2:	50e2      	str	r2, [r4, r3]
 8007fb4:	e7d0      	b.n	8007f58 <_malloc_r+0x20>
 8007fb6:	428c      	cmp	r4, r1
 8007fb8:	684b      	ldr	r3, [r1, #4]
 8007fba:	bf16      	itet	ne
 8007fbc:	6063      	strne	r3, [r4, #4]
 8007fbe:	6013      	streq	r3, [r2, #0]
 8007fc0:	460c      	movne	r4, r1
 8007fc2:	e7eb      	b.n	8007f9c <_malloc_r+0x64>
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	6849      	ldr	r1, [r1, #4]
 8007fc8:	e7cc      	b.n	8007f64 <_malloc_r+0x2c>
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d005      	beq.n	8007fe0 <_malloc_r+0xa8>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 fb0a 	bl	80085f0 <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d0cf      	beq.n	8007f80 <_malloc_r+0x48>
 8007fe0:	6025      	str	r5, [r4, #0]
 8007fe2:	e7db      	b.n	8007f9c <_malloc_r+0x64>
 8007fe4:	200009b0 	.word	0x200009b0
 8007fe8:	200009b4 	.word	0x200009b4

08007fec <_sungetc_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	1c4b      	adds	r3, r1, #1
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	d103      	bne.n	8007ffc <_sungetc_r+0x10>
 8007ff4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	8993      	ldrh	r3, [r2, #12]
 8007ffe:	f023 0320 	bic.w	r3, r3, #32
 8008002:	8193      	strh	r3, [r2, #12]
 8008004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008006:	6852      	ldr	r2, [r2, #4]
 8008008:	b2cd      	uxtb	r5, r1
 800800a:	b18b      	cbz	r3, 8008030 <_sungetc_r+0x44>
 800800c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800800e:	4293      	cmp	r3, r2
 8008010:	dd08      	ble.n	8008024 <_sungetc_r+0x38>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	6022      	str	r2, [r4, #0]
 8008018:	f803 5c01 	strb.w	r5, [r3, #-1]
 800801c:	6863      	ldr	r3, [r4, #4]
 800801e:	3301      	adds	r3, #1
 8008020:	6063      	str	r3, [r4, #4]
 8008022:	e7e9      	b.n	8007ff8 <_sungetc_r+0xc>
 8008024:	4621      	mov	r1, r4
 8008026:	f000 fc3f 	bl	80088a8 <__submore>
 800802a:	2800      	cmp	r0, #0
 800802c:	d0f1      	beq.n	8008012 <_sungetc_r+0x26>
 800802e:	e7e1      	b.n	8007ff4 <_sungetc_r+0x8>
 8008030:	6921      	ldr	r1, [r4, #16]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	b151      	cbz	r1, 800804c <_sungetc_r+0x60>
 8008036:	4299      	cmp	r1, r3
 8008038:	d208      	bcs.n	800804c <_sungetc_r+0x60>
 800803a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800803e:	42a9      	cmp	r1, r5
 8008040:	d104      	bne.n	800804c <_sungetc_r+0x60>
 8008042:	3b01      	subs	r3, #1
 8008044:	3201      	adds	r2, #1
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	6062      	str	r2, [r4, #4]
 800804a:	e7d5      	b.n	8007ff8 <_sungetc_r+0xc>
 800804c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008054:	6363      	str	r3, [r4, #52]	; 0x34
 8008056:	2303      	movs	r3, #3
 8008058:	63a3      	str	r3, [r4, #56]	; 0x38
 800805a:	4623      	mov	r3, r4
 800805c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	2301      	movs	r3, #1
 8008064:	e7dc      	b.n	8008020 <_sungetc_r+0x34>

08008066 <__ssrefill_r>:
 8008066:	b510      	push	{r4, lr}
 8008068:	460c      	mov	r4, r1
 800806a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800806c:	b169      	cbz	r1, 800808a <__ssrefill_r+0x24>
 800806e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008072:	4299      	cmp	r1, r3
 8008074:	d001      	beq.n	800807a <__ssrefill_r+0x14>
 8008076:	f7ff ff11 	bl	8007e9c <_free_r>
 800807a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800807c:	6063      	str	r3, [r4, #4]
 800807e:	2000      	movs	r0, #0
 8008080:	6360      	str	r0, [r4, #52]	; 0x34
 8008082:	b113      	cbz	r3, 800808a <__ssrefill_r+0x24>
 8008084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	bd10      	pop	{r4, pc}
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2300      	movs	r3, #0
 8008090:	6063      	str	r3, [r4, #4]
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f043 0320 	orr.w	r3, r3, #32
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	f04f 30ff 	mov.w	r0, #4294967295
 800809e:	e7f3      	b.n	8008088 <__ssrefill_r+0x22>

080080a0 <__ssvfiscanf_r>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80080a8:	460c      	mov	r4, r1
 80080aa:	2100      	movs	r1, #0
 80080ac:	9144      	str	r1, [sp, #272]	; 0x110
 80080ae:	9145      	str	r1, [sp, #276]	; 0x114
 80080b0:	499f      	ldr	r1, [pc, #636]	; (8008330 <__ssvfiscanf_r+0x290>)
 80080b2:	91a0      	str	r1, [sp, #640]	; 0x280
 80080b4:	f10d 0804 	add.w	r8, sp, #4
 80080b8:	499e      	ldr	r1, [pc, #632]	; (8008334 <__ssvfiscanf_r+0x294>)
 80080ba:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008338 <__ssvfiscanf_r+0x298>
 80080be:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80080c2:	4606      	mov	r6, r0
 80080c4:	4692      	mov	sl, r2
 80080c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	270a      	movs	r7, #10
 80080cc:	f89a 3000 	ldrb.w	r3, [sl]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 812a 	beq.w	800832a <__ssvfiscanf_r+0x28a>
 80080d6:	4655      	mov	r5, sl
 80080d8:	f000 fc24 	bl	8008924 <__locale_ctype_ptr>
 80080dc:	f815 bb01 	ldrb.w	fp, [r5], #1
 80080e0:	4458      	add	r0, fp
 80080e2:	7843      	ldrb	r3, [r0, #1]
 80080e4:	f013 0308 	ands.w	r3, r3, #8
 80080e8:	d01c      	beq.n	8008124 <__ssvfiscanf_r+0x84>
 80080ea:	6863      	ldr	r3, [r4, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd12      	ble.n	8008116 <__ssvfiscanf_r+0x76>
 80080f0:	f000 fc18 	bl	8008924 <__locale_ctype_ptr>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	4410      	add	r0, r2
 80080fa:	7842      	ldrb	r2, [r0, #1]
 80080fc:	0712      	lsls	r2, r2, #28
 80080fe:	d401      	bmi.n	8008104 <__ssvfiscanf_r+0x64>
 8008100:	46aa      	mov	sl, r5
 8008102:	e7e3      	b.n	80080cc <__ssvfiscanf_r+0x2c>
 8008104:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008106:	3201      	adds	r2, #1
 8008108:	9245      	str	r2, [sp, #276]	; 0x114
 800810a:	6862      	ldr	r2, [r4, #4]
 800810c:	3301      	adds	r3, #1
 800810e:	3a01      	subs	r2, #1
 8008110:	6062      	str	r2, [r4, #4]
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	e7e9      	b.n	80080ea <__ssvfiscanf_r+0x4a>
 8008116:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008118:	4621      	mov	r1, r4
 800811a:	4630      	mov	r0, r6
 800811c:	4798      	blx	r3
 800811e:	2800      	cmp	r0, #0
 8008120:	d0e6      	beq.n	80080f0 <__ssvfiscanf_r+0x50>
 8008122:	e7ed      	b.n	8008100 <__ssvfiscanf_r+0x60>
 8008124:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008128:	f040 8082 	bne.w	8008230 <__ssvfiscanf_r+0x190>
 800812c:	9343      	str	r3, [sp, #268]	; 0x10c
 800812e:	9341      	str	r3, [sp, #260]	; 0x104
 8008130:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008134:	2b2a      	cmp	r3, #42	; 0x2a
 8008136:	d103      	bne.n	8008140 <__ssvfiscanf_r+0xa0>
 8008138:	2310      	movs	r3, #16
 800813a:	9341      	str	r3, [sp, #260]	; 0x104
 800813c:	f10a 0502 	add.w	r5, sl, #2
 8008140:	46aa      	mov	sl, r5
 8008142:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008146:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800814a:	2a09      	cmp	r2, #9
 800814c:	d922      	bls.n	8008194 <__ssvfiscanf_r+0xf4>
 800814e:	2203      	movs	r2, #3
 8008150:	4879      	ldr	r0, [pc, #484]	; (8008338 <__ssvfiscanf_r+0x298>)
 8008152:	f7f8 f845 	bl	80001e0 <memchr>
 8008156:	b138      	cbz	r0, 8008168 <__ssvfiscanf_r+0xc8>
 8008158:	eba0 0309 	sub.w	r3, r0, r9
 800815c:	2001      	movs	r0, #1
 800815e:	4098      	lsls	r0, r3
 8008160:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008162:	4318      	orrs	r0, r3
 8008164:	9041      	str	r0, [sp, #260]	; 0x104
 8008166:	46aa      	mov	sl, r5
 8008168:	f89a 3000 	ldrb.w	r3, [sl]
 800816c:	2b67      	cmp	r3, #103	; 0x67
 800816e:	f10a 0501 	add.w	r5, sl, #1
 8008172:	d82b      	bhi.n	80081cc <__ssvfiscanf_r+0x12c>
 8008174:	2b65      	cmp	r3, #101	; 0x65
 8008176:	f080 809f 	bcs.w	80082b8 <__ssvfiscanf_r+0x218>
 800817a:	2b47      	cmp	r3, #71	; 0x47
 800817c:	d810      	bhi.n	80081a0 <__ssvfiscanf_r+0x100>
 800817e:	2b45      	cmp	r3, #69	; 0x45
 8008180:	f080 809a 	bcs.w	80082b8 <__ssvfiscanf_r+0x218>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d06c      	beq.n	8008262 <__ssvfiscanf_r+0x1c2>
 8008188:	2b25      	cmp	r3, #37	; 0x25
 800818a:	d051      	beq.n	8008230 <__ssvfiscanf_r+0x190>
 800818c:	2303      	movs	r3, #3
 800818e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008190:	9742      	str	r7, [sp, #264]	; 0x108
 8008192:	e027      	b.n	80081e4 <__ssvfiscanf_r+0x144>
 8008194:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008196:	fb07 1303 	mla	r3, r7, r3, r1
 800819a:	3b30      	subs	r3, #48	; 0x30
 800819c:	9343      	str	r3, [sp, #268]	; 0x10c
 800819e:	e7cf      	b.n	8008140 <__ssvfiscanf_r+0xa0>
 80081a0:	2b5b      	cmp	r3, #91	; 0x5b
 80081a2:	d06a      	beq.n	800827a <__ssvfiscanf_r+0x1da>
 80081a4:	d80c      	bhi.n	80081c0 <__ssvfiscanf_r+0x120>
 80081a6:	2b58      	cmp	r3, #88	; 0x58
 80081a8:	d1f0      	bne.n	800818c <__ssvfiscanf_r+0xec>
 80081aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b0:	9241      	str	r2, [sp, #260]	; 0x104
 80081b2:	2210      	movs	r2, #16
 80081b4:	9242      	str	r2, [sp, #264]	; 0x108
 80081b6:	2b6e      	cmp	r3, #110	; 0x6e
 80081b8:	bf8c      	ite	hi
 80081ba:	2304      	movhi	r3, #4
 80081bc:	2303      	movls	r3, #3
 80081be:	e010      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 80081c0:	2b63      	cmp	r3, #99	; 0x63
 80081c2:	d065      	beq.n	8008290 <__ssvfiscanf_r+0x1f0>
 80081c4:	2b64      	cmp	r3, #100	; 0x64
 80081c6:	d1e1      	bne.n	800818c <__ssvfiscanf_r+0xec>
 80081c8:	9742      	str	r7, [sp, #264]	; 0x108
 80081ca:	e7f4      	b.n	80081b6 <__ssvfiscanf_r+0x116>
 80081cc:	2b70      	cmp	r3, #112	; 0x70
 80081ce:	d04b      	beq.n	8008268 <__ssvfiscanf_r+0x1c8>
 80081d0:	d826      	bhi.n	8008220 <__ssvfiscanf_r+0x180>
 80081d2:	2b6e      	cmp	r3, #110	; 0x6e
 80081d4:	d062      	beq.n	800829c <__ssvfiscanf_r+0x1fc>
 80081d6:	d84c      	bhi.n	8008272 <__ssvfiscanf_r+0x1d2>
 80081d8:	2b69      	cmp	r3, #105	; 0x69
 80081da:	d1d7      	bne.n	800818c <__ssvfiscanf_r+0xec>
 80081dc:	2300      	movs	r3, #0
 80081de:	9342      	str	r3, [sp, #264]	; 0x108
 80081e0:	2303      	movs	r3, #3
 80081e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dd68      	ble.n	80082bc <__ssvfiscanf_r+0x21c>
 80081ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80081ec:	0659      	lsls	r1, r3, #25
 80081ee:	d407      	bmi.n	8008200 <__ssvfiscanf_r+0x160>
 80081f0:	f000 fb98 	bl	8008924 <__locale_ctype_ptr>
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	781a      	ldrb	r2, [r3, #0]
 80081f8:	4410      	add	r0, r2
 80081fa:	7842      	ldrb	r2, [r0, #1]
 80081fc:	0712      	lsls	r2, r2, #28
 80081fe:	d464      	bmi.n	80082ca <__ssvfiscanf_r+0x22a>
 8008200:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008202:	2b02      	cmp	r3, #2
 8008204:	dc73      	bgt.n	80082ee <__ssvfiscanf_r+0x24e>
 8008206:	466b      	mov	r3, sp
 8008208:	4622      	mov	r2, r4
 800820a:	a941      	add	r1, sp, #260	; 0x104
 800820c:	4630      	mov	r0, r6
 800820e:	f000 f897 	bl	8008340 <_scanf_chars>
 8008212:	2801      	cmp	r0, #1
 8008214:	f000 8089 	beq.w	800832a <__ssvfiscanf_r+0x28a>
 8008218:	2802      	cmp	r0, #2
 800821a:	f47f af71 	bne.w	8008100 <__ssvfiscanf_r+0x60>
 800821e:	e01d      	b.n	800825c <__ssvfiscanf_r+0x1bc>
 8008220:	2b75      	cmp	r3, #117	; 0x75
 8008222:	d0d1      	beq.n	80081c8 <__ssvfiscanf_r+0x128>
 8008224:	2b78      	cmp	r3, #120	; 0x78
 8008226:	d0c0      	beq.n	80081aa <__ssvfiscanf_r+0x10a>
 8008228:	2b73      	cmp	r3, #115	; 0x73
 800822a:	d1af      	bne.n	800818c <__ssvfiscanf_r+0xec>
 800822c:	2302      	movs	r3, #2
 800822e:	e7d8      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	dd0c      	ble.n	8008250 <__ssvfiscanf_r+0x1b0>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	781a      	ldrb	r2, [r3, #0]
 800823a:	455a      	cmp	r2, fp
 800823c:	d175      	bne.n	800832a <__ssvfiscanf_r+0x28a>
 800823e:	3301      	adds	r3, #1
 8008240:	6862      	ldr	r2, [r4, #4]
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008246:	3a01      	subs	r2, #1
 8008248:	3301      	adds	r3, #1
 800824a:	6062      	str	r2, [r4, #4]
 800824c:	9345      	str	r3, [sp, #276]	; 0x114
 800824e:	e757      	b.n	8008100 <__ssvfiscanf_r+0x60>
 8008250:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008252:	4621      	mov	r1, r4
 8008254:	4630      	mov	r0, r6
 8008256:	4798      	blx	r3
 8008258:	2800      	cmp	r0, #0
 800825a:	d0ec      	beq.n	8008236 <__ssvfiscanf_r+0x196>
 800825c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800825e:	2800      	cmp	r0, #0
 8008260:	d159      	bne.n	8008316 <__ssvfiscanf_r+0x276>
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	e05c      	b.n	8008322 <__ssvfiscanf_r+0x282>
 8008268:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800826a:	f042 0220 	orr.w	r2, r2, #32
 800826e:	9241      	str	r2, [sp, #260]	; 0x104
 8008270:	e79b      	b.n	80081aa <__ssvfiscanf_r+0x10a>
 8008272:	2308      	movs	r3, #8
 8008274:	9342      	str	r3, [sp, #264]	; 0x108
 8008276:	2304      	movs	r3, #4
 8008278:	e7b3      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 800827a:	4629      	mov	r1, r5
 800827c:	4640      	mov	r0, r8
 800827e:	f000 f9c7 	bl	8008610 <__sccl>
 8008282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008288:	9341      	str	r3, [sp, #260]	; 0x104
 800828a:	4605      	mov	r5, r0
 800828c:	2301      	movs	r3, #1
 800828e:	e7a8      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 8008290:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008296:	9341      	str	r3, [sp, #260]	; 0x104
 8008298:	2300      	movs	r3, #0
 800829a:	e7a2      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 800829c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800829e:	06c3      	lsls	r3, r0, #27
 80082a0:	f53f af2e 	bmi.w	8008100 <__ssvfiscanf_r+0x60>
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80082a8:	1d19      	adds	r1, r3, #4
 80082aa:	9100      	str	r1, [sp, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	07c0      	lsls	r0, r0, #31
 80082b0:	bf4c      	ite	mi
 80082b2:	801a      	strhmi	r2, [r3, #0]
 80082b4:	601a      	strpl	r2, [r3, #0]
 80082b6:	e723      	b.n	8008100 <__ssvfiscanf_r+0x60>
 80082b8:	2305      	movs	r3, #5
 80082ba:	e792      	b.n	80081e2 <__ssvfiscanf_r+0x142>
 80082bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082be:	4621      	mov	r1, r4
 80082c0:	4630      	mov	r0, r6
 80082c2:	4798      	blx	r3
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d090      	beq.n	80081ea <__ssvfiscanf_r+0x14a>
 80082c8:	e7c8      	b.n	800825c <__ssvfiscanf_r+0x1bc>
 80082ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80082cc:	3201      	adds	r2, #1
 80082ce:	9245      	str	r2, [sp, #276]	; 0x114
 80082d0:	6862      	ldr	r2, [r4, #4]
 80082d2:	3a01      	subs	r2, #1
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	6062      	str	r2, [r4, #4]
 80082d8:	dd02      	ble.n	80082e0 <__ssvfiscanf_r+0x240>
 80082da:	3301      	adds	r3, #1
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	e787      	b.n	80081f0 <__ssvfiscanf_r+0x150>
 80082e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082e2:	4621      	mov	r1, r4
 80082e4:	4630      	mov	r0, r6
 80082e6:	4798      	blx	r3
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d081      	beq.n	80081f0 <__ssvfiscanf_r+0x150>
 80082ec:	e7b6      	b.n	800825c <__ssvfiscanf_r+0x1bc>
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	dc06      	bgt.n	8008300 <__ssvfiscanf_r+0x260>
 80082f2:	466b      	mov	r3, sp
 80082f4:	4622      	mov	r2, r4
 80082f6:	a941      	add	r1, sp, #260	; 0x104
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f885 	bl	8008408 <_scanf_i>
 80082fe:	e788      	b.n	8008212 <__ssvfiscanf_r+0x172>
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <__ssvfiscanf_r+0x29c>)
 8008302:	2b00      	cmp	r3, #0
 8008304:	f43f aefc 	beq.w	8008100 <__ssvfiscanf_r+0x60>
 8008308:	466b      	mov	r3, sp
 800830a:	4622      	mov	r2, r4
 800830c:	a941      	add	r1, sp, #260	; 0x104
 800830e:	4630      	mov	r0, r6
 8008310:	f3af 8000 	nop.w
 8008314:	e77d      	b.n	8008212 <__ssvfiscanf_r+0x172>
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f013 0f40 	tst.w	r3, #64	; 0x40
 800831c:	bf18      	it	ne
 800831e:	f04f 30ff 	movne.w	r0, #4294967295
 8008322:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800832c:	e7f9      	b.n	8008322 <__ssvfiscanf_r+0x282>
 800832e:	bf00      	nop
 8008330:	08007fed 	.word	0x08007fed
 8008334:	08008067 	.word	0x08008067
 8008338:	08009830 	.word	0x08009830
 800833c:	00000000 	.word	0x00000000

08008340 <_scanf_chars>:
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	4615      	mov	r5, r2
 8008346:	688a      	ldr	r2, [r1, #8]
 8008348:	4680      	mov	r8, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b932      	cbnz	r2, 800835c <_scanf_chars+0x1c>
 800834e:	698a      	ldr	r2, [r1, #24]
 8008350:	2a00      	cmp	r2, #0
 8008352:	bf14      	ite	ne
 8008354:	f04f 32ff 	movne.w	r2, #4294967295
 8008358:	2201      	moveq	r2, #1
 800835a:	608a      	str	r2, [r1, #8]
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	06d1      	lsls	r1, r2, #27
 8008360:	bf5f      	itttt	pl
 8008362:	681a      	ldrpl	r2, [r3, #0]
 8008364:	1d11      	addpl	r1, r2, #4
 8008366:	6019      	strpl	r1, [r3, #0]
 8008368:	6817      	ldrpl	r7, [r2, #0]
 800836a:	2600      	movs	r6, #0
 800836c:	69a3      	ldr	r3, [r4, #24]
 800836e:	b1db      	cbz	r3, 80083a8 <_scanf_chars+0x68>
 8008370:	2b01      	cmp	r3, #1
 8008372:	d107      	bne.n	8008384 <_scanf_chars+0x44>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	6962      	ldr	r2, [r4, #20]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	5cd3      	ldrb	r3, [r2, r3]
 800837c:	b9a3      	cbnz	r3, 80083a8 <_scanf_chars+0x68>
 800837e:	2e00      	cmp	r6, #0
 8008380:	d132      	bne.n	80083e8 <_scanf_chars+0xa8>
 8008382:	e006      	b.n	8008392 <_scanf_chars+0x52>
 8008384:	2b02      	cmp	r3, #2
 8008386:	d007      	beq.n	8008398 <_scanf_chars+0x58>
 8008388:	2e00      	cmp	r6, #0
 800838a:	d12d      	bne.n	80083e8 <_scanf_chars+0xa8>
 800838c:	69a3      	ldr	r3, [r4, #24]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d12a      	bne.n	80083e8 <_scanf_chars+0xa8>
 8008392:	2001      	movs	r0, #1
 8008394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008398:	f000 fac4 	bl	8008924 <__locale_ctype_ptr>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	4418      	add	r0, r3
 80083a2:	7843      	ldrb	r3, [r0, #1]
 80083a4:	071b      	lsls	r3, r3, #28
 80083a6:	d4ef      	bmi.n	8008388 <_scanf_chars+0x48>
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	06da      	lsls	r2, r3, #27
 80083ac:	bf5e      	ittt	pl
 80083ae:	682b      	ldrpl	r3, [r5, #0]
 80083b0:	781b      	ldrbpl	r3, [r3, #0]
 80083b2:	703b      	strbpl	r3, [r7, #0]
 80083b4:	682a      	ldr	r2, [r5, #0]
 80083b6:	686b      	ldr	r3, [r5, #4]
 80083b8:	f102 0201 	add.w	r2, r2, #1
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	68a2      	ldr	r2, [r4, #8]
 80083c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80083c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80083c8:	606b      	str	r3, [r5, #4]
 80083ca:	f106 0601 	add.w	r6, r6, #1
 80083ce:	bf58      	it	pl
 80083d0:	3701      	addpl	r7, #1
 80083d2:	60a2      	str	r2, [r4, #8]
 80083d4:	b142      	cbz	r2, 80083e8 <_scanf_chars+0xa8>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dcc8      	bgt.n	800836c <_scanf_chars+0x2c>
 80083da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083de:	4629      	mov	r1, r5
 80083e0:	4640      	mov	r0, r8
 80083e2:	4798      	blx	r3
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0c1      	beq.n	800836c <_scanf_chars+0x2c>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	f013 0310 	ands.w	r3, r3, #16
 80083ee:	d105      	bne.n	80083fc <_scanf_chars+0xbc>
 80083f0:	68e2      	ldr	r2, [r4, #12]
 80083f2:	3201      	adds	r2, #1
 80083f4:	60e2      	str	r2, [r4, #12]
 80083f6:	69a2      	ldr	r2, [r4, #24]
 80083f8:	b102      	cbz	r2, 80083fc <_scanf_chars+0xbc>
 80083fa:	703b      	strb	r3, [r7, #0]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	441e      	add	r6, r3
 8008400:	6126      	str	r6, [r4, #16]
 8008402:	2000      	movs	r0, #0
 8008404:	e7c6      	b.n	8008394 <_scanf_chars+0x54>
	...

08008408 <_scanf_i>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	469a      	mov	sl, r3
 800840e:	4b74      	ldr	r3, [pc, #464]	; (80085e0 <_scanf_i+0x1d8>)
 8008410:	460c      	mov	r4, r1
 8008412:	4683      	mov	fp, r0
 8008414:	4616      	mov	r6, r2
 8008416:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800841a:	b087      	sub	sp, #28
 800841c:	ab03      	add	r3, sp, #12
 800841e:	68a7      	ldr	r7, [r4, #8]
 8008420:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008424:	4b6f      	ldr	r3, [pc, #444]	; (80085e4 <_scanf_i+0x1dc>)
 8008426:	69a1      	ldr	r1, [r4, #24]
 8008428:	4a6f      	ldr	r2, [pc, #444]	; (80085e8 <_scanf_i+0x1e0>)
 800842a:	2903      	cmp	r1, #3
 800842c:	bf08      	it	eq
 800842e:	461a      	moveq	r2, r3
 8008430:	1e7b      	subs	r3, r7, #1
 8008432:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008436:	bf84      	itt	hi
 8008438:	f240 135d 	movwhi	r3, #349	; 0x15d
 800843c:	60a3      	strhi	r3, [r4, #8]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	9200      	str	r2, [sp, #0]
 8008442:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008446:	bf88      	it	hi
 8008448:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800844c:	f104 091c 	add.w	r9, r4, #28
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bf8c      	ite	hi
 8008454:	197f      	addhi	r7, r7, r5
 8008456:	2700      	movls	r7, #0
 8008458:	464b      	mov	r3, r9
 800845a:	f04f 0800 	mov.w	r8, #0
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	6831      	ldr	r1, [r6, #0]
 8008462:	ab03      	add	r3, sp, #12
 8008464:	2202      	movs	r2, #2
 8008466:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800846a:	7809      	ldrb	r1, [r1, #0]
 800846c:	f7f7 feb8 	bl	80001e0 <memchr>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	b330      	cbz	r0, 80084c2 <_scanf_i+0xba>
 8008474:	f1b8 0f01 	cmp.w	r8, #1
 8008478:	d15a      	bne.n	8008530 <_scanf_i+0x128>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	b92a      	cbnz	r2, 800848a <_scanf_i+0x82>
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	2108      	movs	r1, #8
 8008482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008486:	6061      	str	r1, [r4, #4]
 8008488:	6022      	str	r2, [r4, #0]
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008490:	6022      	str	r2, [r4, #0]
 8008492:	68a2      	ldr	r2, [r4, #8]
 8008494:	1e51      	subs	r1, r2, #1
 8008496:	60a1      	str	r1, [r4, #8]
 8008498:	b19a      	cbz	r2, 80084c2 <_scanf_i+0xba>
 800849a:	6832      	ldr	r2, [r6, #0]
 800849c:	1c51      	adds	r1, r2, #1
 800849e:	6031      	str	r1, [r6, #0]
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	701a      	strb	r2, [r3, #0]
 80084a4:	1c5d      	adds	r5, r3, #1
 80084a6:	6873      	ldr	r3, [r6, #4]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	6073      	str	r3, [r6, #4]
 80084ae:	dc07      	bgt.n	80084c0 <_scanf_i+0xb8>
 80084b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084b4:	4631      	mov	r1, r6
 80084b6:	4658      	mov	r0, fp
 80084b8:	4798      	blx	r3
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f040 8086 	bne.w	80085cc <_scanf_i+0x1c4>
 80084c0:	462b      	mov	r3, r5
 80084c2:	f108 0801 	add.w	r8, r8, #1
 80084c6:	f1b8 0f03 	cmp.w	r8, #3
 80084ca:	d1c8      	bne.n	800845e <_scanf_i+0x56>
 80084cc:	6862      	ldr	r2, [r4, #4]
 80084ce:	b90a      	cbnz	r2, 80084d4 <_scanf_i+0xcc>
 80084d0:	220a      	movs	r2, #10
 80084d2:	6062      	str	r2, [r4, #4]
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	4945      	ldr	r1, [pc, #276]	; (80085ec <_scanf_i+0x1e4>)
 80084d8:	6960      	ldr	r0, [r4, #20]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	1a89      	subs	r1, r1, r2
 80084de:	f000 f897 	bl	8008610 <__sccl>
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	f04f 0800 	mov.w	r8, #0
 80084e8:	461d      	mov	r5, r3
 80084ea:	68a3      	ldr	r3, [r4, #8]
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d03a      	beq.n	8008568 <_scanf_i+0x160>
 80084f2:	6831      	ldr	r1, [r6, #0]
 80084f4:	6960      	ldr	r0, [r4, #20]
 80084f6:	f891 c000 	ldrb.w	ip, [r1]
 80084fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80084fe:	2800      	cmp	r0, #0
 8008500:	d032      	beq.n	8008568 <_scanf_i+0x160>
 8008502:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008506:	d121      	bne.n	800854c <_scanf_i+0x144>
 8008508:	0510      	lsls	r0, r2, #20
 800850a:	d51f      	bpl.n	800854c <_scanf_i+0x144>
 800850c:	f108 0801 	add.w	r8, r8, #1
 8008510:	b117      	cbz	r7, 8008518 <_scanf_i+0x110>
 8008512:	3301      	adds	r3, #1
 8008514:	3f01      	subs	r7, #1
 8008516:	60a3      	str	r3, [r4, #8]
 8008518:	6873      	ldr	r3, [r6, #4]
 800851a:	3b01      	subs	r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	6073      	str	r3, [r6, #4]
 8008520:	dd1b      	ble.n	800855a <_scanf_i+0x152>
 8008522:	6833      	ldr	r3, [r6, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	6033      	str	r3, [r6, #0]
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	3b01      	subs	r3, #1
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	e7dc      	b.n	80084ea <_scanf_i+0xe2>
 8008530:	f1b8 0f02 	cmp.w	r8, #2
 8008534:	d1ad      	bne.n	8008492 <_scanf_i+0x8a>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800853c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008540:	d1bf      	bne.n	80084c2 <_scanf_i+0xba>
 8008542:	2110      	movs	r1, #16
 8008544:	6061      	str	r1, [r4, #4]
 8008546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800854a:	e7a1      	b.n	8008490 <_scanf_i+0x88>
 800854c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008550:	6022      	str	r2, [r4, #0]
 8008552:	780b      	ldrb	r3, [r1, #0]
 8008554:	702b      	strb	r3, [r5, #0]
 8008556:	3501      	adds	r5, #1
 8008558:	e7de      	b.n	8008518 <_scanf_i+0x110>
 800855a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800855e:	4631      	mov	r1, r6
 8008560:	4658      	mov	r0, fp
 8008562:	4798      	blx	r3
 8008564:	2800      	cmp	r0, #0
 8008566:	d0df      	beq.n	8008528 <_scanf_i+0x120>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	05d9      	lsls	r1, r3, #23
 800856c:	d50c      	bpl.n	8008588 <_scanf_i+0x180>
 800856e:	454d      	cmp	r5, r9
 8008570:	d908      	bls.n	8008584 <_scanf_i+0x17c>
 8008572:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800857a:	4632      	mov	r2, r6
 800857c:	4658      	mov	r0, fp
 800857e:	4798      	blx	r3
 8008580:	1e6f      	subs	r7, r5, #1
 8008582:	463d      	mov	r5, r7
 8008584:	454d      	cmp	r5, r9
 8008586:	d029      	beq.n	80085dc <_scanf_i+0x1d4>
 8008588:	6822      	ldr	r2, [r4, #0]
 800858a:	f012 0210 	ands.w	r2, r2, #16
 800858e:	d113      	bne.n	80085b8 <_scanf_i+0x1b0>
 8008590:	702a      	strb	r2, [r5, #0]
 8008592:	6863      	ldr	r3, [r4, #4]
 8008594:	9e00      	ldr	r6, [sp, #0]
 8008596:	4649      	mov	r1, r9
 8008598:	4658      	mov	r0, fp
 800859a:	47b0      	blx	r6
 800859c:	f8da 3000 	ldr.w	r3, [sl]
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	1d1a      	adds	r2, r3, #4
 80085a4:	f8ca 2000 	str.w	r2, [sl]
 80085a8:	f011 0f20 	tst.w	r1, #32
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	d010      	beq.n	80085d2 <_scanf_i+0x1ca>
 80085b0:	6018      	str	r0, [r3, #0]
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60e3      	str	r3, [r4, #12]
 80085b8:	eba5 0509 	sub.w	r5, r5, r9
 80085bc:	44a8      	add	r8, r5
 80085be:	6925      	ldr	r5, [r4, #16]
 80085c0:	4445      	add	r5, r8
 80085c2:	6125      	str	r5, [r4, #16]
 80085c4:	2000      	movs	r0, #0
 80085c6:	b007      	add	sp, #28
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	f04f 0800 	mov.w	r8, #0
 80085d0:	e7ca      	b.n	8008568 <_scanf_i+0x160>
 80085d2:	07ca      	lsls	r2, r1, #31
 80085d4:	bf4c      	ite	mi
 80085d6:	8018      	strhmi	r0, [r3, #0]
 80085d8:	6018      	strpl	r0, [r3, #0]
 80085da:	e7ea      	b.n	80085b2 <_scanf_i+0x1aa>
 80085dc:	2001      	movs	r0, #1
 80085de:	e7f2      	b.n	80085c6 <_scanf_i+0x1be>
 80085e0:	08008a80 	.word	0x08008a80
 80085e4:	0800876d 	.word	0x0800876d
 80085e8:	08008885 	.word	0x08008885
 80085ec:	08009844 	.word	0x08009844

080085f0 <_sbrk_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4c06      	ldr	r4, [pc, #24]	; (800860c <_sbrk_r+0x1c>)
 80085f4:	2300      	movs	r3, #0
 80085f6:	4605      	mov	r5, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	f7f8 fcd4 	bl	8000fa8 <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_sbrk_r+0x1a>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	b103      	cbz	r3, 800860a <_sbrk_r+0x1a>
 8008608:	602b      	str	r3, [r5, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	20001974 	.word	0x20001974

08008610 <__sccl>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	780b      	ldrb	r3, [r1, #0]
 8008614:	2b5e      	cmp	r3, #94	; 0x5e
 8008616:	bf13      	iteet	ne
 8008618:	1c4a      	addne	r2, r1, #1
 800861a:	1c8a      	addeq	r2, r1, #2
 800861c:	784b      	ldrbeq	r3, [r1, #1]
 800861e:	2100      	movne	r1, #0
 8008620:	bf08      	it	eq
 8008622:	2101      	moveq	r1, #1
 8008624:	1e44      	subs	r4, r0, #1
 8008626:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800862a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800862e:	42ac      	cmp	r4, r5
 8008630:	d1fb      	bne.n	800862a <__sccl+0x1a>
 8008632:	b913      	cbnz	r3, 800863a <__sccl+0x2a>
 8008634:	3a01      	subs	r2, #1
 8008636:	4610      	mov	r0, r2
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	f081 0401 	eor.w	r4, r1, #1
 800863e:	54c4      	strb	r4, [r0, r3]
 8008640:	1c51      	adds	r1, r2, #1
 8008642:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008646:	2d2d      	cmp	r5, #45	; 0x2d
 8008648:	f101 36ff 	add.w	r6, r1, #4294967295
 800864c:	460a      	mov	r2, r1
 800864e:	d006      	beq.n	800865e <__sccl+0x4e>
 8008650:	2d5d      	cmp	r5, #93	; 0x5d
 8008652:	d0f0      	beq.n	8008636 <__sccl+0x26>
 8008654:	b90d      	cbnz	r5, 800865a <__sccl+0x4a>
 8008656:	4632      	mov	r2, r6
 8008658:	e7ed      	b.n	8008636 <__sccl+0x26>
 800865a:	462b      	mov	r3, r5
 800865c:	e7ef      	b.n	800863e <__sccl+0x2e>
 800865e:	780e      	ldrb	r6, [r1, #0]
 8008660:	2e5d      	cmp	r6, #93	; 0x5d
 8008662:	d0fa      	beq.n	800865a <__sccl+0x4a>
 8008664:	42b3      	cmp	r3, r6
 8008666:	dcf8      	bgt.n	800865a <__sccl+0x4a>
 8008668:	3301      	adds	r3, #1
 800866a:	429e      	cmp	r6, r3
 800866c:	54c4      	strb	r4, [r0, r3]
 800866e:	dcfb      	bgt.n	8008668 <__sccl+0x58>
 8008670:	3102      	adds	r1, #2
 8008672:	e7e6      	b.n	8008642 <__sccl+0x32>

08008674 <_strtol_l.isra.0>:
 8008674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008678:	4680      	mov	r8, r0
 800867a:	4689      	mov	r9, r1
 800867c:	4692      	mov	sl, r2
 800867e:	461e      	mov	r6, r3
 8008680:	460f      	mov	r7, r1
 8008682:	463d      	mov	r5, r7
 8008684:	9808      	ldr	r0, [sp, #32]
 8008686:	f815 4b01 	ldrb.w	r4, [r5], #1
 800868a:	f000 f947 	bl	800891c <__locale_ctype_ptr_l>
 800868e:	4420      	add	r0, r4
 8008690:	7843      	ldrb	r3, [r0, #1]
 8008692:	f013 0308 	ands.w	r3, r3, #8
 8008696:	d132      	bne.n	80086fe <_strtol_l.isra.0+0x8a>
 8008698:	2c2d      	cmp	r4, #45	; 0x2d
 800869a:	d132      	bne.n	8008702 <_strtol_l.isra.0+0x8e>
 800869c:	787c      	ldrb	r4, [r7, #1]
 800869e:	1cbd      	adds	r5, r7, #2
 80086a0:	2201      	movs	r2, #1
 80086a2:	2e00      	cmp	r6, #0
 80086a4:	d05d      	beq.n	8008762 <_strtol_l.isra.0+0xee>
 80086a6:	2e10      	cmp	r6, #16
 80086a8:	d109      	bne.n	80086be <_strtol_l.isra.0+0x4a>
 80086aa:	2c30      	cmp	r4, #48	; 0x30
 80086ac:	d107      	bne.n	80086be <_strtol_l.isra.0+0x4a>
 80086ae:	782b      	ldrb	r3, [r5, #0]
 80086b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086b4:	2b58      	cmp	r3, #88	; 0x58
 80086b6:	d14f      	bne.n	8008758 <_strtol_l.isra.0+0xe4>
 80086b8:	786c      	ldrb	r4, [r5, #1]
 80086ba:	2610      	movs	r6, #16
 80086bc:	3502      	adds	r5, #2
 80086be:	2a00      	cmp	r2, #0
 80086c0:	bf14      	ite	ne
 80086c2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80086c6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80086ca:	2700      	movs	r7, #0
 80086cc:	fbb1 fcf6 	udiv	ip, r1, r6
 80086d0:	4638      	mov	r0, r7
 80086d2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80086d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80086da:	2b09      	cmp	r3, #9
 80086dc:	d817      	bhi.n	800870e <_strtol_l.isra.0+0x9a>
 80086de:	461c      	mov	r4, r3
 80086e0:	42a6      	cmp	r6, r4
 80086e2:	dd23      	ble.n	800872c <_strtol_l.isra.0+0xb8>
 80086e4:	1c7b      	adds	r3, r7, #1
 80086e6:	d007      	beq.n	80086f8 <_strtol_l.isra.0+0x84>
 80086e8:	4584      	cmp	ip, r0
 80086ea:	d31c      	bcc.n	8008726 <_strtol_l.isra.0+0xb2>
 80086ec:	d101      	bne.n	80086f2 <_strtol_l.isra.0+0x7e>
 80086ee:	45a6      	cmp	lr, r4
 80086f0:	db19      	blt.n	8008726 <_strtol_l.isra.0+0xb2>
 80086f2:	fb00 4006 	mla	r0, r0, r6, r4
 80086f6:	2701      	movs	r7, #1
 80086f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086fc:	e7eb      	b.n	80086d6 <_strtol_l.isra.0+0x62>
 80086fe:	462f      	mov	r7, r5
 8008700:	e7bf      	b.n	8008682 <_strtol_l.isra.0+0xe>
 8008702:	2c2b      	cmp	r4, #43	; 0x2b
 8008704:	bf04      	itt	eq
 8008706:	1cbd      	addeq	r5, r7, #2
 8008708:	787c      	ldrbeq	r4, [r7, #1]
 800870a:	461a      	mov	r2, r3
 800870c:	e7c9      	b.n	80086a2 <_strtol_l.isra.0+0x2e>
 800870e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008712:	2b19      	cmp	r3, #25
 8008714:	d801      	bhi.n	800871a <_strtol_l.isra.0+0xa6>
 8008716:	3c37      	subs	r4, #55	; 0x37
 8008718:	e7e2      	b.n	80086e0 <_strtol_l.isra.0+0x6c>
 800871a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800871e:	2b19      	cmp	r3, #25
 8008720:	d804      	bhi.n	800872c <_strtol_l.isra.0+0xb8>
 8008722:	3c57      	subs	r4, #87	; 0x57
 8008724:	e7dc      	b.n	80086e0 <_strtol_l.isra.0+0x6c>
 8008726:	f04f 37ff 	mov.w	r7, #4294967295
 800872a:	e7e5      	b.n	80086f8 <_strtol_l.isra.0+0x84>
 800872c:	1c7b      	adds	r3, r7, #1
 800872e:	d108      	bne.n	8008742 <_strtol_l.isra.0+0xce>
 8008730:	2322      	movs	r3, #34	; 0x22
 8008732:	f8c8 3000 	str.w	r3, [r8]
 8008736:	4608      	mov	r0, r1
 8008738:	f1ba 0f00 	cmp.w	sl, #0
 800873c:	d107      	bne.n	800874e <_strtol_l.isra.0+0xda>
 800873e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008742:	b102      	cbz	r2, 8008746 <_strtol_l.isra.0+0xd2>
 8008744:	4240      	negs	r0, r0
 8008746:	f1ba 0f00 	cmp.w	sl, #0
 800874a:	d0f8      	beq.n	800873e <_strtol_l.isra.0+0xca>
 800874c:	b10f      	cbz	r7, 8008752 <_strtol_l.isra.0+0xde>
 800874e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008752:	f8ca 9000 	str.w	r9, [sl]
 8008756:	e7f2      	b.n	800873e <_strtol_l.isra.0+0xca>
 8008758:	2430      	movs	r4, #48	; 0x30
 800875a:	2e00      	cmp	r6, #0
 800875c:	d1af      	bne.n	80086be <_strtol_l.isra.0+0x4a>
 800875e:	2608      	movs	r6, #8
 8008760:	e7ad      	b.n	80086be <_strtol_l.isra.0+0x4a>
 8008762:	2c30      	cmp	r4, #48	; 0x30
 8008764:	d0a3      	beq.n	80086ae <_strtol_l.isra.0+0x3a>
 8008766:	260a      	movs	r6, #10
 8008768:	e7a9      	b.n	80086be <_strtol_l.isra.0+0x4a>
	...

0800876c <_strtol_r>:
 800876c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800876e:	4c06      	ldr	r4, [pc, #24]	; (8008788 <_strtol_r+0x1c>)
 8008770:	4d06      	ldr	r5, [pc, #24]	; (800878c <_strtol_r+0x20>)
 8008772:	6824      	ldr	r4, [r4, #0]
 8008774:	6a24      	ldr	r4, [r4, #32]
 8008776:	2c00      	cmp	r4, #0
 8008778:	bf08      	it	eq
 800877a:	462c      	moveq	r4, r5
 800877c:	9400      	str	r4, [sp, #0]
 800877e:	f7ff ff79 	bl	8008674 <_strtol_l.isra.0>
 8008782:	b003      	add	sp, #12
 8008784:	bd30      	pop	{r4, r5, pc}
 8008786:	bf00      	nop
 8008788:	20000194 	.word	0x20000194
 800878c:	200001f8 	.word	0x200001f8

08008790 <_strtoul_l.isra.0>:
 8008790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	4692      	mov	sl, r2
 800879a:	461e      	mov	r6, r3
 800879c:	460f      	mov	r7, r1
 800879e:	463d      	mov	r5, r7
 80087a0:	9808      	ldr	r0, [sp, #32]
 80087a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087a6:	f000 f8b9 	bl	800891c <__locale_ctype_ptr_l>
 80087aa:	4420      	add	r0, r4
 80087ac:	7843      	ldrb	r3, [r0, #1]
 80087ae:	f013 0308 	ands.w	r3, r3, #8
 80087b2:	d130      	bne.n	8008816 <_strtoul_l.isra.0+0x86>
 80087b4:	2c2d      	cmp	r4, #45	; 0x2d
 80087b6:	d130      	bne.n	800881a <_strtoul_l.isra.0+0x8a>
 80087b8:	787c      	ldrb	r4, [r7, #1]
 80087ba:	1cbd      	adds	r5, r7, #2
 80087bc:	2101      	movs	r1, #1
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d05c      	beq.n	800887c <_strtoul_l.isra.0+0xec>
 80087c2:	2e10      	cmp	r6, #16
 80087c4:	d109      	bne.n	80087da <_strtoul_l.isra.0+0x4a>
 80087c6:	2c30      	cmp	r4, #48	; 0x30
 80087c8:	d107      	bne.n	80087da <_strtoul_l.isra.0+0x4a>
 80087ca:	782b      	ldrb	r3, [r5, #0]
 80087cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087d0:	2b58      	cmp	r3, #88	; 0x58
 80087d2:	d14e      	bne.n	8008872 <_strtoul_l.isra.0+0xe2>
 80087d4:	786c      	ldrb	r4, [r5, #1]
 80087d6:	2610      	movs	r6, #16
 80087d8:	3502      	adds	r5, #2
 80087da:	f04f 32ff 	mov.w	r2, #4294967295
 80087de:	2300      	movs	r3, #0
 80087e0:	fbb2 f2f6 	udiv	r2, r2, r6
 80087e4:	fb06 fc02 	mul.w	ip, r6, r2
 80087e8:	ea6f 0c0c 	mvn.w	ip, ip
 80087ec:	4618      	mov	r0, r3
 80087ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80087f2:	2f09      	cmp	r7, #9
 80087f4:	d817      	bhi.n	8008826 <_strtoul_l.isra.0+0x96>
 80087f6:	463c      	mov	r4, r7
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	dd23      	ble.n	8008844 <_strtoul_l.isra.0+0xb4>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	db1e      	blt.n	800883e <_strtoul_l.isra.0+0xae>
 8008800:	4282      	cmp	r2, r0
 8008802:	d31c      	bcc.n	800883e <_strtoul_l.isra.0+0xae>
 8008804:	d101      	bne.n	800880a <_strtoul_l.isra.0+0x7a>
 8008806:	45a4      	cmp	ip, r4
 8008808:	db19      	blt.n	800883e <_strtoul_l.isra.0+0xae>
 800880a:	fb00 4006 	mla	r0, r0, r6, r4
 800880e:	2301      	movs	r3, #1
 8008810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008814:	e7eb      	b.n	80087ee <_strtoul_l.isra.0+0x5e>
 8008816:	462f      	mov	r7, r5
 8008818:	e7c1      	b.n	800879e <_strtoul_l.isra.0+0xe>
 800881a:	2c2b      	cmp	r4, #43	; 0x2b
 800881c:	bf04      	itt	eq
 800881e:	1cbd      	addeq	r5, r7, #2
 8008820:	787c      	ldrbeq	r4, [r7, #1]
 8008822:	4619      	mov	r1, r3
 8008824:	e7cb      	b.n	80087be <_strtoul_l.isra.0+0x2e>
 8008826:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800882a:	2f19      	cmp	r7, #25
 800882c:	d801      	bhi.n	8008832 <_strtoul_l.isra.0+0xa2>
 800882e:	3c37      	subs	r4, #55	; 0x37
 8008830:	e7e2      	b.n	80087f8 <_strtoul_l.isra.0+0x68>
 8008832:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008836:	2f19      	cmp	r7, #25
 8008838:	d804      	bhi.n	8008844 <_strtoul_l.isra.0+0xb4>
 800883a:	3c57      	subs	r4, #87	; 0x57
 800883c:	e7dc      	b.n	80087f8 <_strtoul_l.isra.0+0x68>
 800883e:	f04f 33ff 	mov.w	r3, #4294967295
 8008842:	e7e5      	b.n	8008810 <_strtoul_l.isra.0+0x80>
 8008844:	2b00      	cmp	r3, #0
 8008846:	da09      	bge.n	800885c <_strtoul_l.isra.0+0xcc>
 8008848:	2322      	movs	r3, #34	; 0x22
 800884a:	f8c8 3000 	str.w	r3, [r8]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	f1ba 0f00 	cmp.w	sl, #0
 8008856:	d107      	bne.n	8008868 <_strtoul_l.isra.0+0xd8>
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	b101      	cbz	r1, 8008860 <_strtoul_l.isra.0+0xd0>
 800885e:	4240      	negs	r0, r0
 8008860:	f1ba 0f00 	cmp.w	sl, #0
 8008864:	d0f8      	beq.n	8008858 <_strtoul_l.isra.0+0xc8>
 8008866:	b10b      	cbz	r3, 800886c <_strtoul_l.isra.0+0xdc>
 8008868:	f105 39ff 	add.w	r9, r5, #4294967295
 800886c:	f8ca 9000 	str.w	r9, [sl]
 8008870:	e7f2      	b.n	8008858 <_strtoul_l.isra.0+0xc8>
 8008872:	2430      	movs	r4, #48	; 0x30
 8008874:	2e00      	cmp	r6, #0
 8008876:	d1b0      	bne.n	80087da <_strtoul_l.isra.0+0x4a>
 8008878:	2608      	movs	r6, #8
 800887a:	e7ae      	b.n	80087da <_strtoul_l.isra.0+0x4a>
 800887c:	2c30      	cmp	r4, #48	; 0x30
 800887e:	d0a4      	beq.n	80087ca <_strtoul_l.isra.0+0x3a>
 8008880:	260a      	movs	r6, #10
 8008882:	e7aa      	b.n	80087da <_strtoul_l.isra.0+0x4a>

08008884 <_strtoul_r>:
 8008884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008886:	4c06      	ldr	r4, [pc, #24]	; (80088a0 <_strtoul_r+0x1c>)
 8008888:	4d06      	ldr	r5, [pc, #24]	; (80088a4 <_strtoul_r+0x20>)
 800888a:	6824      	ldr	r4, [r4, #0]
 800888c:	6a24      	ldr	r4, [r4, #32]
 800888e:	2c00      	cmp	r4, #0
 8008890:	bf08      	it	eq
 8008892:	462c      	moveq	r4, r5
 8008894:	9400      	str	r4, [sp, #0]
 8008896:	f7ff ff7b 	bl	8008790 <_strtoul_l.isra.0>
 800889a:	b003      	add	sp, #12
 800889c:	bd30      	pop	{r4, r5, pc}
 800889e:	bf00      	nop
 80088a0:	20000194 	.word	0x20000194
 80088a4:	200001f8 	.word	0x200001f8

080088a8 <__submore>:
 80088a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088b4:	4299      	cmp	r1, r3
 80088b6:	d11d      	bne.n	80088f4 <__submore+0x4c>
 80088b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088bc:	f7ff fb3c 	bl	8007f38 <_malloc_r>
 80088c0:	b918      	cbnz	r0, 80088ca <__submore+0x22>
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295
 80088c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80088d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80088d4:	6360      	str	r0, [r4, #52]	; 0x34
 80088d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80088da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80088e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80088ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80088ee:	6020      	str	r0, [r4, #0]
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7e8      	b.n	80088c6 <__submore+0x1e>
 80088f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80088f6:	0077      	lsls	r7, r6, #1
 80088f8:	463a      	mov	r2, r7
 80088fa:	f000 f840 	bl	800897e <_realloc_r>
 80088fe:	4605      	mov	r5, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d0de      	beq.n	80088c2 <__submore+0x1a>
 8008904:	eb00 0806 	add.w	r8, r0, r6
 8008908:	4601      	mov	r1, r0
 800890a:	4632      	mov	r2, r6
 800890c:	4640      	mov	r0, r8
 800890e:	f000 f829 	bl	8008964 <memcpy>
 8008912:	f8c4 8000 	str.w	r8, [r4]
 8008916:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800891a:	e7e9      	b.n	80088f0 <__submore+0x48>

0800891c <__locale_ctype_ptr_l>:
 800891c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008920:	4770      	bx	lr
	...

08008924 <__locale_ctype_ptr>:
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <__locale_ctype_ptr+0x14>)
 8008926:	4a05      	ldr	r2, [pc, #20]	; (800893c <__locale_ctype_ptr+0x18>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	2b00      	cmp	r3, #0
 800892e:	bf08      	it	eq
 8008930:	4613      	moveq	r3, r2
 8008932:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008936:	4770      	bx	lr
 8008938:	20000194 	.word	0x20000194
 800893c:	200001f8 	.word	0x200001f8

08008940 <__ascii_mbtowc>:
 8008940:	b082      	sub	sp, #8
 8008942:	b901      	cbnz	r1, 8008946 <__ascii_mbtowc+0x6>
 8008944:	a901      	add	r1, sp, #4
 8008946:	b142      	cbz	r2, 800895a <__ascii_mbtowc+0x1a>
 8008948:	b14b      	cbz	r3, 800895e <__ascii_mbtowc+0x1e>
 800894a:	7813      	ldrb	r3, [r2, #0]
 800894c:	600b      	str	r3, [r1, #0]
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	1c10      	adds	r0, r2, #0
 8008952:	bf18      	it	ne
 8008954:	2001      	movne	r0, #1
 8008956:	b002      	add	sp, #8
 8008958:	4770      	bx	lr
 800895a:	4610      	mov	r0, r2
 800895c:	e7fb      	b.n	8008956 <__ascii_mbtowc+0x16>
 800895e:	f06f 0001 	mvn.w	r0, #1
 8008962:	e7f8      	b.n	8008956 <__ascii_mbtowc+0x16>

08008964 <memcpy>:
 8008964:	b510      	push	{r4, lr}
 8008966:	1e43      	subs	r3, r0, #1
 8008968:	440a      	add	r2, r1
 800896a:	4291      	cmp	r1, r2
 800896c:	d100      	bne.n	8008970 <memcpy+0xc>
 800896e:	bd10      	pop	{r4, pc}
 8008970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008978:	e7f7      	b.n	800896a <memcpy+0x6>

0800897a <__malloc_lock>:
 800897a:	4770      	bx	lr

0800897c <__malloc_unlock>:
 800897c:	4770      	bx	lr

0800897e <_realloc_r>:
 800897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008980:	4607      	mov	r7, r0
 8008982:	4614      	mov	r4, r2
 8008984:	460e      	mov	r6, r1
 8008986:	b921      	cbnz	r1, 8008992 <_realloc_r+0x14>
 8008988:	4611      	mov	r1, r2
 800898a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800898e:	f7ff bad3 	b.w	8007f38 <_malloc_r>
 8008992:	b922      	cbnz	r2, 800899e <_realloc_r+0x20>
 8008994:	f7ff fa82 	bl	8007e9c <_free_r>
 8008998:	4625      	mov	r5, r4
 800899a:	4628      	mov	r0, r5
 800899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899e:	f000 f821 	bl	80089e4 <_malloc_usable_size_r>
 80089a2:	42a0      	cmp	r0, r4
 80089a4:	d20f      	bcs.n	80089c6 <_realloc_r+0x48>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7ff fac5 	bl	8007f38 <_malloc_r>
 80089ae:	4605      	mov	r5, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0f2      	beq.n	800899a <_realloc_r+0x1c>
 80089b4:	4631      	mov	r1, r6
 80089b6:	4622      	mov	r2, r4
 80089b8:	f7ff ffd4 	bl	8008964 <memcpy>
 80089bc:	4631      	mov	r1, r6
 80089be:	4638      	mov	r0, r7
 80089c0:	f7ff fa6c 	bl	8007e9c <_free_r>
 80089c4:	e7e9      	b.n	800899a <_realloc_r+0x1c>
 80089c6:	4635      	mov	r5, r6
 80089c8:	e7e7      	b.n	800899a <_realloc_r+0x1c>

080089ca <__ascii_wctomb>:
 80089ca:	b149      	cbz	r1, 80089e0 <__ascii_wctomb+0x16>
 80089cc:	2aff      	cmp	r2, #255	; 0xff
 80089ce:	bf85      	ittet	hi
 80089d0:	238a      	movhi	r3, #138	; 0x8a
 80089d2:	6003      	strhi	r3, [r0, #0]
 80089d4:	700a      	strbls	r2, [r1, #0]
 80089d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80089da:	bf98      	it	ls
 80089dc:	2001      	movls	r0, #1
 80089de:	4770      	bx	lr
 80089e0:	4608      	mov	r0, r1
 80089e2:	4770      	bx	lr

080089e4 <_malloc_usable_size_r>:
 80089e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e8:	1f18      	subs	r0, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfbc      	itt	lt
 80089ee:	580b      	ldrlt	r3, [r1, r0]
 80089f0:	18c0      	addlt	r0, r0, r3
 80089f2:	4770      	bx	lr

080089f4 <_init>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	bf00      	nop
 80089f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fa:	bc08      	pop	{r3}
 80089fc:	469e      	mov	lr, r3
 80089fe:	4770      	bx	lr

08008a00 <_fini>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr
