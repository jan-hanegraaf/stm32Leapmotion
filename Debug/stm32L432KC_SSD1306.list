
stm32L432KC_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f18  08008ecc  08008ecc  00018ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde4  0800bde4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde4  0800bde4  0001bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdec  0800bdec  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdec  0800bdec  0001bdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800bdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001608  20000210  0800c004  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20001818  0800c004  00021818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c92a  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a6b  00000000  00000000  0003cb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  000405d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  000418e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023dc5  00000000  00000000  00042a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001357d  00000000  00000000  000667dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c63d5  00000000  00000000  00079d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014012f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005120  00000000  00000000  001401ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008eb4 	.word	0x08008eb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08008eb4 	.word	0x08008eb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	ssd1306_TestAll();
 8000d60:	f000 fca8 	bl	80016b4 <ssd1306_TestAll>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f000 fe31 	bl	80019d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f80c 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f000 f910 	bl	8000f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d78:	f000 f8de 	bl	8000f38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d7c:	f000 f89c 	bl	8000eb8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000d80:	f006 feb8 	bl	8007af4 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init();
 8000d84:	f7ff ffea 	bl	8000d5c <init>
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <main+0x20>
	...

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ac      	sub	sp, #176	; 0xb0
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d96:	2244      	movs	r2, #68	; 0x44
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f007 fc7f 	bl	800869e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2254      	movs	r2, #84	; 0x54
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f007 fc71 	bl	800869e <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000dbc:	f002 fc7e 	bl	80036bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <SystemClock_Config+0x128>)
 8000dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc6:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <SystemClock_Config+0x128>)
 8000dc8:	f023 0318 	bic.w	r3, r3, #24
 8000dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000dd0:	2314      	movs	r3, #20
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e02:	2307      	movs	r3, #7
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 fcd3 	bl	80037c4 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e24:	f000 f902 	bl	800102c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e40:	2101      	movs	r1, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 f8ac 	bl	8003fa0 <HAL_RCC_ClockConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e4e:	f000 f8ed 	bl	800102c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000e52:	f242 0342 	movw	r3, #8258	; 0x2042
 8000e56:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e60:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e66:	2301      	movs	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e6e:	2318      	movs	r3, #24
 8000e70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e82:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fa8e 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000e92:	f000 f8cb 	bl	800102c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e9a:	f002 fc2d 	bl	80036f8 <HAL_PWREx_ControlVoltageScaling>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000ea4:	f000 f8c2 	bl	800102c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ea8:	f003 fc70 	bl	800478c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000eac:	bf00      	nop
 8000eae:	37b0      	adds	r7, #176	; 0xb0
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_I2C1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <MX_I2C1_Init+0x7c>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000ef4:	f001 f894 	bl	8002020 <HAL_I2C_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efe:	f000 f895 	bl	800102c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000f06:	f001 fbf7 	bl	80026f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f000 f88c 	bl	800102c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_I2C1_Init+0x74>)
 8000f18:	f001 fc39 	bl	800278e <HAL_I2CEx_ConfigDigitalFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f883 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000864 	.word	0x20000864
 8000f30:	40005400 	.word	0x40005400
 8000f34:	00707cbb 	.word	0x00707cbb

08000f38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART2_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART2_UART_Init+0x58>)
 8000f7c:	f003 fd06 	bl	800498c <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f851 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200008b0 	.word	0x200008b0
 8000f94:	40004400 	.word	0x40004400

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_GPIO_Init+0x8c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_GPIO_Init+0x90>)
 8000ffc:	f000 fff8 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001000:	2308      	movs	r3, #8
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_GPIO_Init+0x90>)
 8001018:	f000 fe80 	bl	8001d1c <HAL_GPIO_Init>

}
 800101c:	bf00      	nop
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	48000400 	.word	0x48000400

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <ssd1306_Reset>:

#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	2200      	movs	r2, #0
 8001064:	2178      	movs	r1, #120	; 0x78
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <ssd1306_WriteCommand+0x2c>)
 8001068:	f001 f86a 	bl	8002140 <HAL_I2C_Mem_Write>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000864 	.word	0x20000864

08001078 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af04      	add	r7, sp, #16
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	f04f 32ff 	mov.w	r2, #4294967295
 800108a:	9202      	str	r2, [sp, #8]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2240      	movs	r2, #64	; 0x40
 8001096:	2178      	movs	r1, #120	; 0x78
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <ssd1306_WriteData+0x30>)
 800109a:	f001 f851 	bl	8002140 <HAL_I2C_Mem_Write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000864 	.word	0x20000864

080010ac <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 80010b0:	f7ff ffc3 	bl	800103a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f000 fcfd 	bl	8001ab4 <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 80010ba:	20ae      	movs	r0, #174	; 0xae
 80010bc:	f7ff ffc4 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80010c0:	2020      	movs	r0, #32
 80010c2:	f7ff ffc1 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffbe 	bl	8001048 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010cc:	20b0      	movs	r0, #176	; 0xb0
 80010ce:	f7ff ffbb 	bl	8001048 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80010d2:	20c8      	movs	r0, #200	; 0xc8
 80010d4:	f7ff ffb8 	bl	8001048 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ffb5 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff ffb2 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80010e4:	2040      	movs	r0, #64	; 0x40
 80010e6:	f7ff ffaf 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80010ea:	2081      	movs	r0, #129	; 0x81
 80010ec:	f7ff ffac 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80010f0:	20ff      	movs	r0, #255	; 0xff
 80010f2:	f7ff ffa9 	bl	8001048 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010f6:	20a1      	movs	r0, #161	; 0xa1
 80010f8:	f7ff ffa6 	bl	8001048 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80010fc:	20a6      	movs	r0, #166	; 0xa6
 80010fe:	f7ff ffa3 	bl	8001048 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001102:	20a8      	movs	r0, #168	; 0xa8
 8001104:	f7ff ffa0 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8001108:	203f      	movs	r0, #63	; 0x3f
 800110a:	f7ff ff9d 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800110e:	20a4      	movs	r0, #164	; 0xa4
 8001110:	f7ff ff9a 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001114:	20d3      	movs	r0, #211	; 0xd3
 8001116:	f7ff ff97 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ff94 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001120:	20d5      	movs	r0, #213	; 0xd5
 8001122:	f7ff ff91 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001126:	20f0      	movs	r0, #240	; 0xf0
 8001128:	f7ff ff8e 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800112c:	20d9      	movs	r0, #217	; 0xd9
 800112e:	f7ff ff8b 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001132:	2022      	movs	r0, #34	; 0x22
 8001134:	f7ff ff88 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001138:	20da      	movs	r0, #218	; 0xda
 800113a:	f7ff ff85 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 800113e:	2012      	movs	r0, #18
 8001140:	f7ff ff82 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001144:	20db      	movs	r0, #219	; 0xdb
 8001146:	f7ff ff7f 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800114a:	2020      	movs	r0, #32
 800114c:	f7ff ff7c 	bl	8001048 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001150:	208d      	movs	r0, #141	; 0x8d
 8001152:	f7ff ff79 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001156:	2014      	movs	r0, #20
 8001158:	f7ff ff76 	bl	8001048 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800115c:	20af      	movs	r0, #175	; 0xaf
 800115e:	f7ff ff73 	bl	8001048 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f810 	bl	8001188 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001168:	f000 f830 	bl	80011cc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <ssd1306_Init+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <ssd1306_Init+0xd8>)
 8001174:	2200      	movs	r2, #0
 8001176:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <ssd1306_Init+0xd8>)
 800117a:	2201      	movs	r2, #1
 800117c:	715a      	strb	r2, [r3, #5]
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000062c 	.word	0x2000062c

08001188 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	e00d      	b.n	80011b4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <ssd1306_Fill+0x1a>
 800119e:	2100      	movs	r1, #0
 80011a0:	e000      	b.n	80011a4 <ssd1306_Fill+0x1c>
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <ssd1306_Fill+0x40>)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	460a      	mov	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ba:	d3ed      	bcc.n	8001198 <ssd1306_Fill+0x10>
    }
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	2000022c 	.word	0x2000022c

080011cc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	e016      	b.n	8001206 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	3b50      	subs	r3, #80	; 0x50
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff32 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff ff2f 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80011ea:	2010      	movs	r0, #16
 80011ec:	f7ff ff2c 	bl	8001048 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	01db      	lsls	r3, r3, #7
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <ssd1306_UpdateScreen+0x48>)
 80011f6:	4413      	add	r3, r2
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff3c 	bl	8001078 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	3301      	adds	r3, #1
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b07      	cmp	r3, #7
 800120a:	d9e5      	bls.n	80011d8 <ssd1306_UpdateScreen+0xc>
    }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000022c 	.word	0x2000022c

08001218 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db48      	blt.n	80012c4 <ssd1306_DrawPixel+0xac>
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b3f      	cmp	r3, #63	; 0x3f
 8001236:	d845      	bhi.n	80012c4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <ssd1306_DrawPixel+0xb8>)
 800123a:	791b      	ldrb	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001240:	797b      	ldrb	r3, [r7, #5]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bf0c      	ite	eq
 8001246:	2301      	moveq	r3, #1
 8001248:	2300      	movne	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d11a      	bne.n	800128a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	79bb      	ldrb	r3, [r7, #6]
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	4603      	mov	r3, r0
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	4413      	add	r3, r2
 8001262:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <ssd1306_DrawPixel+0xbc>)
 8001264:	5cd3      	ldrb	r3, [r2, r3]
 8001266:	b25a      	sxtb	r2, r3
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	b25b      	sxtb	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b259      	sxtb	r1, r3
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4603      	mov	r3, r0
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4413      	add	r3, r2
 8001282:	b2c9      	uxtb	r1, r1
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <ssd1306_DrawPixel+0xbc>)
 8001286:	54d1      	strb	r1, [r2, r3]
 8001288:	e01d      	b.n	80012c6 <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	01db      	lsls	r3, r3, #7
 8001296:	4413      	add	r3, r2
 8001298:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <ssd1306_DrawPixel+0xbc>)
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	79bb      	ldrb	r3, [r7, #6]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4013      	ands	r3, r2
 80012b2:	b259      	sxtb	r1, r3
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	4603      	mov	r3, r0
 80012b8:	01db      	lsls	r3, r3, #7
 80012ba:	4413      	add	r3, r2
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <ssd1306_DrawPixel+0xbc>)
 80012c0:	54d1      	strb	r1, [r2, r3]
 80012c2:	e000      	b.n	80012c6 <ssd1306_DrawPixel+0xae>
        return;
 80012c4:	bf00      	nop
    }
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	2000062c 	.word	0x2000062c
 80012d4:	2000022c 	.word	0x2000022c

080012d8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4604      	mov	r4, r0
 80012e0:	1d38      	adds	r0, r7, #4
 80012e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80012e6:	461a      	mov	r2, r3
 80012e8:	4623      	mov	r3, r4
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	4613      	mov	r3, r2
 80012ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b1f      	cmp	r3, #31
 80012f4:	d902      	bls.n	80012fc <ssd1306_WriteChar+0x24>
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b7e      	cmp	r3, #126	; 0x7e
 80012fa:	d901      	bls.n	8001300 <ssd1306_WriteChar+0x28>
        return 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e06d      	b.n	80013dc <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	793b      	ldrb	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	2b80      	cmp	r3, #128	; 0x80
 800130c:	dc06      	bgt.n	800131c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 8001310:	885b      	ldrh	r3, [r3, #2]
 8001312:	461a      	mov	r2, r3
 8001314:	797b      	ldrb	r3, [r7, #5]
 8001316:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001318:	2b40      	cmp	r3, #64	; 0x40
 800131a:	dd01      	ble.n	8001320 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800131c:	2300      	movs	r3, #0
 800131e:	e05d      	b.n	80013dc <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	e04c      	b.n	80013c0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3b20      	subs	r3, #32
 800132c:	7979      	ldrb	r1, [r7, #5]
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4619      	mov	r1, r3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	440b      	add	r3, r1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	e034      	b.n	80013b0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d012      	beq.n	800137c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4413      	add	r3, r2
 8001362:	b2d8      	uxtb	r0, r3
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 8001366:	885b      	ldrh	r3, [r3, #2]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	7bba      	ldrb	r2, [r7, #14]
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff ff4f 	bl	8001218 <ssd1306_DrawPixel>
 800137a:	e016      	b.n	80013aa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b2d8      	uxtb	r0, r3
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 800138c:	885b      	ldrh	r3, [r3, #2]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4413      	add	r3, r2
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	f7ff ff37 	bl	8001218 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	793b      	ldrb	r3, [r7, #4]
 80013b2:	461a      	mov	r2, r3
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d3c5      	bcc.n	8001346 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	461a      	mov	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d3ad      	bcc.n	8001326 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	793b      	ldrb	r3, [r7, #4]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <ssd1306_WriteChar+0x10c>)
 80013d8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3724      	adds	r7, #36	; 0x24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	2000062c 	.word	0x2000062c

080013e8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	1d38      	adds	r0, r7, #4
 80013f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80013f8:	e012      	b.n	8001420 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	7818      	ldrb	r0, [r3, #0]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	1d3a      	adds	r2, r7, #4
 8001402:	ca06      	ldmia	r2, {r1, r2}
 8001404:	f7ff ff68 	bl	80012d8 <ssd1306_WriteChar>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d002      	beq.n	800141a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	e008      	b.n	800142c <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e8      	bne.n	80013fa <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <ssd1306_SetCursor+0x2c>)
 800144a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <ssd1306_SetCursor+0x2c>)
 8001452:	805a      	strh	r2, [r3, #2]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000062c 	.word	0x2000062c

08001464 <ssd1306_TestBorder>:

#include "ssd1306.h"
#include <string.h>
#include <stdio.h>

void ssd1306_TestBorder() {
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fe8c 	bl	8001188 <ssd1306_Fill>

    uint32_t start = HAL_GetTick();
 8001470:	f000 fb14 	bl	8001a9c <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8001482:	7bb9      	ldrb	r1, [r7, #14]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2200      	movs	r2, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fec5 	bl	8001218 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <ssd1306_TestBorder+0x3e>
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b7e      	cmp	r3, #126	; 0x7e
 8001498:	d803      	bhi.n	80014a2 <ssd1306_TestBorder+0x3e>
            x++;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	3301      	adds	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e016      	b.n	80014d0 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < 63))
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b7f      	cmp	r3, #127	; 0x7f
 80014a6:	d106      	bne.n	80014b6 <ssd1306_TestBorder+0x52>
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b3e      	cmp	r3, #62	; 0x3e
 80014ac:	d803      	bhi.n	80014b6 <ssd1306_TestBorder+0x52>
            y++;
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	3301      	adds	r3, #1
 80014b2:	73bb      	strb	r3, [r7, #14]
 80014b4:	e00c      	b.n	80014d0 <ssd1306_TestBorder+0x6c>
        else if((y == 63) && (x > 0))
 80014b6:	7bbb      	ldrb	r3, [r7, #14]
 80014b8:	2b3f      	cmp	r3, #63	; 0x3f
 80014ba:	d106      	bne.n	80014ca <ssd1306_TestBorder+0x66>
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <ssd1306_TestBorder+0x66>
            x--;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e002      	b.n	80014d0 <ssd1306_TestBorder+0x6c>
        else
            y--;
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 80014d0:	7bb9      	ldrb	r1, [r7, #14]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe9e 	bl	8001218 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 80014dc:	f7ff fe76 	bl	80011cc <ssd1306_UpdateScreen>

        HAL_Delay(5);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 fae7 	bl	8001ab4 <HAL_Delay>
        end = HAL_GetTick();
 80014e6:	f000 fad9 	bl	8001a9c <HAL_GetTick>
 80014ea:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80014f6:	d3c4      	bcc.n	8001482 <ssd1306_TestBorder+0x1e>

    HAL_Delay(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fc:	f000 fada 	bl	8001ab4 <HAL_Delay>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fe3b 	bl	8001188 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8001512:	2100      	movs	r1, #0
 8001514:	2002      	movs	r0, #2
 8001516:	f7ff ff8d 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <ssd1306_TestFonts+0x64>)
 800151c:	2301      	movs	r3, #1
 800151e:	ca06      	ldmia	r2, {r1, r2}
 8001520:	4813      	ldr	r0, [pc, #76]	; (8001570 <ssd1306_TestFonts+0x68>)
 8001522:	f7ff ff61 	bl	80013e8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 8001526:	211a      	movs	r1, #26
 8001528:	2002      	movs	r0, #2
 800152a:	f7ff ff83 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <ssd1306_TestFonts+0x6c>)
 8001530:	2301      	movs	r3, #1
 8001532:	ca06      	ldmia	r2, {r1, r2}
 8001534:	4810      	ldr	r0, [pc, #64]	; (8001578 <ssd1306_TestFonts+0x70>)
 8001536:	f7ff ff57 	bl	80013e8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	2002      	movs	r0, #2
 800153e:	f7ff ff79 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <ssd1306_TestFonts+0x74>)
 8001544:	2301      	movs	r3, #1
 8001546:	ca06      	ldmia	r2, {r1, r2}
 8001548:	480d      	ldr	r0, [pc, #52]	; (8001580 <ssd1306_TestFonts+0x78>)
 800154a:	f7ff ff4d 	bl	80013e8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 800154e:	2136      	movs	r1, #54	; 0x36
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff ff6f 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <ssd1306_TestFonts+0x7c>)
 8001558:	2301      	movs	r3, #1
 800155a:	ca06      	ldmia	r2, {r1, r2}
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <ssd1306_TestFonts+0x80>)
 800155e:	f7ff ff43 	bl	80013e8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001562:	f7ff fe33 	bl	80011cc <ssd1306_UpdateScreen>
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000018 	.word	0x20000018
 8001570:	08008ecc 	.word	0x08008ecc
 8001574:	20000010 	.word	0x20000010
 8001578:	08008ed8 	.word	0x08008ed8
 800157c:	20000008 	.word	0x20000008
 8001580:	08008ee4 	.word	0x08008ee4
 8001584:	20000000 	.word	0x20000000
 8001588:	08008ef0 	.word	0x08008ef0

0800158c <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b098      	sub	sp, #96	; 0x60
 8001590:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff fdf8 	bl	8001188 <ssd1306_Fill>

    uint32_t start = HAL_GetTick();
 8001598:	f000 fa80 	bl	8001a9c <HAL_GetTick>
 800159c:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 800159e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a0:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80015a6:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <ssd1306_TestFPS+0x114>)
 80015a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    ssd1306_SetCursor(2,0);
 80015b2:	2100      	movs	r1, #0
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff ff3d 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80015ba:	4a3a      	ldr	r2, [pc, #232]	; (80016a4 <ssd1306_TestFPS+0x118>)
 80015bc:	2300      	movs	r3, #0
 80015be:	ca06      	ldmia	r2, {r1, r2}
 80015c0:	4839      	ldr	r0, [pc, #228]	; (80016a8 <ssd1306_TestFPS+0x11c>)
 80015c2:	f7ff ff11 	bl	80013e8 <ssd1306_WriteString>

    do {
        ssd1306_SetCursor(2, 18);
 80015c6:	2112      	movs	r1, #18
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff ff33 	bl	8001434 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80015ce:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <ssd1306_TestFPS+0x118>)
 80015d0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015d4:	2300      	movs	r3, #0
 80015d6:	ca06      	ldmia	r2, {r1, r2}
 80015d8:	f7ff ff06 	bl	80013e8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80015dc:	f7ff fdf6 	bl	80011cc <ssd1306_UpdateScreen>

        char ch = message[0];
 80015e0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80015e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 80015e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015ec:	3301      	adds	r3, #1
 80015ee:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015f2:	220a      	movs	r2, #10
 80015f4:	4619      	mov	r1, r3
 80015f6:	f007 f839 	bl	800866c <memmove>
        message[sizeof(message)-2] = ch;
 80015fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80015fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	3301      	adds	r3, #1
 8001606:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8001608:	f000 fa48 	bl	8001a9c <HAL_GetTick>
 800160c:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 800160e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3287 	movw	r2, #4999	; 0x1387
 8001618:	4293      	cmp	r3, r2
 800161a:	d9d4      	bls.n	80015c6 <ssd1306_TestFPS+0x3a>

    HAL_Delay(1000);
 800161c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001620:	f000 fa48 	bl	8001ab4 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8001624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ff81 	bl	8000538 <__aeabi_f2d>
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800163c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff57 	bl	80004f4 <__aeabi_ui2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <ssd1306_TestFPS+0x120>)
 800164c:	f7ff f8f6 	bl	800083c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7ff f8f0 	bl	800083c <__aeabi_ddiv>
 800165c:	4603      	mov	r3, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4618      	mov	r0, r3
 8001662:	4621      	mov	r1, r4
 8001664:	f7ff f9d2 	bl	8000a0c <__aeabi_d2iz>
 8001668:	4603      	mov	r3, r0
 800166a:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 800166c:	1d38      	adds	r0, r7, #4
 800166e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001670:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <ssd1306_TestFPS+0x124>)
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	f007 f81c 	bl	80086b0 <sniprintf>

    ssd1306_Fill(White);
 8001678:	2001      	movs	r0, #1
 800167a:	f7ff fd85 	bl	8001188 <ssd1306_Fill>
    ssd1306_SetCursor(2, 18);
 800167e:	2112      	movs	r1, #18
 8001680:	2002      	movs	r0, #2
 8001682:	f7ff fed7 	bl	8001434 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <ssd1306_TestFPS+0x118>)
 8001688:	1d38      	adds	r0, r7, #4
 800168a:	2300      	movs	r3, #0
 800168c:	ca06      	ldmia	r2, {r1, r2}
 800168e:	f7ff feab 	bl	80013e8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001692:	f7ff fd9b 	bl	80011cc <ssd1306_UpdateScreen>
}
 8001696:	bf00      	nop
 8001698:	3760      	adds	r7, #96	; 0x60
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
 800169e:	bf00      	nop
 80016a0:	08008f10 	.word	0x08008f10
 80016a4:	20000010 	.word	0x20000010
 80016a8:	08008efc 	.word	0x08008efc
 80016ac:	408f4000 	.word	0x408f4000
 80016b0:	08008f08 	.word	0x08008f08

080016b4 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80016b8:	f7ff fcf8 	bl	80010ac <ssd1306_Init>
    ssd1306_TestFPS();
 80016bc:	f7ff ff66 	bl	800158c <ssd1306_TestFPS>
    HAL_Delay(3000);
 80016c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016c4:	f000 f9f6 	bl	8001ab4 <HAL_Delay>
    ssd1306_TestBorder();
 80016c8:	f7ff fecc 	bl	8001464 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 80016cc:	f7ff ff1c 	bl	8001508 <ssd1306_TestFonts>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_MspInit+0x44>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_MspInit+0x44>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6613      	str	r3, [r2, #96]	; 0x60
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_MspInit+0x44>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_MspInit+0x44>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6593      	str	r3, [r2, #88]	; 0x58
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_I2C_MspInit+0x80>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d129      	bne.n	8001792 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001756:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001768:	2304      	movs	r3, #4
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f000 fad1 	bl	8001d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 8001780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40005400 	.word	0x40005400
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a20      	ldr	r2, [pc, #128]	; (8001844 <HAL_UART_MspInit+0xa0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d13a      	bne.n	800183c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ca:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	6593      	str	r3, [r2, #88]	; 0x58
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4a19      	ldr	r2, [pc, #100]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_UART_MspInit+0xa4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f6:	2304      	movs	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f000 fa82 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800181c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800182a:	2303      	movs	r3, #3
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f000 fa70 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40004400 	.word	0x40004400
 8001848:	40021000 	.word	0x40021000

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f8ea 	bl	8001a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USB_IRQHandler+0x10>)
 80018ae:	f001 f8c4 	bl	8002a3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200015a0 	.word	0x200015a0

080018bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x50>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x16>
		heap_end = &end;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <_sbrk+0x50>)
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <_sbrk+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <_sbrk+0x50>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <_sbrk+0x50>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	466a      	mov	r2, sp
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d907      	bls.n	80018f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018e6:	f006 fe97 	bl	8008618 <__errno>
 80018ea:	4602      	mov	r2, r0
 80018ec:	230c      	movs	r3, #12
 80018ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	e006      	b.n	8001904 <_sbrk+0x48>
	}

	heap_end += incr;
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <_sbrk+0x50>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a03      	ldr	r2, [pc, #12]	; (800190c <_sbrk+0x50>)
 8001900:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000634 	.word	0x20000634
 8001910:	20001818 	.word	0x20001818

08001914 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <SystemInit+0x64>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <SystemInit+0x64>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <SystemInit+0x68>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <SystemInit+0x68>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <SystemInit+0x68>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <SystemInit+0x68>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a0f      	ldr	r2, [pc, #60]	; (800197c <SystemInit+0x68>)
 8001940:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001944:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001948:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <SystemInit+0x68>)
 800194c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001950:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <SystemInit+0x68>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <SystemInit+0x68>)
 8001958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <SystemInit+0x68>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SystemInit+0x64>)
 8001966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196a:	609a      	str	r2, [r3, #8]
#endif
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00
 800197c:	40021000 	.word	0x40021000

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001984:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001996:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
	ldr	r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800199e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopForever+0x16>)
	cmp	r2, r3
 80019a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ffb3 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f006 fe39 	bl	8008624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff f9d9 	bl	8000d68 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80019bc:	0800bdf4 	.word	0x0800bdf4
	ldr	r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019c4:	20000210 	.word	0x20000210
	ldr	r2, =_sbss
 80019c8:	20000210 	.word	0x20000210
	ldr	r3, = _ebss
 80019cc:	20001818 	.word	0x20001818

080019d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_IRQHandler>

080019d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f95b 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f80e 	bl	8001a04 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	71fb      	strb	r3, [r7, #7]
 80019f2:	e001      	b.n	80019f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f4:	f7ff fe6e 	bl	80016d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_InitTick+0x68>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_InitTick+0x6c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_InitTick+0x68>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f968 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10f      	bne.n	8001a58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d809      	bhi.n	8001a52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	f04f 30ff 	mov.w	r0, #4294967295
 8001a46:	f000 f932 	bl	8001cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <HAL_InitTick+0x70>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	e004      	b.n	8001a62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	e001      	b.n	8001a62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000028 	.word	0x20000028
 8001a70:	20000020 	.word	0x20000020
 8001a74:	20000024 	.word	0x20000024

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_IncTick+0x20>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a03      	ldr	r2, [pc, #12]	; (8001a94 <HAL_IncTick+0x1c>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20000930 	.word	0x20000930
 8001a98:	20000028 	.word	0x20000028

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000930 	.word	0x20000930

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d004      	beq.n	8001ad8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_Delay+0x40>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ad8:	bf00      	nop
 8001ada:	f7ff ffdf 	bl	8001a9c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f7      	bhi.n	8001ada <HAL_Delay+0x26>
  {
  }
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000028 	.word	0x20000028

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e148      	b.n	8001fbe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 813a 	beq.w	8001fb8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x38>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b12      	cmp	r3, #18
 8001d52:	d123      	bne.n	8001d9c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	6939      	ldr	r1, [r7, #16]
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d00b      	beq.n	8001df0 <HAL_GPIO_Init+0xd4>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001de4:	2b11      	cmp	r3, #17
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b12      	cmp	r3, #18
 8001dee:	d130      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e26:	2201      	movs	r2, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 0201 	and.w	r2, r3, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8094 	beq.w	8001fb8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1d4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1d0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a42      	ldr	r2, [pc, #264]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1cc>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e004      	b.n	8001ef2 <HAL_GPIO_Init+0x1d6>
 8001ee8:	2307      	movs	r3, #7
 8001eea:	e002      	b.n	8001ef2 <HAL_GPIO_Init+0x1d6>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_GPIO_Init+0x1d6>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	f002 0203 	and.w	r2, r2, #3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4093      	lsls	r3, r2
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f02:	4937      	ldr	r1, [pc, #220]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	3302      	adds	r3, #2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f34:	4a2d      	ldr	r2, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f88:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f aeaf 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e081      	b.n	8002136 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb68 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0201 	bic.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	e006      	b.n	80020a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d104      	bne.n	80020ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	ea42 0103 	orr.w	r1, r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	021a      	lsls	r2, r3, #8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69d9      	ldr	r1, [r3, #28]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1a      	ldr	r2, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	817b      	strh	r3, [r7, #10]
 8002152:	460b      	mov	r3, r1
 8002154:	813b      	strh	r3, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	f040 80f9 	bne.w	800235a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <HAL_I2C_Mem_Write+0x34>
 800216e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0ed      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_I2C_Mem_Write+0x4e>
 800218a:	2302      	movs	r3, #2
 800218c:	e0e6      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002196:	f7ff fc81 	bl	8001a9c <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f955 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d1      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2221      	movs	r2, #33	; 0x21
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a3a      	ldr	r2, [r7, #32]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021e0:	88f8      	ldrh	r0, [r7, #6]
 80021e2:	893a      	ldrh	r2, [r7, #8]
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4603      	mov	r3, r0
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8b9 	bl	8002368 <I2C_RequestMemoryWrite>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0a9      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d90e      	bls.n	8002230 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	2300      	movs	r3, #0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fa37 	bl	800269c <I2C_TransferConfig>
 800222e:	e00f      	b.n	8002250 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	b2da      	uxtb	r2, r3
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa26 	bl	800269c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f93f 	bl	80024d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e07b      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d034      	beq.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d130      	bne.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	2200      	movs	r2, #0
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8d1 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e04d      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2bff      	cmp	r3, #255	; 0xff
 80022c8:	d90e      	bls.n	80022e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	22ff      	movs	r2, #255	; 0xff
 80022ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f9db 	bl	800269c <I2C_TransferConfig>
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	8979      	ldrh	r1, [r7, #10]
 80022fa:	2300      	movs	r3, #0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 f9ca 	bl	800269c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d19e      	bne.n	8002250 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f91e 	bl	8002558 <I2C_WaitOnSTOPFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e01a      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2220      	movs	r2, #32
 800232c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <HAL_I2C_Mem_Write+0x224>)
 800233a:	400b      	ands	r3, r1
 800233c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800235a:	2302      	movs	r3, #2
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	fe00e800 	.word	0xfe00e800

08002368 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	4b20      	ldr	r3, [pc, #128]	; (800240c <I2C_RequestMemoryWrite+0xa4>)
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f983 	bl	800269c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f89c 	bl	80024d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02c      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
 80023ba:	e015      	b.n	80023e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	69b9      	ldr	r1, [r7, #24]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f882 	bl	80024d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e012      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023de:	893b      	ldrh	r3, [r7, #8]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2200      	movs	r2, #0
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f830 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	80002000 	.word	0x80002000

08002410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d103      	bne.n	800242e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	619a      	str	r2, [r3, #24]
  }
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002468:	e022      	b.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d01e      	beq.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff fb13 	bl	8001a9c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d113      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e00f      	b.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d0cd      	beq.n	800246a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024e4:	e02c      	b.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f870 	bl	80025d0 <I2C_IsAcknowledgeFailed>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e02a      	b.n	8002550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d01e      	beq.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff facb 	bl	8001a9c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d113      	bne.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d1cb      	bne.n	80024e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002564:	e028      	b.n	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f830 	bl	80025d0 <I2C_IsAcknowledgeFailed>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e026      	b.n	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7ff fa8f 	bl	8001a9c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d113      	bne.n	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e007      	b.n	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d1cf      	bne.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d151      	bne.n	800268e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ea:	e022      	b.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d01e      	beq.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f4:	f7ff fa52 	bl	8001a9c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d302      	bcc.n	800260a <I2C_IsAcknowledgeFailed+0x3a>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d113      	bne.n	8002632 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e02e      	b.n	8002690 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d1d5      	bne.n	80025ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff fedd 	bl	8002410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <I2C_IsAcknowledgeFailed+0xc8>)
 8002662:	400b      	ands	r3, r1
 8002664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	817b      	strh	r3, [r7, #10]
 80026aa:	4613      	mov	r3, r2
 80026ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	0d5b      	lsrs	r3, r3, #21
 80026b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <I2C_TransferConfig+0x58>)
 80026be:	430b      	orrs	r3, r1
 80026c0:	43db      	mvns	r3, r3
 80026c2:	ea02 0103 	and.w	r1, r2, r3
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	03ff63ff 	.word	0x03ff63ff

080026f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b20      	cmp	r3, #32
 800270c:	d138      	bne.n	8002780 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002718:	2302      	movs	r3, #2
 800271a:	e032      	b.n	8002782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	; 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800274a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d139      	bne.n	8002818 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e033      	b.n	800281a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2224      	movs	r2, #36	; 0x24
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002826:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002828:	b08b      	sub	sp, #44	; 0x2c
 800282a:	af06      	add	r7, sp, #24
 800282c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0da      	b.n	80029ee <HAL_PCD_Init+0x1c8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d106      	bne.n	8002852 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f005 fb6d 	bl	8007f2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f002 fd04 	bl	800526c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	687e      	ldr	r6, [r7, #4]
 800286c:	466d      	mov	r5, sp
 800286e:	f106 0410 	add.w	r4, r6, #16
 8002872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	602b      	str	r3, [r5, #0]
 800287a:	1d33      	adds	r3, r6, #4
 800287c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f002 fccb 	bl	800521a <USB_CoreInit>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0ab      	b.n	80029ee <HAL_PCD_Init+0x1c8>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fd02 	bl	80052a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e035      	b.n	8002914 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	015b      	lsls	r3, r3, #5
 80028ae:	4413      	add	r3, r2
 80028b0:	3329      	adds	r3, #41	; 0x29
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	4413      	add	r3, r2
 80028be:	3328      	adds	r3, #40	; 0x28
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	b291      	uxth	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	015b      	lsls	r3, r3, #5
 80028ce:	4413      	add	r3, r2
 80028d0:	3336      	adds	r3, #54	; 0x36
 80028d2:	460a      	mov	r2, r1
 80028d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	4413      	add	r3, r2
 80028de:	332b      	adds	r3, #43	; 0x2b
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	4413      	add	r3, r2
 80028ec:	3338      	adds	r3, #56	; 0x38
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	4413      	add	r3, r2
 80028fa:	333c      	adds	r3, #60	; 0x3c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	3302      	adds	r3, #2
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	4413      	add	r3, r2
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3c4      	bcc.n	80028a8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
 8002922:	e031      	b.n	8002988 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	015b      	lsls	r3, r3, #5
 800292a:	4413      	add	r3, r2
 800292c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	4413      	add	r3, r2
 800293c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	4413      	add	r3, r2
 800294c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	015b      	lsls	r3, r3, #5
 800295a:	4413      	add	r3, r2
 800295c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	015b      	lsls	r3, r3, #5
 800296a:	4413      	add	r3, r2
 800296c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	330a      	adds	r3, #10
 800297a:	015b      	lsls	r3, r3, #5
 800297c:	4413      	add	r3, r2
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3301      	adds	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d3c8      	bcc.n	8002924 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	687e      	ldr	r6, [r7, #4]
 800299a:	466d      	mov	r5, sp
 800299c:	f106 0410 	add.w	r4, r6, #16
 80029a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a4:	6823      	ldr	r3, [r4, #0]
 80029a6:	602b      	str	r3, [r5, #0]
 80029a8:	1d33      	adds	r3, r6, #4
 80029aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ac:	6838      	ldr	r0, [r7, #0]
 80029ae:	f002 fc87 	bl	80052c0 <USB_DevInit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e014      	b.n	80029ee <HAL_PCD_Init+0x1c8>
  }

  hpcd->USB_Address = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_PCD_Init+0x1bc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fe42 	bl	8003666 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fcbb 	bl	8006362 <USB_DevDisconnect>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_PCD_Start+0x16>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e012      	b.n	8002a32 <HAL_PCD_Start+0x3c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fc8b 	bl	8006334 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fc0a 	bl	800523c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fca0 	bl	800638c <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d102      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fb3f 	bl	80030dc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fc92 	bl	800638c <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d112      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a86:	b292      	uxth	r2, r2
 8002a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f005 fac2 	bl	8008016 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a92:	2100      	movs	r1, #0
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f929 	bl	8002cec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 fc74 	bl	800638c <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aae:	d10b      	bne.n	8002ac8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f003 fc5d 	bl	800638c <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d10b      	bne.n	8002af6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af0:	b292      	uxth	r2, r2
 8002af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 fc46 	bl	800638c <USB_ReadInterrupts>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0a:	d133      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0204 	bic.w	r2, r2, #4
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0208 	bic.w	r2, r2, #8
 8002b36:	b292      	uxth	r2, r2
 8002b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b4e:	2100      	movs	r1, #0
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f005 fd0d 	bl	8008570 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 fa96 	bl	8008088 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fc07 	bl	800638c <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b88:	d131      	bne.n	8002bee <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0208 	orr.w	r2, r2, #8
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0204 	orr.w	r2, r2, #4
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fbd8 	bl	800638c <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d002      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f005 fa33 	bl	8008054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fbca 	bl	800638c <USB_ReadInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d13f      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c14:	b292      	uxth	r2, r2
 8002c16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0204 	orr.w	r2, r2, #4
 8002c36:	b292      	uxth	r2, r2
 8002c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c72:	2101      	movs	r1, #1
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f005 fc7b 	bl	8008570 <HAL_PCDEx_LPM_Callback>
 8002c7a:	e002      	b.n	8002c82 <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f005 f9e9 	bl	8008054 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fb80 	bl	800638c <USB_ReadInterrupts>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c96:	d10e      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 f9a2 	bl	8007ffa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fb66 	bl	800638c <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d10b      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_PCD_SetAddress+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e013      	b.n	8002d2e <HAL_PCD_SetAddress+0x42>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 faf4 	bl	800630c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	4608      	mov	r0, r1
 8002d40:	4611      	mov	r1, r2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4603      	mov	r3, r0
 8002d46:	70fb      	strb	r3, [r7, #3]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	803b      	strh	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da0b      	bge.n	8002d74 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	3328      	adds	r3, #40	; 0x28
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
 8002d72:	e00b      	b.n	8002d8c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	015b      	lsls	r3, r3, #5
 8002d7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d98:	883a      	ldrh	r2, [r7, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	78ba      	ldrb	r2, [r7, #2]
 8002da2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d102      	bne.n	8002dc2 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PCD_EP_Open+0x9a>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00e      	b.n	8002dee <HAL_PCD_EP_Open+0xb8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68f9      	ldr	r1, [r7, #12]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fa92 	bl	8005308 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da0b      	bge.n	8002e22 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	3328      	adds	r3, #40	; 0x28
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	705a      	strb	r2, [r3, #1]
 8002e20:	e00b      	b.n	8002e3a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	015b      	lsls	r3, r3, #5
 8002e2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_PCD_EP_Close+0x5e>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e00e      	b.n	8002e72 <HAL_PCD_EP_Close+0x7c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68f9      	ldr	r1, [r7, #12]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fd3a 	bl	80058dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	460b      	mov	r3, r1
 8002e88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	7afb      	ldrb	r3, [r7, #11]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	015b      	lsls	r3, r3, #5
 8002e92:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 fe99 	bl	8005c08 <USB_EPStartXfer>
 8002ed6:	e005      	b.n	8002ee4 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f002 fe92 	bl	8005c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	330a      	adds	r3, #10
 8002f04:	015b      	lsls	r3, r3, #5
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	3328      	adds	r3, #40	; 0x28
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5c:	7afb      	ldrb	r3, [r7, #11]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fe4b 	bl	8005c08 <USB_EPStartXfer>
 8002f72:	e005      	b.n	8002f80 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fe44 	bl	8005c08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 0207 	and.w	r2, r3, #7
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d901      	bls.n	8002fa8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e046      	b.n	8003036 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0b      	bge.n	8002fc8 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	3328      	adds	r3, #40	; 0x28
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
 8002fc6:	e009      	b.n	8002fdc <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015b      	lsls	r3, r3, #5
 8002fcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_EP_SetStall+0x72>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e01c      	b.n	8003036 <HAL_PCD_EP_SetStall+0xac>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 f8a8 	bl	8006160 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003024:	4619      	mov	r1, r3
 8003026:	4610      	mov	r0, r2
 8003028:	f003 f9c0 	bl	80063ac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800304a:	78fb      	ldrb	r3, [r7, #3]
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	d901      	bls.n	800305c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e03a      	b.n	80030d2 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800305c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da0b      	bge.n	800307c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	3328      	adds	r3, #40	; 0x28
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	705a      	strb	r2, [r3, #1]
 800307a:	e00b      	b.n	8003094 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_PCD_EP_ClrStall+0x76>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e00e      	b.n	80030d2 <HAL_PCD_EP_ClrStall+0x94>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 f88e 	bl	80061e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030e4:	e26f      	b.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
  {
    wIstr = hpcd->Instance->ISTR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ee:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80030fa:	7d7b      	ldrb	r3, [r7, #21]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 8137 	bne.w	8003370 <PCD_EP_ISR_Handler+0x294>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003102:	8afb      	ldrh	r3, [r7, #22]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d14f      	bne.n	80031ac <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	b29c      	uxth	r4, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800313c:	b29b      	uxth	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4413      	add	r3, r2
 800314e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800316a:	2100      	movs	r1, #0
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f004 ff2d 	bl	8007fcc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8223 	beq.w	80035c6 <PCD_EP_ISR_Handler+0x4ea>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f040 821e 	bne.w	80035c6 <PCD_EP_ISR_Handler+0x4ea>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003196:	b2da      	uxtb	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b292      	uxth	r2, r2
 800319e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031aa:	e20c      	b.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031b2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031bc:	8a7b      	ldrh	r3, [r7, #18]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d031      	beq.n	800322a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003200:	b29b      	uxth	r3, r3
 8003202:	f003 f920 	bl	8006446 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29a      	uxth	r2, r3
 800320e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003212:	4013      	ands	r3, r2
 8003214:	b29c      	uxth	r4, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800321e:	b292      	uxth	r2, r2
 8003220:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f004 fea8 	bl	8007f78 <HAL_PCD_SetupStageCallback>
 8003228:	e1cd      	b.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800322a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f280 81c9 	bge.w	80035c6 <PCD_EP_ISR_Handler+0x4ea>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
 800323c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003240:	4013      	ands	r3, r2
 8003242:	b29c      	uxth	r4, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003258:	b29b      	uxth	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	4413      	add	r3, r2
 800326a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <PCD_EP_ISR_Handler+0x1d8>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6959      	ldr	r1, [r3, #20]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003298:	b29b      	uxth	r3, r3
 800329a:	f003 f8d4 	bl	8006446 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032ac:	2100      	movs	r1, #0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f004 fe74 	bl	8007f9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461c      	mov	r4, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	441c      	add	r4, r3
 80032c6:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d110      	bne.n	80032f6 <PCD_EP_ISR_Handler+0x21a>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	801a      	strh	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	e026      	b.n	8003344 <PCD_EP_ISR_Handler+0x268>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b3d      	cmp	r3, #61	; 0x3d
 80032fc:	d813      	bhi.n	8003326 <PCD_EP_ISR_Handler+0x24a>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <PCD_EP_ISR_Handler+0x23c>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	3301      	adds	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	b29b      	uxth	r3, r3
 800331c:	029b      	lsls	r3, r3, #10
 800331e:	b29a      	uxth	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	e00e      	b.n	8003344 <PCD_EP_ISR_Handler+0x268>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	b29b      	uxth	r3, r3
 8003332:	029b      	lsls	r3, r3, #10
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	b29c      	uxth	r4, r3
 8003356:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800335a:	b29c      	uxth	r4, r3
 800335c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003360:	b29c      	uxth	r4, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b9f      	ldr	r3, [pc, #636]	; (80035e4 <PCD_EP_ISR_Handler+0x508>)
 8003368:	4323      	orrs	r3, r4
 800336a:	b29b      	uxth	r3, r3
 800336c:	8013      	strh	r3, [r2, #0]
 800336e:	e12a      	b.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	7d7b      	ldrb	r3, [r7, #21]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f280 80cb 	bge.w	8003520 <PCD_EP_ISR_Handler+0x444>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	7d7b      	ldrb	r3, [r7, #21]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29a      	uxth	r2, r3
 800339a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800339e:	4013      	ands	r3, r2
 80033a0:	b29c      	uxth	r4, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	7d7b      	ldrb	r3, [r7, #21]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80033b2:	b292      	uxth	r2, r2
 80033b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033b6:	7d7b      	ldrb	r3, [r7, #21]
 80033b8:	015b      	lsls	r3, r3, #5
 80033ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	7b1b      	ldrb	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11f      	bne.n	800340c <PCD_EP_ISR_Handler+0x330>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f0:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d06e      	beq.n	80034d6 <PCD_EP_ISR_Handler+0x3fa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6959      	ldr	r1, [r3, #20]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88da      	ldrh	r2, [r3, #6]
 8003404:	8bfb      	ldrh	r3, [r7, #30]
 8003406:	f003 f81e 	bl	8006446 <USB_ReadPMA>
 800340a:	e064      	b.n	80034d6 <PCD_EP_ISR_Handler+0x3fa>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01f      	beq.n	8003466 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800344c:	8bfb      	ldrh	r3, [r7, #30]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6959      	ldr	r1, [r3, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	891a      	ldrh	r2, [r3, #8]
 800345e:	8bfb      	ldrh	r3, [r7, #30]
 8003460:	f002 fff1 	bl	8006446 <USB_ReadPMA>
 8003464:	e01e      	b.n	80034a4 <PCD_EP_ISR_Handler+0x3c8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	4413      	add	r3, r2
 8003480:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800348a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <PCD_EP_ISR_Handler+0x3c8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6959      	ldr	r1, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	895a      	ldrh	r2, [r3, #10]
 800349e:	8bfb      	ldrh	r3, [r7, #30]
 80034a0:	f002 ffd1 	bl	8006446 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034be:	b29c      	uxth	r4, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <PCD_EP_ISR_Handler+0x50c>)
 80034d0:	4323      	orrs	r3, r4
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	441a      	add	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	441a      	add	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <PCD_EP_ISR_Handler+0x424>
 80034f6:	8bfa      	ldrh	r2, [r7, #30]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d206      	bcs.n	800350e <PCD_EP_ISR_Handler+0x432>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 fd48 	bl	8007f9c <HAL_PCD_DataOutStageCallback>
 800350c:	e008      	b.n	8003520 <PCD_EP_ISR_Handler+0x444>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	7819      	ldrb	r1, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fcad 	bl	8002e7a <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003520:	8a7b      	ldrh	r3, [r7, #18]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d04d      	beq.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
      {
        ep = &hpcd->IN_ep[epindex];
 800352a:	7d7b      	ldrb	r3, [r7, #21]
 800352c:	015b      	lsls	r3, r3, #5
 800352e:	3328      	adds	r3, #40	; 0x28
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	7d7b      	ldrb	r3, [r7, #21]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	b29c      	uxth	r4, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	7d7b      	ldrb	r3, [r7, #21]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	441a      	add	r2, r3
 800355c:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	441a      	add	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <PCD_EP_ISR_Handler+0x4d8>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 fd0d 	bl	8007fcc <HAL_PCD_DataInStageCallback>
 80035b2:	e008      	b.n	80035c6 <PCD_EP_ISR_Handler+0x4ea>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	7819      	ldrb	r1, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fca9 	bl	8002f18 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f6ff ad87 	blt.w	80030e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	ffff8080 	.word	0xffff8080
 80035e8:	ffff80c0 	.word	0xffff80c0

080035ec <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	817b      	strh	r3, [r7, #10]
 80035fa:	4613      	mov	r3, r2
 80035fc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	015b      	lsls	r3, r3, #5
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e006      	b.n	800362a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800361c:	897b      	ldrh	r3, [r7, #10]
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800362a:	893b      	ldrh	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2200      	movs	r2, #0
 8003634:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	b29a      	uxth	r2, r3
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	80da      	strh	r2, [r3, #6]
 800363e:	e00b      	b.n	8003658 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2201      	movs	r2, #1
 8003644:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	b29a      	uxth	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	b29a      	uxth	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800368a:	b29b      	uxth	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
	...

080036bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40007000 	.word	0x40007000

080036f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003706:	d130      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003708:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d038      	beq.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800371e:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003726:	4b1d      	ldr	r3, [pc, #116]	; (800379c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2232      	movs	r2, #50	; 0x32
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0c9b      	lsrs	r3, r3, #18
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373c:	e002      	b.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b01      	subs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d102      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f2      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003758:	4b0f      	ldr	r3, [pc, #60]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003764:	d110      	bne.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00f      	b.n	800378a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003776:	d007      	beq.n	8003788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003780:	4a05      	ldr	r2, [pc, #20]	; (8003798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40007000 	.word	0x40007000
 800379c:	20000020 	.word	0x20000020
 80037a0:	431bde83 	.word	0x431bde83

080037a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b2:	6053      	str	r3, [r2, #4]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40007000 	.word	0x40007000

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e3db      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d6:	4ba4      	ldr	r3, [pc, #656]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e0:	4ba1      	ldr	r3, [pc, #644]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80e1 	beq.w	80039ba <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_RCC_OscConfig+0x4a>
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f040 8088 	bne.w	8003916 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8084 	bne.w	8003916 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800380e:	4b96      	ldr	r3, [pc, #600]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x62>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e3b3      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	4b8f      	ldr	r3, [pc, #572]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_RCC_OscConfig+0x7c>
 8003836:	4b8c      	ldr	r3, [pc, #560]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383e:	e005      	b.n	800384c <HAL_RCC_OscConfig+0x88>
 8003840:	4b89      	ldr	r3, [pc, #548]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	091b      	lsrs	r3, r3, #4
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	4293      	cmp	r3, r2
 800384e:	d223      	bcs.n	8003898 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fd47 	bl	80042e8 <RCC_SetFlashLatencyFromMSIRange>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e394      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003864:	4b80      	ldr	r3, [pc, #512]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a7f      	ldr	r2, [pc, #508]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800386a:	f043 0308 	orr.w	r3, r3, #8
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b7d      	ldr	r3, [pc, #500]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	497a      	ldr	r1, [pc, #488]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003882:	4b79      	ldr	r3, [pc, #484]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4975      	ldr	r1, [pc, #468]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
 8003896:	e022      	b.n	80038de <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003898:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a72      	ldr	r2, [pc, #456]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800389e:	f043 0308 	orr.w	r3, r3, #8
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b70      	ldr	r3, [pc, #448]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	496d      	ldr	r1, [pc, #436]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b6:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	4968      	ldr	r1, [pc, #416]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fd0a 	bl	80042e8 <RCC_SetFlashLatencyFromMSIRange>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e357      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038de:	f000 fc41 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80038e2:	4601      	mov	r1, r0
 80038e4:	4b60      	ldr	r3, [pc, #384]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4a5f      	ldr	r2, [pc, #380]	; (8003a6c <HAL_RCC_OscConfig+0x2a8>)
 80038f0:	5cd3      	ldrb	r3, [r2, r3]
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	fa21 f303 	lsr.w	r3, r1, r3
 80038fa:	4a5d      	ldr	r2, [pc, #372]	; (8003a70 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038fe:	4b5d      	ldr	r3, [pc, #372]	; (8003a74 <HAL_RCC_OscConfig+0x2b0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe f87e 	bl	8001a04 <HAL_InitTick>
 8003908:	4603      	mov	r3, r0
 800390a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d052      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	e33b      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d032      	beq.n	8003984 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800391e:	4b52      	ldr	r3, [pc, #328]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800392a:	f7fe f8b7 	bl	8001a9c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003932:	f7fe f8b3 	bl	8001a9c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e324      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003944:	4b48      	ldr	r3, [pc, #288]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003950:	4b45      	ldr	r3, [pc, #276]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003956:	f043 0308 	orr.w	r3, r3, #8
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	493f      	ldr	r1, [pc, #252]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800396e:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	493a      	ldr	r1, [pc, #232]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
 8003982:	e01a      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003990:	f7fe f884 	bl	8001a9c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003998:	f7fe f880 	bl	8001a9c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e2f1      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1d4>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d074      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x214>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d10e      	bne.n	80039f0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d10b      	bne.n	80039f0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d064      	beq.n	8003aae <HAL_RCC_OscConfig+0x2ea>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d160      	bne.n	8003aae <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e2ce      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d106      	bne.n	8003a08 <HAL_RCC_OscConfig+0x244>
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e01d      	b.n	8003a44 <HAL_RCC_OscConfig+0x280>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a10:	d10c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x268>
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCC_OscConfig+0x280>
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_RCC_OscConfig+0x2a4>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe f826 	bl	8001a9c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	e011      	b.n	8003a78 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe f822 	bl	8001a9c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d90a      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e293      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800bd68 	.word	0x0800bd68
 8003a70:	20000020 	.word	0x20000020
 8003a74:	20000024 	.word	0x20000024
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a78:	4bae      	ldr	r3, [pc, #696]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0e7      	beq.n	8003a54 <HAL_RCC_OscConfig+0x290>
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fe f809 	bl	8001a9c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f805 	bl	8001a9c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b64      	cmp	r3, #100	; 0x64
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e276      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aa0:	4ba4      	ldr	r3, [pc, #656]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x2ca>
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d060      	beq.n	8003b7e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x30a>
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b0c      	cmp	r3, #12
 8003ac6:	d119      	bne.n	8003afc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d116      	bne.n	8003afc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ace:	4b99      	ldr	r3, [pc, #612]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x322>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e253      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae6:	4b93      	ldr	r3, [pc, #588]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	498f      	ldr	r1, [pc, #572]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afa:	e040      	b.n	8003b7e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a8a      	ldr	r2, [pc, #552]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd ffc4 	bl	8001a9c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fd ffc0 	bl	8001a9c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e231      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2a:	4b82      	ldr	r3, [pc, #520]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	497b      	ldr	r1, [pc, #492]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e018      	b.n	8003b7e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4c:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a78      	ldr	r2, [pc, #480]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd ffa0 	bl	8001a9c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd ff9c 	bl	8001a9c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e20d      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b72:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b92:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b98:	4a66      	ldr	r2, [pc, #408]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd ff7b 	bl	8001a9c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fd ff77 	bl	8001a9c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1e8      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bbc:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ef      	beq.n	8003baa <HAL_RCC_OscConfig+0x3e6>
 8003bca:	e01b      	b.n	8003c04 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd ff5e 	bl	8001a9c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fd ff5a 	bl	8001a9c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1cb      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a5 	beq.w	8003d5c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10d      	bne.n	8003c3e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b44      	ldr	r3, [pc, #272]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_OscConfig+0x574>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <HAL_RCC_OscConfig+0x574>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3a      	ldr	r2, [pc, #232]	; (8003d38 <HAL_RCC_OscConfig+0x574>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fd ff21 	bl	8001a9c <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fd ff1d 	bl	8001a9c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e18e      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_OscConfig+0x574>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <HAL_RCC_OscConfig+0x4d2>
 8003c84:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c94:	e024      	b.n	8003ce0 <HAL_RCC_OscConfig+0x51c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d110      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4fc>
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbe:	e00f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x51c>
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a17      	ldr	r2, [pc, #92]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd fed8 	bl	8001a9c <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd fed4 	bl	8001a9c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e143      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_OscConfig+0x570>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ed      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x52c>
 8003d14:	e019      	b.n	8003d4a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd fec1 	bl	8001a9c <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1c:	e00e      	b.n	8003d3c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd febd 	bl	8001a9c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d905      	bls.n	8003d3c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e12c      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d3c:	4b96      	ldr	r3, [pc, #600]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e9      	bne.n	8003d1e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	4a90      	ldr	r2, [pc, #576]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d03c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d70:	4b89      	ldr	r3, [pc, #548]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d76:	4a88      	ldr	r2, [pc, #544]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fe8c 	bl	8001a9c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d88:	f7fd fe88 	bl	8001a9c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0f9      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d9a:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ef      	beq.n	8003d88 <HAL_RCC_OscConfig+0x5c4>
 8003da8:	e01b      	b.n	8003de2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003daa:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db0:	4a79      	ldr	r2, [pc, #484]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd fe6f 	bl	8001a9c <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dc2:	f7fd fe6b 	bl	8001a9c <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e0dc      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd4:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80d0 	beq.w	8003f8c <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	f000 808d 	beq.w	8003f0e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d15a      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfc:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a65      	ldr	r2, [pc, #404]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fe48 	bl	8001a9c <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd fe44 	bl	8001a9c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0b5      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e22:	4b5d      	ldr	r3, [pc, #372]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2e:	4b5a      	ldr	r3, [pc, #360]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	4b5a      	ldr	r3, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0x7d8>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e3e:	3a01      	subs	r2, #1
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	4311      	orrs	r1, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e48:	0212      	lsls	r2, r2, #8
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e50:	0852      	lsrs	r2, r2, #1
 8003e52:	3a01      	subs	r2, #1
 8003e54:	0552      	lsls	r2, r2, #21
 8003e56:	4311      	orrs	r1, r2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e5c:	0852      	lsrs	r2, r2, #1
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0652      	lsls	r2, r2, #25
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e68:	06d2      	lsls	r2, r2, #27
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	494a      	ldr	r1, [pc, #296]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e72:	4b49      	ldr	r3, [pc, #292]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a48      	ldr	r2, [pc, #288]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e7e:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4a45      	ldr	r2, [pc, #276]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e88:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fe07 	bl	8001a9c <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fd fe03 	bl	8001a9c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e074      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x6ce>
 8003eb0:	e06c      	b.n	8003f8c <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ebe:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4a32      	ldr	r2, [pc, #200]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003ed0:	f023 0303 	bic.w	r3, r3, #3
 8003ed4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ed6:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003edc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fd fdd9 	bl	8001a9c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fd fdd5 	bl	8001a9c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e046      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x72a>
 8003f0c:	e03e      	b.n	8003f8c <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e039      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <HAL_RCC_OscConfig+0x7d4>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0203 	and.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d12c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d123      	bne.n	8003f88 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d11b      	bne.n	8003f88 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d113      	bne.n	8003f88 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d109      	bne.n	8003f88 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	019d808c 	.word	0x019d808c

08003fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0c8      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d910      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 0207 	bic.w	r2, r3, #7
 8003fca:	4961      	ldr	r1, [pc, #388]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0b0      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d04c      	beq.n	800408a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff8:	4b56      	ldr	r3, [pc, #344]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d121      	bne.n	8004048 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e09e      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d107      	bne.n	8004020 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d115      	bne.n	8004048 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e092      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004028:	4b4a      	ldr	r3, [pc, #296]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e086      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004038:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e07e      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f023 0203 	bic.w	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	493f      	ldr	r1, [pc, #252]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fd fd1f 	bl	8001a9c <HAL_GetTick>
 800405e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	e00a      	b.n	8004078 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004062:	f7fd fd1b 	bl	8001a9c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e066      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004078:	4b36      	ldr	r3, [pc, #216]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 020c 	and.w	r2, r3, #12
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	429a      	cmp	r2, r3
 8004088:	d1eb      	bne.n	8004062 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	492c      	ldr	r1, [pc, #176]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d210      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b26      	ldr	r3, [pc, #152]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 0207 	bic.w	r2, r3, #7
 80040be:	4924      	ldr	r1, [pc, #144]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <HAL_RCC_ClockConfig+0x1b0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e036      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4918      	ldr	r1, [pc, #96]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4910      	ldr	r1, [pc, #64]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004116:	f000 f825 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 800411a:	4601      	mov	r1, r0
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <HAL_RCC_ClockConfig+0x1b4>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	fa21 f303 	lsr.w	r3, r1, r3
 8004132:	4a0a      	ldr	r2, [pc, #40]	; (800415c <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004136:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fc62 	bl	8001a04 <HAL_InitTick>
 8004140:	4603      	mov	r3, r0
 8004142:	72fb      	strb	r3, [r7, #11]

  return status;
 8004144:	7afb      	ldrb	r3, [r7, #11]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40022000 	.word	0x40022000
 8004154:	40021000 	.word	0x40021000
 8004158:	0800bd68 	.word	0x0800bd68
 800415c:	20000020 	.word	0x20000020
 8004160:	20000024 	.word	0x20000024

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	2300      	movs	r3, #0
 8004170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417c:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x34>
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d11e      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004198:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041a4:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 80041a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e005      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041b4:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <HAL_RCC_GetSysClockFreq+0x108>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10d      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b04      	cmp	r3, #4
 80041da:	d102      	bne.n	80041e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	e004      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041e8:	4b22      	ldr	r3, [pc, #136]	; (8004274 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d133      	bne.n	800425a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d002      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0xa4>
 8004202:	2b03      	cmp	r3, #3
 8004204:	d003      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0xaa>
 8004206:	e005      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004208:	4b19      	ldr	r3, [pc, #100]	; (8004270 <HAL_RCC_GetSysClockFreq+0x10c>)
 800420a:	617b      	str	r3, [r7, #20]
      break;
 800420c:	e005      	b.n	800421a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800420e:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_GetSysClockFreq+0x110>)
 8004210:	617b      	str	r3, [r7, #20]
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	617b      	str	r3, [r7, #20]
      break;
 8004218:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	3301      	adds	r3, #1
 8004226:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0a1b      	lsrs	r3, r3, #8
 800422e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	fb02 f203 	mul.w	r2, r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	fbb2 f3f3 	udiv	r3, r2, r3
 800423e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_GetSysClockFreq+0x104>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	0e5b      	lsrs	r3, r3, #25
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	3301      	adds	r3, #1
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800425a:	69bb      	ldr	r3, [r7, #24]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3724      	adds	r7, #36	; 0x24
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40021000 	.word	0x40021000
 800426c:	0800bd80 	.word	0x0800bd80
 8004270:	00f42400 	.word	0x00f42400
 8004274:	007a1200 	.word	0x007a1200

08004278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800427c:	4b03      	ldr	r3, [pc, #12]	; (800428c <HAL_RCC_GetHCLKFreq+0x14>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000020 	.word	0x20000020

08004290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004294:	f7ff fff0 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 8004298:	4601      	mov	r1, r0
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800bd78 	.word	0x0800bd78

080042bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042c0:	f7ff ffda 	bl	8004278 <HAL_RCC_GetHCLKFreq>
 80042c4:	4601      	mov	r1, r0
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	0adb      	lsrs	r3, r3, #11
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	0800bd78 	.word	0x0800bd78

080042e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042f4:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004300:	f7ff f9ec 	bl	80036dc <HAL_PWREx_GetVoltageRange>
 8004304:	6178      	str	r0, [r7, #20]
 8004306:	e014      	b.n	8004332 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	4a24      	ldr	r2, [pc, #144]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004312:	6593      	str	r3, [r2, #88]	; 0x58
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004320:	f7ff f9dc 	bl	80036dc <HAL_PWREx_GetVoltageRange>
 8004324:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004326:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800432c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d10b      	bne.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d919      	bls.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2ba0      	cmp	r3, #160	; 0xa0
 8004344:	d902      	bls.n	800434c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004346:	2302      	movs	r3, #2
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e013      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e010      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d902      	bls.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004358:	2303      	movs	r3, #3
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e00a      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d102      	bne.n	800436a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004364:	2302      	movs	r3, #2
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	e004      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d101      	bne.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004370:	2301      	movs	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 0207 	bic.w	r2, r3, #7
 800437c:	4909      	ldr	r1, [pc, #36]	; (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d001      	beq.n	8004396 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40022000 	.word	0x40022000

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043b0:	2300      	movs	r3, #0
 80043b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043b4:	2300      	movs	r3, #0
 80043b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02f      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043cc:	d005      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x32>
 80043ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043d2:	d015      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80043d8:	e00f      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043da:	4bac      	ldr	r3, [pc, #688]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4aab      	ldr	r2, [pc, #684]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043e6:	e00c      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f9dc 	bl	80047ac <RCCEx_PLLSAI1_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	74fb      	strb	r3, [r7, #19]
      break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8004400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004408:	4ba0      	ldr	r3, [pc, #640]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	499d      	ldr	r1, [pc, #628]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800441e:	e001      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8099 	beq.w	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004436:	4b95      	ldr	r3, [pc, #596]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	4b8f      	ldr	r3, [pc, #572]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4a8e      	ldr	r2, [pc, #568]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
 8004458:	4b8c      	ldr	r3, [pc, #560]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004464:	2301      	movs	r3, #1
 8004466:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004468:	4b89      	ldr	r3, [pc, #548]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a88      	ldr	r2, [pc, #544]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004474:	f7fd fb12 	bl	8001a9c <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800447a:	e009      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447c:	f7fd fb0e 	bl	8001a9c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d902      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	74fb      	strb	r3, [r7, #19]
        break;
 800448e:	e005      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004490:	4b7f      	ldr	r3, [pc, #508]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0ef      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d155      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044a2:	4b7a      	ldr	r3, [pc, #488]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01e      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d019      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044be:	4b73      	ldr	r3, [pc, #460]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044da:	4b6c      	ldr	r3, [pc, #432]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	4a6a      	ldr	r2, [pc, #424]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ea:	4a68      	ldr	r2, [pc, #416]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fd face 	bl	8001a9c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004502:	e00b      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fd faca 	bl	8001a9c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d902      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	74fb      	strb	r3, [r7, #19]
            break;
 800451a:	e006      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451c:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ec      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004530:	4b56      	ldr	r3, [pc, #344]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004536:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	4953      	ldr	r1, [pc, #332]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004546:	e004      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
 800454c:	e001      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004552:	7c7b      	ldrb	r3, [r7, #17]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	4a4b      	ldr	r2, [pc, #300]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800455e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004570:	4b46      	ldr	r3, [pc, #280]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4943      	ldr	r1, [pc, #268]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004592:	4b3e      	ldr	r3, [pc, #248]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 020c 	bic.w	r2, r3, #12
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	493a      	ldr	r1, [pc, #232]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	4932      	ldr	r1, [pc, #200]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d6:	4b2d      	ldr	r3, [pc, #180]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	4929      	ldr	r1, [pc, #164]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045f8:	4b24      	ldr	r3, [pc, #144]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4921      	ldr	r1, [pc, #132]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4918      	ldr	r1, [pc, #96]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4910      	ldr	r1, [pc, #64]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02c      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	4907      	ldr	r1, [pc, #28]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800467c:	d10a      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4a02      	ldr	r2, [pc, #8]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004688:	60d3      	str	r3, [r2, #12]
 800468a:	e015      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800468c:	40021000 	.word	0x40021000
 8004690:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f881 	bl	80047ac <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046c4:	4b30      	ldr	r3, [pc, #192]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	492d      	ldr	r1, [pc, #180]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a27      	ldr	r2, [pc, #156]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f852 	bl	80047ac <RCCEx_PLLSAI1_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01c      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004730:	4915      	ldr	r1, [pc, #84]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f82f 	bl	80047ac <RCCEx_PLLSAI1_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800477e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000

0800478c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6013      	str	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000

080047ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ba:	4b73      	ldr	r3, [pc, #460]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047c6:	4b70      	ldr	r3, [pc, #448]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10d      	bne.n	80047f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
       ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047de:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
       ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d044      	beq.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e041      	b.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d00c      	beq.n	800481a <RCCEx_PLLSAI1_Config+0x6e>
 8004800:	2b03      	cmp	r3, #3
 8004802:	d013      	beq.n	800482c <RCCEx_PLLSAI1_Config+0x80>
 8004804:	2b01      	cmp	r3, #1
 8004806:	d120      	bne.n	800484a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004808:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11d      	bne.n	8004850 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e01a      	b.n	8004850 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482a:	e013      	b.n	8004854 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800482c:	4b56      	ldr	r3, [pc, #344]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004838:	4b53      	ldr	r3, [pc, #332]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d109      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004848:	e006      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
      break;
 800484e:	e004      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004850:	bf00      	nop
 8004852:	e002      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004854:	bf00      	nop
 8004856:	e000      	b.n	800485a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004858:	bf00      	nop
    }

    if(status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10d      	bne.n	800487c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	3b01      	subs	r3, #1
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	430b      	orrs	r3, r1
 8004876:	4944      	ldr	r1, [pc, #272]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d17c      	bne.n	800497c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004882:	4b41      	ldr	r3, [pc, #260]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a40      	ldr	r2, [pc, #256]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004888:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488e:	f7fd f905 	bl	8001a9c <HAL_GetTick>
 8004892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004894:	e009      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004896:	f7fd f901 	bl	8001a9c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d902      	bls.n	80048aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	73fb      	strb	r3, [r7, #15]
        break;
 80048a8:	e005      	b.n	80048b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048aa:	4b37      	ldr	r3, [pc, #220]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1ef      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d15f      	bne.n	800497c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d110      	bne.n	80048e4 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	0211      	lsls	r1, r2, #8
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	68d2      	ldr	r2, [r2, #12]
 80048d8:	06d2      	lsls	r2, r2, #27
 80048da:	430a      	orrs	r2, r1
 80048dc:	492a      	ldr	r1, [pc, #168]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	610b      	str	r3, [r1, #16]
 80048e2:	e027      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d112      	bne.n	8004910 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ea:	4b27      	ldr	r3, [pc, #156]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6892      	ldr	r2, [r2, #8]
 80048fa:	0211      	lsls	r1, r2, #8
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6912      	ldr	r2, [r2, #16]
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0552      	lsls	r2, r2, #21
 8004906:	430a      	orrs	r2, r1
 8004908:	491f      	ldr	r1, [pc, #124]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	610b      	str	r3, [r1, #16]
 800490e:	e011      	b.n	8004934 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004910:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	0211      	lsls	r1, r2, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6952      	ldr	r2, [r2, #20]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0652      	lsls	r2, r2, #25
 800492c:	430a      	orrs	r2, r1
 800492e:	4916      	ldr	r1, [pc, #88]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004934:	4b14      	ldr	r3, [pc, #80]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a13      	ldr	r2, [pc, #76]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800493a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800493e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd f8ac 	bl	8001a9c <HAL_GetTick>
 8004944:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004946:	e009      	b.n	800495c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004948:	f7fd f8a8 	bl	8001a9c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d902      	bls.n	800495c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	73fb      	strb	r3, [r7, #15]
          break;
 800495a:	e005      	b.n	8004968 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	4904      	ldr	r1, [pc, #16]	; (8004988 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e040      	b.n	8004a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fef8 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	; 0x24
 80049b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f82c 	bl	8004a28 <UART_SetConfig>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e022      	b.n	8004a20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 faea 	bl	8004fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fb71 	bl	8005100 <UART_CheckIdleState>
 8004a1e:	4603      	mov	r3, r0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a28:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	4bbc      	ldr	r3, [pc, #752]	; (8004d50 <UART_SetConfig+0x328>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	69f9      	ldr	r1, [r7, #28]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4ab2      	ldr	r2, [pc, #712]	; (8004d54 <UART_SetConfig+0x32c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4aa9      	ldr	r2, [pc, #676]	; (8004d58 <UART_SetConfig+0x330>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d121      	bne.n	8004afc <UART_SetConfig+0xd4>
 8004ab8:	4ba8      	ldr	r3, [pc, #672]	; (8004d5c <UART_SetConfig+0x334>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d816      	bhi.n	8004af4 <UART_SetConfig+0xcc>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0xa4>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004ae3 	.word	0x08004ae3
 8004ad8:	08004aef 	.word	0x08004aef
 8004adc:	2301      	movs	r3, #1
 8004ade:	76fb      	strb	r3, [r7, #27]
 8004ae0:	e072      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	76fb      	strb	r3, [r7, #27]
 8004ae6:	e06f      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	76fb      	strb	r3, [r7, #27]
 8004aec:	e06c      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004aee:	2308      	movs	r3, #8
 8004af0:	76fb      	strb	r3, [r7, #27]
 8004af2:	e069      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004af4:	2310      	movs	r3, #16
 8004af6:	76fb      	strb	r3, [r7, #27]
 8004af8:	bf00      	nop
 8004afa:	e065      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a97      	ldr	r2, [pc, #604]	; (8004d60 <UART_SetConfig+0x338>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d134      	bne.n	8004b70 <UART_SetConfig+0x148>
 8004b06:	4b95      	ldr	r3, [pc, #596]	; (8004d5c <UART_SetConfig+0x334>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f003 030c 	and.w	r3, r3, #12
 8004b10:	2b0c      	cmp	r3, #12
 8004b12:	d829      	bhi.n	8004b68 <UART_SetConfig+0x140>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0xf4>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b51 	.word	0x08004b51
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b69 	.word	0x08004b69
 8004b28:	08004b69 	.word	0x08004b69
 8004b2c:	08004b5d 	.word	0x08004b5d
 8004b30:	08004b69 	.word	0x08004b69
 8004b34:	08004b69 	.word	0x08004b69
 8004b38:	08004b69 	.word	0x08004b69
 8004b3c:	08004b57 	.word	0x08004b57
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b69 	.word	0x08004b69
 8004b4c:	08004b63 	.word	0x08004b63
 8004b50:	2300      	movs	r3, #0
 8004b52:	76fb      	strb	r3, [r7, #27]
 8004b54:	e038      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004b56:	2302      	movs	r3, #2
 8004b58:	76fb      	strb	r3, [r7, #27]
 8004b5a:	e035      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	76fb      	strb	r3, [r7, #27]
 8004b60:	e032      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004b62:	2308      	movs	r3, #8
 8004b64:	76fb      	strb	r3, [r7, #27]
 8004b66:	e02f      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004b68:	2310      	movs	r3, #16
 8004b6a:	76fb      	strb	r3, [r7, #27]
 8004b6c:	bf00      	nop
 8004b6e:	e02b      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a77      	ldr	r2, [pc, #476]	; (8004d54 <UART_SetConfig+0x32c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d124      	bne.n	8004bc4 <UART_SetConfig+0x19c>
 8004b7a:	4b78      	ldr	r3, [pc, #480]	; (8004d5c <UART_SetConfig+0x334>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d012      	beq.n	8004bb0 <UART_SetConfig+0x188>
 8004b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8e:	d802      	bhi.n	8004b96 <UART_SetConfig+0x16e>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <UART_SetConfig+0x17c>
 8004b94:	e012      	b.n	8004bbc <UART_SetConfig+0x194>
 8004b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b9a:	d006      	beq.n	8004baa <UART_SetConfig+0x182>
 8004b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0x18e>
 8004ba2:	e00b      	b.n	8004bbc <UART_SetConfig+0x194>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	76fb      	strb	r3, [r7, #27]
 8004ba8:	e00e      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004baa:	2302      	movs	r3, #2
 8004bac:	76fb      	strb	r3, [r7, #27]
 8004bae:	e00b      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	76fb      	strb	r3, [r7, #27]
 8004bb4:	e008      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	76fb      	strb	r3, [r7, #27]
 8004bba:	e005      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	76fb      	strb	r3, [r7, #27]
 8004bc0:	bf00      	nop
 8004bc2:	e001      	b.n	8004bc8 <UART_SetConfig+0x1a0>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a61      	ldr	r2, [pc, #388]	; (8004d54 <UART_SetConfig+0x32c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f040 80f4 	bne.w	8004dbc <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd4:	7efb      	ldrb	r3, [r7, #27]
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d823      	bhi.n	8004c22 <UART_SetConfig+0x1fa>
 8004bda:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0x1b8>)
 8004bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be0:	08004c05 	.word	0x08004c05
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c13 	.word	0x08004c13
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7ff fb44 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8004c08:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c0a:	e00d      	b.n	8004c28 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004c0c:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <UART_SetConfig+0x33c>)
 8004c0e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c10:	e00a      	b.n	8004c28 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004c12:	f7ff faa7 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004c16:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c18:	e006      	b.n	8004c28 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c20:	e002      	b.n	8004c28 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	74fb      	strb	r3, [r7, #19]
        break;
 8004c26:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 81b9 	beq.w	8004fa2 <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	4413      	add	r3, r2
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d305      	bcc.n	8004c4c <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d902      	bls.n	8004c52 <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	74fb      	strb	r3, [r7, #19]
 8004c50:	e1a7      	b.n	8004fa2 <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 8004c52:	7efb      	ldrb	r3, [r7, #27]
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	f200 809e 	bhi.w	8004d96 <UART_SetConfig+0x36e>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x238>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004d97 	.word	0x08004d97
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004d97 	.word	0x08004d97
 8004c70:	08004d05 	.word	0x08004d05
 8004c74:	08004d97 	.word	0x08004d97
 8004c78:	08004d97 	.word	0x08004d97
 8004c7c:	08004d97 	.word	0x08004d97
 8004c80:	08004d6d 	.word	0x08004d6d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c84:	f7ff fb04 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	f04f 0400 	mov.w	r4, #0
 8004c98:	0214      	lsls	r4, r2, #8
 8004c9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004c9e:	020b      	lsls	r3, r1, #8
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6852      	ldr	r2, [r2, #4]
 8004ca4:	0852      	lsrs	r2, r2, #1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	eb13 0b01 	adds.w	fp, r3, r1
 8004cb0:	eb44 0c02 	adc.w	ip, r4, r2
 8004cb4:	4658      	mov	r0, fp
 8004cb6:	4661      	mov	r1, ip
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f04f 0400 	mov.w	r4, #0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	f7fb feca 	bl	8000a5c <__aeabi_uldivmod>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004cce:	e065      	b.n	8004d9c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	4923      	ldr	r1, [pc, #140]	; (8004d68 <UART_SetConfig+0x340>)
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	eb13 0b01 	adds.w	fp, r3, r1
 8004ce4:	eb44 0c02 	adc.w	ip, r4, r2
 8004ce8:	4658      	mov	r0, fp
 8004cea:	4661      	mov	r1, ip
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f04f 0400 	mov.w	r4, #0
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	f7fb feb0 	bl	8000a5c <__aeabi_uldivmod>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d02:	e04b      	b.n	8004d9c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d04:	f7ff fa2e 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0214      	lsls	r4, r2, #8
 8004d1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004d1e:	020b      	lsls	r3, r1, #8
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6852      	ldr	r2, [r2, #4]
 8004d24:	0852      	lsrs	r2, r2, #1
 8004d26:	4611      	mov	r1, r2
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	eb13 0b01 	adds.w	fp, r3, r1
 8004d30:	eb44 0c02 	adc.w	ip, r4, r2
 8004d34:	4658      	mov	r0, fp
 8004d36:	4661      	mov	r1, ip
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f04f 0400 	mov.w	r4, #0
 8004d40:	461a      	mov	r2, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	f7fb fe8a 	bl	8000a5c <__aeabi_uldivmod>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d4e:	e025      	b.n	8004d9c <UART_SetConfig+0x374>
 8004d50:	efff69f3 	.word	0xefff69f3
 8004d54:	40008000 	.word	0x40008000
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40004400 	.word	0x40004400
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	f04f 0400 	mov.w	r4, #0
 8004d76:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004d7a:	f144 0100 	adc.w	r1, r4, #0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	461a      	mov	r2, r3
 8004d88:	4623      	mov	r3, r4
 8004d8a:	f7fb fe67 	bl	8000a5c <__aeabi_uldivmod>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004d94:	e002      	b.n	8004d9c <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	74fb      	strb	r3, [r7, #19]
            break;
 8004d9a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da2:	d308      	bcc.n	8004db6 <UART_SetConfig+0x38e>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004daa:	d204      	bcs.n	8004db6 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e0f5      	b.n	8004fa2 <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	74fb      	strb	r3, [r7, #19]
 8004dba:	e0f2      	b.n	8004fa2 <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d17f      	bne.n	8004ec6 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 8004dc6:	7efb      	ldrb	r3, [r7, #27]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d85c      	bhi.n	8004e86 <UART_SetConfig+0x45e>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x3ac>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e17 	.word	0x08004e17
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e87 	.word	0x08004e87
 8004de4:	08004e51 	.word	0x08004e51
 8004de8:	08004e87 	.word	0x08004e87
 8004dec:	08004e87 	.word	0x08004e87
 8004df0:	08004e87 	.word	0x08004e87
 8004df4:	08004e6f 	.word	0x08004e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004df8:	f7ff fa4a 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	005a      	lsls	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	441a      	add	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e14:	e03a      	b.n	8004e8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e16:	f7ff fa51 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	005a      	lsls	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e32:	e02b      	b.n	8004e8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004e3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6852      	ldr	r2, [r2, #4]
 8004e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e4e:	e01d      	b.n	8004e8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e50:	f7ff f988 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004e54:	4603      	mov	r3, r0
 8004e56:	005a      	lsls	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e6c:	e00e      	b.n	8004e8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004e84:	e002      	b.n	8004e8c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	74fb      	strb	r3, [r7, #19]
        break;
 8004e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	d916      	bls.n	8004ec0 <UART_SetConfig+0x498>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e98:	d212      	bcs.n	8004ec0 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f023 030f 	bic.w	r3, r3, #15
 8004ea2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	897b      	ldrh	r3, [r7, #10]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	897a      	ldrh	r2, [r7, #10]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	e070      	b.n	8004fa2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	74fb      	strb	r3, [r7, #19]
 8004ec4:	e06d      	b.n	8004fa2 <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 8004ec6:	7efb      	ldrb	r3, [r7, #27]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d859      	bhi.n	8004f80 <UART_SetConfig+0x558>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x4ac>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f15 	.word	0x08004f15
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004f81 	.word	0x08004f81
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004f81 	.word	0x08004f81
 8004eec:	08004f81 	.word	0x08004f81
 8004ef0:	08004f81 	.word	0x08004f81
 8004ef4:	08004f69 	.word	0x08004f69
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004ef8:	f7ff f9ca 	bl	8004290 <HAL_RCC_GetPCLK1Freq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f12:	e038      	b.n	8004f86 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004f14:	f7ff f9d2 	bl	80042bc <HAL_RCC_GetPCLK2Freq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f2e:	e02a      	b.n	8004f86 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004f3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6852      	ldr	r2, [r2, #4]
 8004f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f4a:	e01c      	b.n	8004f86 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004f4c:	f7ff f90a 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	085b      	lsrs	r3, r3, #1
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f66:	e00e      	b.n	8004f86 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f7e:	e002      	b.n	8004f86 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	74fb      	strb	r3, [r7, #19]
        break;
 8004f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d908      	bls.n	8004f9e <UART_SetConfig+0x576>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f92:	d204      	bcs.n	8004f9e <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e001      	b.n	8004fa2 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004fba:	bf00      	nop

08004fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01a      	beq.n	80050d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ba:	d10a      	bne.n	80050d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]
  }
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af02      	add	r7, sp, #8
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800510e:	f7fc fcc5 	bl	8001a9c <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b08      	cmp	r3, #8
 8005120:	d10e      	bne.n	8005140 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005122:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f82a 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e020      	b.n	8005182 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d10e      	bne.n	800516c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f814 	bl	800518a <UART_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e00a      	b.n	8005182 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	e02a      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d026      	beq.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a4:	f7fc fc7a 	bl	8001a9c <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <UART_WaitOnFlagUntilTimeout+0x30>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11b      	bne.n	80051f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2220      	movs	r2, #32
 80051de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2220      	movs	r2, #32
 80051e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e00f      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	79fb      	ldrb	r3, [r7, #7]
 800520c:	429a      	cmp	r2, r3
 800520e:	d0c5      	beq.n	800519c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800521a:	b084      	sub	sp, #16
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	f107 0014 	add.w	r0, r7, #20
 8005228:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	b004      	add	sp, #16
 800523a:	4770      	bx	lr

0800523c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005244:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005248:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005250:	b29a      	uxth	r2, r3
 8005252:	89fb      	ldrh	r3, [r7, #14]
 8005254:	4313      	orrs	r3, r2
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005274:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005278:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005280:	b29b      	uxth	r3, r3
 8005282:	b21a      	sxth	r2, r3
 8005284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005288:	43db      	mvns	r3, r3
 800528a:	b21b      	sxth	r3, r3
 800528c:	4013      	ands	r3, r2
 800528e:	b21b      	sxth	r3, r3
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 0014 	add.w	r0, r7, #20
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ffa2 	bl	800523c <USB_EnableGlobalInt>

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr

08005308 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005308:	b490      	push	{r4, r7}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532c:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	78db      	ldrb	r3, [r3, #3]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d819      	bhi.n	800536a <USB_ActivateEndpoint+0x62>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <USB_ActivateEndpoint+0x34>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005361 	.word	0x08005361
 8005344:	08005371 	.word	0x08005371
 8005348:	08005357 	.word	0x08005357
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800534c:	8abb      	ldrh	r3, [r7, #20]
 800534e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005352:	82bb      	strh	r3, [r7, #20]
      break;
 8005354:	e00d      	b.n	8005372 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005356:	8abb      	ldrh	r3, [r7, #20]
 8005358:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800535c:	82bb      	strh	r3, [r7, #20]
      break;
 800535e:	e008      	b.n	8005372 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005360:	8abb      	ldrh	r3, [r7, #20]
 8005362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005366:	82bb      	strh	r3, [r7, #20]
      break;
 8005368:	e003      	b.n	8005372 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
      break;
 800536e:	e000      	b.n	8005372 <USB_ActivateEndpoint+0x6a>
      break;
 8005370:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	441a      	add	r2, r3
 800537c:	8abb      	ldrh	r3, [r7, #20]
 800537e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	b21a      	sxth	r2, r3
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	b29c      	uxth	r4, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	4b87      	ldr	r3, [pc, #540]	; (80055e0 <USB_ActivateEndpoint+0x2d8>)
 80053c4:	4323      	orrs	r3, r4
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	7b1b      	ldrb	r3, [r3, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 810c 	bne.w	80055ec <USB_ActivateEndpoint+0x2e4>
  {
    if (ep->is_in != 0U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d067      	beq.n	80054ac <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053dc:	687c      	ldr	r4, [r7, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	441c      	add	r4, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4423      	add	r3, r4
 80053f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f4:	461c      	mov	r4, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	b29b      	uxth	r3, r3
 8005402:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29c      	uxth	r4, r3
 8005412:	4623      	mov	r3, r4
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d014      	beq.n	8005446 <USB_ActivateEndpoint+0x13e>
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	b29c      	uxth	r4, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	4b69      	ldr	r3, [pc, #420]	; (80055e4 <USB_ActivateEndpoint+0x2dc>)
 8005440:	4323      	orrs	r3, r4
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d018      	beq.n	8005480 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	b29c      	uxth	r4, r3
 8005466:	f084 0320 	eor.w	r3, r4, #32
 800546a:	b29c      	uxth	r4, r3
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <USB_ActivateEndpoint+0x2d8>)
 8005478:	4323      	orrs	r3, r4
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]
 800547e:	e225      	b.n	80058cc <USB_ActivateEndpoint+0x5c4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005496:	b29c      	uxth	r4, r3
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	441a      	add	r2, r3
 80054a2:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <USB_ActivateEndpoint+0x2d8>)
 80054a4:	4323      	orrs	r3, r4
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8013      	strh	r3, [r2, #0]
 80054aa:	e20f      	b.n	80058cc <USB_ActivateEndpoint+0x5c4>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80054ac:	687c      	ldr	r4, [r7, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	441c      	add	r4, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4423      	add	r3, r4
 80054c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054c4:	461c      	mov	r4, r3
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	88db      	ldrh	r3, [r3, #6]
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80054d4:	687c      	ldr	r4, [r7, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	441c      	add	r4, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4423      	add	r3, r4
 80054e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d110      	bne.n	8005518 <USB_ActivateEndpoint+0x210>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e026      	b.n	8005566 <USB_ActivateEndpoint+0x25e>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b3d      	cmp	r3, #61	; 0x3d
 800551e:	d813      	bhi.n	8005548 <USB_ActivateEndpoint+0x240>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <USB_ActivateEndpoint+0x232>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3301      	adds	r3, #1
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	b29b      	uxth	r3, r3
 800553e:	029b      	lsls	r3, r3, #10
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e00e      	b.n	8005566 <USB_ActivateEndpoint+0x25e>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b29b      	uxth	r3, r3
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	b29b      	uxth	r3, r3
 8005558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800555c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29c      	uxth	r4, r3
 8005574:	4623      	mov	r3, r4
 8005576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d014      	beq.n	80055a8 <USB_ActivateEndpoint+0x2a0>
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	b29c      	uxth	r4, r3
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <USB_ActivateEndpoint+0x2e0>)
 80055a2:	4323      	orrs	r3, r4
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055be:	b29c      	uxth	r4, r3
 80055c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80055c4:	b29c      	uxth	r4, r3
 80055c6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80055ca:	b29c      	uxth	r4, r3
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <USB_ActivateEndpoint+0x2d8>)
 80055d8:	4323      	orrs	r3, r4
 80055da:	b29b      	uxth	r3, r3
 80055dc:	8013      	strh	r3, [r2, #0]
 80055de:	e175      	b.n	80058cc <USB_ActivateEndpoint+0x5c4>
 80055e0:	ffff8080 	.word	0xffff8080
 80055e4:	ffff80c0 	.word	0xffff80c0
 80055e8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	b29c      	uxth	r4, r3
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	441a      	add	r2, r3
 800560e:	4b96      	ldr	r3, [pc, #600]	; (8005868 <USB_ActivateEndpoint+0x560>)
 8005610:	4323      	orrs	r3, r4
 8005612:	b29b      	uxth	r3, r3
 8005614:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005616:	687c      	ldr	r4, [r7, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561e:	b29b      	uxth	r3, r3
 8005620:	441c      	add	r4, r3
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4423      	add	r3, r4
 800562a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562e:	461c      	mov	r4, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	891b      	ldrh	r3, [r3, #8]
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	b29b      	uxth	r3, r3
 800563c:	8023      	strh	r3, [r4, #0]
 800563e:	687c      	ldr	r4, [r7, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	441c      	add	r4, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4423      	add	r3, r4
 8005652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005656:	461c      	mov	r4, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	895b      	ldrh	r3, [r3, #10]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	b29b      	uxth	r3, r3
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 8088 	bne.w	8005780 <USB_ActivateEndpoint+0x478>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29c      	uxth	r4, r3
 800567e:	4623      	mov	r3, r4
 8005680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d014      	beq.n	80056b2 <USB_ActivateEndpoint+0x3aa>
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	b29c      	uxth	r4, r3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	4b70      	ldr	r3, [pc, #448]	; (800586c <USB_ActivateEndpoint+0x564>)
 80056ac:	4323      	orrs	r3, r4
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29c      	uxth	r4, r3
 80056c0:	4623      	mov	r3, r4
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d014      	beq.n	80056f4 <USB_ActivateEndpoint+0x3ec>
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	b29c      	uxth	r4, r3
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	4b60      	ldr	r3, [pc, #384]	; (8005870 <USB_ActivateEndpoint+0x568>)
 80056ee:	4323      	orrs	r3, r4
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	b29c      	uxth	r4, r3
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	441a      	add	r2, r3
 8005716:	4b56      	ldr	r3, [pc, #344]	; (8005870 <USB_ActivateEndpoint+0x568>)
 8005718:	4323      	orrs	r3, r4
 800571a:	b29b      	uxth	r3, r3
 800571c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29b      	uxth	r3, r3
 800572c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005734:	b29c      	uxth	r4, r3
 8005736:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800573a:	b29c      	uxth	r4, r3
 800573c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005740:	b29c      	uxth	r4, r3
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	441a      	add	r2, r3
 800574c:	4b49      	ldr	r3, [pc, #292]	; (8005874 <USB_ActivateEndpoint+0x56c>)
 800574e:	4323      	orrs	r3, r4
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800576a:	b29c      	uxth	r4, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <USB_ActivateEndpoint+0x56c>)
 8005778:	4323      	orrs	r3, r4
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]
 800577e:	e0a5      	b.n	80058cc <USB_ActivateEndpoint+0x5c4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29c      	uxth	r4, r3
 800578e:	4623      	mov	r3, r4
 8005790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d014      	beq.n	80057c2 <USB_ActivateEndpoint+0x4ba>
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	b29c      	uxth	r4, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <USB_ActivateEndpoint+0x564>)
 80057bc:	4323      	orrs	r3, r4
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29c      	uxth	r4, r3
 80057d0:	4623      	mov	r3, r4
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d014      	beq.n	8005804 <USB_ActivateEndpoint+0x4fc>
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	b29c      	uxth	r4, r3
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <USB_ActivateEndpoint+0x568>)
 80057fe:	4323      	orrs	r3, r4
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	b29c      	uxth	r4, r3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	441a      	add	r2, r3
 8005826:	4b11      	ldr	r3, [pc, #68]	; (800586c <USB_ActivateEndpoint+0x564>)
 8005828:	4323      	orrs	r3, r4
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d020      	beq.n	8005878 <USB_ActivateEndpoint+0x570>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584c:	b29c      	uxth	r4, r3
 800584e:	f084 0320 	eor.w	r3, r4, #32
 8005852:	b29c      	uxth	r4, r3
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <USB_ActivateEndpoint+0x56c>)
 8005860:	4323      	orrs	r3, r4
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]
 8005866:	e01c      	b.n	80058a2 <USB_ActivateEndpoint+0x59a>
 8005868:	ffff8180 	.word	0xffff8180
 800586c:	ffffc080 	.word	0xffffc080
 8005870:	ffff80c0 	.word	0xffff80c0
 8005874:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588e:	b29c      	uxth	r4, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <USB_ActivateEndpoint+0x5d0>)
 800589c:	4323      	orrs	r3, r4
 800589e:	b29b      	uxth	r3, r3
 80058a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	b29c      	uxth	r4, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	441a      	add	r2, r3
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <USB_ActivateEndpoint+0x5d0>)
 80058c6:	4323      	orrs	r3, r4
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc90      	pop	{r4, r7}
 80058d6:	4770      	bx	lr
 80058d8:	ffff8080 	.word	0xffff8080

080058dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058dc:	b490      	push	{r4, r7}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	7b1b      	ldrb	r3, [r3, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d171      	bne.n	80059d2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d036      	beq.n	8005964 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29c      	uxth	r4, r3
 8005904:	4623      	mov	r3, r4
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <USB_DeactivateEndpoint+0x5c>
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005924:	b29c      	uxth	r4, r3
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	4b6b      	ldr	r3, [pc, #428]	; (8005ae0 <USB_DeactivateEndpoint+0x204>)
 8005932:	4323      	orrs	r3, r4
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	b29c      	uxth	r4, r3
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	4b62      	ldr	r3, [pc, #392]	; (8005ae4 <USB_DeactivateEndpoint+0x208>)
 800595c:	4323      	orrs	r3, r4
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
 8005962:	e144      	b.n	8005bee <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29c      	uxth	r4, r3
 8005972:	4623      	mov	r3, r4
 8005974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d014      	beq.n	80059a6 <USB_DeactivateEndpoint+0xca>
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	b29c      	uxth	r4, r3
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	4b52      	ldr	r3, [pc, #328]	; (8005ae8 <USB_DeactivateEndpoint+0x20c>)
 80059a0:	4323      	orrs	r3, r4
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	b29c      	uxth	r4, r3
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <USB_DeactivateEndpoint+0x208>)
 80059ca:	4323      	orrs	r3, r4
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	8013      	strh	r3, [r2, #0]
 80059d0:	e10d      	b.n	8005bee <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 8088 	bne.w	8005aec <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29c      	uxth	r4, r3
 80059ea:	4623      	mov	r3, r4
 80059ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d014      	beq.n	8005a1e <USB_DeactivateEndpoint+0x142>
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	b29c      	uxth	r4, r3
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	4b34      	ldr	r3, [pc, #208]	; (8005ae8 <USB_DeactivateEndpoint+0x20c>)
 8005a18:	4323      	orrs	r3, r4
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29c      	uxth	r4, r3
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d014      	beq.n	8005a60 <USB_DeactivateEndpoint+0x184>
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	b29c      	uxth	r4, r3
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <USB_DeactivateEndpoint+0x204>)
 8005a5a:	4323      	orrs	r3, r4
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	b29c      	uxth	r4, r3
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	441a      	add	r2, r3
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <USB_DeactivateEndpoint+0x204>)
 8005a84:	4323      	orrs	r3, r4
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa0:	b29c      	uxth	r4, r3
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	441a      	add	r2, r3
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <USB_DeactivateEndpoint+0x208>)
 8005aae:	4323      	orrs	r3, r4
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aca:	b29c      	uxth	r4, r3
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <USB_DeactivateEndpoint+0x208>)
 8005ad8:	4323      	orrs	r3, r4
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
 8005ade:	e086      	b.n	8005bee <USB_DeactivateEndpoint+0x312>
 8005ae0:	ffff80c0 	.word	0xffff80c0
 8005ae4:	ffff8080 	.word	0xffff8080
 8005ae8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29c      	uxth	r4, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d014      	beq.n	8005b2e <USB_DeactivateEndpoint+0x252>
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	b29c      	uxth	r4, r3
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	441a      	add	r2, r3
 8005b26:	4b35      	ldr	r3, [pc, #212]	; (8005bfc <USB_DeactivateEndpoint+0x320>)
 8005b28:	4323      	orrs	r3, r4
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29c      	uxth	r4, r3
 8005b3c:	4623      	mov	r3, r4
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d014      	beq.n	8005b70 <USB_DeactivateEndpoint+0x294>
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5c:	b29c      	uxth	r4, r3
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <USB_DeactivateEndpoint+0x324>)
 8005b6a:	4323      	orrs	r3, r4
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	b29c      	uxth	r4, r3
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <USB_DeactivateEndpoint+0x320>)
 8005b94:	4323      	orrs	r3, r4
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	b29c      	uxth	r4, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	441a      	add	r2, r3
 8005bbc:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <USB_DeactivateEndpoint+0x328>)
 8005bbe:	4323      	orrs	r3, r4
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	b29c      	uxth	r4, r3
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <USB_DeactivateEndpoint+0x328>)
 8005be8:	4323      	orrs	r3, r4
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc90      	pop	{r4, r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	ffffc080 	.word	0xffffc080
 8005c00:	ffff80c0 	.word	0xffff80c0
 8005c04:	ffff8080 	.word	0xffff8080

08005c08 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b095      	sub	sp, #84	; 0x54
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	f040 815d 	bne.w	8005ed6 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d909      	bls.n	8005c3c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	e005      	b.n	8005c48 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	7b1b      	ldrb	r3, [r3, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11a      	bne.n	8005c86 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6959      	ldr	r1, [r3, #20]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88da      	ldrh	r2, [r3, #6]
 8005c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fbb1 	bl	80063c4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c62:	687c      	ldr	r4, [r7, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	441c      	add	r4, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4423      	add	r3, r4
 8005c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	801a      	strh	r2, [r3, #0]
 8005c84:	e10b      	b.n	8005e9e <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d062      	beq.n	8005d62 <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c9c:	687c      	ldr	r4, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d144      	bne.n	8005d30 <USB_EPStartXfer+0x128>
 8005ca6:	687c      	ldr	r4, [r7, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	441c      	add	r4, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4423      	add	r3, r4
 8005cba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d110      	bne.n	8005ce8 <USB_EPStartXfer+0xe0>
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	801a      	strh	r2, [r3, #0]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e037      	b.n	8005d58 <USB_EPStartXfer+0x150>
 8005ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cea:	2b3d      	cmp	r3, #61	; 0x3d
 8005cec:	d811      	bhi.n	8005d12 <USB_EPStartXfer+0x10a>
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <USB_EPStartXfer+0xfc>
 8005cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d00:	3301      	adds	r3, #1
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	e022      	b.n	8005d58 <USB_EPStartXfer+0x150>
 8005d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	647b      	str	r3, [r7, #68]	; 0x44
 8005d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e013      	b.n	8005d58 <USB_EPStartXfer+0x150>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d10f      	bne.n	8005d58 <USB_EPStartXfer+0x150>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	441c      	add	r4, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4423      	add	r3, r4
 8005d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	895b      	ldrh	r3, [r3, #10]
 8005d5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005d60:	e061      	b.n	8005e26 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d144      	bne.n	8005df4 <USB_EPStartXfer+0x1ec>
 8005d6a:	687c      	ldr	r4, [r7, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	441c      	add	r4, r3
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4423      	add	r3, r4
 8005d7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d110      	bne.n	8005dac <USB_EPStartXfer+0x1a4>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e038      	b.n	8005e1e <USB_EPStartXfer+0x216>
 8005dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dae:	2b3d      	cmp	r3, #61	; 0x3d
 8005db0:	d811      	bhi.n	8005dd6 <USB_EPStartXfer+0x1ce>
 8005db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	643b      	str	r3, [r7, #64]	; 0x40
 8005db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <USB_EPStartXfer+0x1c0>
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e023      	b.n	8005e1e <USB_EPStartXfer+0x216>
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	643b      	str	r3, [r7, #64]	; 0x40
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	029b      	lsls	r3, r3, #10
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e014      	b.n	8005e1e <USB_EPStartXfer+0x216>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d110      	bne.n	8005e1e <USB_EPStartXfer+0x216>
 8005dfc:	687c      	ldr	r4, [r7, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	441c      	add	r4, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4423      	add	r3, r4
 8005e10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	891b      	ldrh	r3, [r3, #8]
 8005e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6959      	ldr	r1, [r3, #20]
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fac6 	bl	80063c4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d115      	bne.n	8005e6c <USB_EPStartXfer+0x264>
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e56:	b29c      	uxth	r4, r3
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	4b99      	ldr	r3, [pc, #612]	; (80060c8 <USB_EPStartXfer+0x4c0>)
 8005e64:	4323      	orrs	r3, r4
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	8013      	strh	r3, [r2, #0]
 8005e6a:	e018      	b.n	8005e9e <USB_EPStartXfer+0x296>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d114      	bne.n	8005e9e <USB_EPStartXfer+0x296>
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	b29c      	uxth	r4, r3
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	441a      	add	r2, r3
 8005e96:	4b8d      	ldr	r3, [pc, #564]	; (80060cc <USB_EPStartXfer+0x4c4>)
 8005e98:	4323      	orrs	r3, r4
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	b29c      	uxth	r4, r3
 8005eb6:	f084 0310 	eor.w	r3, r4, #16
 8005eba:	b29c      	uxth	r4, r3
 8005ebc:	f084 0320 	eor.w	r3, r4, #32
 8005ec0:	b29c      	uxth	r4, r3
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	4b80      	ldr	r3, [pc, #512]	; (80060d0 <USB_EPStartXfer+0x4c8>)
 8005ece:	4323      	orrs	r3, r4
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
 8005ed4:	e13c      	b.n	8006150 <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d909      	bls.n	8005ef6 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	619a      	str	r2, [r3, #24]
 8005ef4:	e005      	b.n	8005f02 <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	7b1b      	ldrb	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d144      	bne.n	8005f94 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f0a:	687c      	ldr	r4, [r7, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	441c      	add	r4, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4423      	add	r3, r4
 8005f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f22:	623b      	str	r3, [r7, #32]
 8005f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d110      	bne.n	8005f4c <USB_EPStartXfer+0x344>
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	e0e6      	b.n	800611a <USB_EPStartXfer+0x512>
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	2b3d      	cmp	r3, #61	; 0x3d
 8005f50:	d811      	bhi.n	8005f76 <USB_EPStartXfer+0x36e>
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <USB_EPStartXfer+0x360>
 8005f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f64:	3301      	adds	r3, #1
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e0d1      	b.n	800611a <USB_EPStartXfer+0x512>
 8005f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	029b      	lsls	r3, r3, #10
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e0c2      	b.n	800611a <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d144      	bne.n	8006026 <USB_EPStartXfer+0x41e>
 8005f9c:	687c      	ldr	r4, [r7, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	441c      	add	r4, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4423      	add	r3, r4
 8005fb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d110      	bne.n	8005fde <USB_EPStartXfer+0x3d6>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e038      	b.n	8006050 <USB_EPStartXfer+0x448>
 8005fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe0:	2b3d      	cmp	r3, #61	; 0x3d
 8005fe2:	d811      	bhi.n	8006008 <USB_EPStartXfer+0x400>
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe6:	085b      	lsrs	r3, r3, #1
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <USB_EPStartXfer+0x3f2>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	b29a      	uxth	r2, r3
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	801a      	strh	r2, [r3, #0]
 8006006:	e023      	b.n	8006050 <USB_EPStartXfer+0x448>
 8006008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	63bb      	str	r3, [r7, #56]	; 0x38
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e014      	b.n	8006050 <USB_EPStartXfer+0x448>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d110      	bne.n	8006050 <USB_EPStartXfer+0x448>
 800602e:	687c      	ldr	r4, [r7, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006036:	b29b      	uxth	r3, r3
 8006038:	441c      	add	r4, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4423      	add	r3, r4
 8006042:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	b29a      	uxth	r2, r3
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	687c      	ldr	r4, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d14b      	bne.n	80060f2 <USB_EPStartXfer+0x4ea>
 800605a:	687c      	ldr	r4, [r7, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006062:	b29b      	uxth	r3, r3
 8006064:	441c      	add	r4, r3
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4423      	add	r3, r4
 800606e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
 8006074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006076:	2b00      	cmp	r3, #0
 8006078:	d110      	bne.n	800609c <USB_EPStartXfer+0x494>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006082:	b29a      	uxth	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006094:	b29a      	uxth	r2, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e03e      	b.n	800611a <USB_EPStartXfer+0x512>
 800609c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609e:	2b3d      	cmp	r3, #61	; 0x3d
 80060a0:	d818      	bhi.n	80060d4 <USB_EPStartXfer+0x4cc>
 80060a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <USB_EPStartXfer+0x4b0>
 80060b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b4:	3301      	adds	r3, #1
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29a      	uxth	r2, r3
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e029      	b.n	800611a <USB_EPStartXfer+0x512>
 80060c6:	bf00      	nop
 80060c8:	ffff80c0 	.word	0xffff80c0
 80060cc:	ffffc080 	.word	0xffffc080
 80060d0:	ffff8080 	.word	0xffff8080
 80060d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
 80060da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060dc:	b29b      	uxth	r3, r3
 80060de:	029b      	lsls	r3, r3, #10
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e013      	b.n	800611a <USB_EPStartXfer+0x512>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10f      	bne.n	800611a <USB_EPStartXfer+0x512>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	441c      	add	r4, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4423      	add	r3, r4
 800610c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
 8006112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006114:	b29a      	uxth	r2, r3
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	b29c      	uxth	r4, r3
 8006132:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006136:	b29c      	uxth	r4, r3
 8006138:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800613c:	b29c      	uxth	r4, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <USB_EPStartXfer+0x554>)
 800614a:	4323      	orrs	r3, r4
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3754      	adds	r7, #84	; 0x54
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}
 800615a:	bf00      	nop
 800615c:	ffff8080 	.word	0xffff8080

08006160 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006160:	b490      	push	{r4, r7}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006188:	b29c      	uxth	r4, r3
 800618a:	f084 0310 	eor.w	r3, r4, #16
 800618e:	b29c      	uxth	r4, r3
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <USB_EPSetStall+0x80>)
 800619c:	4323      	orrs	r3, r4
 800619e:	b29b      	uxth	r3, r3
 80061a0:	8013      	strh	r3, [r2, #0]
 80061a2:	e017      	b.n	80061d4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ba:	b29c      	uxth	r4, r3
 80061bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80061c0:	b29c      	uxth	r4, r3
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	4b04      	ldr	r3, [pc, #16]	; (80061e0 <USB_EPSetStall+0x80>)
 80061ce:	4323      	orrs	r3, r4
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc90      	pop	{r4, r7}
 80061de:	4770      	bx	lr
 80061e0:	ffff8080 	.word	0xffff8080

080061e4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061e4:	b490      	push	{r4, r7}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	7b1b      	ldrb	r3, [r3, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d17d      	bne.n	80062f2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d03d      	beq.n	800627a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29c      	uxth	r4, r3
 800620c:	4623      	mov	r3, r4
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d014      	beq.n	8006240 <USB_EPClearStall+0x5c>
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	b29c      	uxth	r4, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	4b31      	ldr	r3, [pc, #196]	; (8006300 <USB_EPClearStall+0x11c>)
 800623a:	4323      	orrs	r3, r4
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d054      	beq.n	80062f2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625e:	b29c      	uxth	r4, r3
 8006260:	f084 0320 	eor.w	r3, r4, #32
 8006264:	b29c      	uxth	r4, r3
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	441a      	add	r2, r3
 8006270:	4b24      	ldr	r3, [pc, #144]	; (8006304 <USB_EPClearStall+0x120>)
 8006272:	4323      	orrs	r3, r4
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]
 8006278:	e03b      	b.n	80062f2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29c      	uxth	r4, r3
 8006288:	4623      	mov	r3, r4
 800628a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d014      	beq.n	80062bc <USB_EPClearStall+0xd8>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	b29c      	uxth	r4, r3
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <USB_EPClearStall+0x124>)
 80062b6:	4323      	orrs	r3, r4
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d2:	b29c      	uxth	r4, r3
 80062d4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80062d8:	b29c      	uxth	r4, r3
 80062da:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80062de:	b29c      	uxth	r4, r3
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <USB_EPClearStall+0x120>)
 80062ec:	4323      	orrs	r3, r4
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc90      	pop	{r4, r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	ffff80c0 	.word	0xffff80c0
 8006304:	ffff8080 	.word	0xffff8080
 8006308:	ffffc080 	.word	0xffffc080

0800630c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2280      	movs	r2, #128	; 0x80
 8006322:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006370:	b29b      	uxth	r3, r3
 8006372:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800639a:	b29b      	uxth	r3, r3
 800639c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800639e:	68fb      	ldr	r3, [r7, #12]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b08d      	sub	sp, #52	; 0x34
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4611      	mov	r1, r2
 80063d0:	461a      	mov	r2, r3
 80063d2:	460b      	mov	r3, r1
 80063d4:	80fb      	strh	r3, [r7, #6]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063da:	88bb      	ldrh	r3, [r7, #4]
 80063dc:	3301      	adds	r3, #1
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fa:	e01b      	b.n	8006434 <USB_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pBuf;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	3301      	adds	r3, #1
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	b29a      	uxth	r2, r3
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	3302      	adds	r3, #2
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	3301      	adds	r3, #1
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	3b01      	subs	r3, #1
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e0      	bne.n	80063fc <USB_WritePMA+0x38>
  }
}
 800643a:	bf00      	nop
 800643c:	3734      	adds	r7, #52	; 0x34
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006446:	b480      	push	{r7}
 8006448:	b08b      	sub	sp, #44	; 0x2c
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	4611      	mov	r1, r2
 8006452:	461a      	mov	r2, r3
 8006454:	460b      	mov	r3, r1
 8006456:	80fb      	strh	r3, [r7, #6]
 8006458:	4613      	mov	r3, r2
 800645a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800645c:	88bb      	ldrh	r3, [r7, #4]
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800646c:	88fa      	ldrh	r2, [r7, #6]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006476:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
 800647c:	e017      	b.n	80064ae <USB_ReadPMA+0x68>
  {
    temp = *pdwVal;
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	3302      	adds	r3, #2
 8006488:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3301      	adds	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	0a1b      	lsrs	r3, r3, #8
 800649c:	b2da      	uxtb	r2, r3
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	3301      	adds	r3, #1
 80064a6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	3b01      	subs	r3, #1
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e4      	bne.n	800647e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80064b4:	88bb      	ldrh	r3, [r7, #4]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <USB_ReadPMA+0x88>
  {
    temp = *pdwVal;
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	701a      	strb	r2, [r3, #0]
  }
}
 80064ce:	bf00      	nop
 80064d0:	372c      	adds	r7, #44	; 0x2c
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	7c1b      	ldrb	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d115      	bne.n	800651e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f6:	2202      	movs	r2, #2
 80064f8:	2181      	movs	r1, #129	; 0x81
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fe74 	bl	80081e8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800650a:	2202      	movs	r2, #2
 800650c:	2101      	movs	r1, #1
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fe6a 	bl	80081e8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800651c:	e012      	b.n	8006544 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	2202      	movs	r2, #2
 8006522:	2181      	movs	r1, #129	; 0x81
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fe5f 	bl	80081e8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006530:	2340      	movs	r3, #64	; 0x40
 8006532:	2202      	movs	r2, #2
 8006534:	2101      	movs	r1, #1
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fe56 	bl	80081e8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006544:	2308      	movs	r3, #8
 8006546:	2203      	movs	r2, #3
 8006548:	2182      	movs	r1, #130	; 0x82
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fe4c 	bl	80081e8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006556:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800655a:	f002 f83f 	bl	80085dc <USBD_static_malloc>
 800655e:	4602      	mov	r2, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e026      	b.n	80065c4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800657c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	7c1b      	ldrb	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d109      	bne.n	80065b4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065aa:	2101      	movs	r1, #1
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 ff91 	bl	80084d4 <USBD_LL_PrepareReceive>
 80065b2:	e007      	b.n	80065c4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	2101      	movs	r1, #1
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 ff88 	bl	80084d4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80065de:	2181      	movs	r1, #129	; 0x81
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fe3f 	bl	8008264 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065ec:	2101      	movs	r1, #1
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fe38 	bl	8008264 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065fc:	2182      	movs	r1, #130	; 0x82
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fe30 	bl	8008264 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006624:	4618      	mov	r0, r3
 8006626:	f001 ffe7 	bl	80085f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800664c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006662:	2b00      	cmp	r3, #0
 8006664:	d039      	beq.n	80066da <USBD_CDC_Setup+0x9e>
 8006666:	2b20      	cmp	r3, #32
 8006668:	d17c      	bne.n	8006764 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d029      	beq.n	80066c6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b25b      	sxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	da11      	bge.n	80066a0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006688:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	88d2      	ldrh	r2, [r2, #6]
 800668e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006690:	6939      	ldr	r1, [r7, #16]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	88db      	ldrh	r3, [r3, #6]
 8006696:	461a      	mov	r2, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f9a7 	bl	80079ec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800669e:	e068      	b.n	8006772 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785a      	ldrb	r2, [r3, #1]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	88db      	ldrh	r3, [r3, #6]
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80066b6:	6939      	ldr	r1, [r7, #16]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	88db      	ldrh	r3, [r3, #6]
 80066bc:	461a      	mov	r2, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f9c2 	bl	8007a48 <USBD_CtlPrepareRx>
    break;
 80066c4:	e055      	b.n	8006772 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	7850      	ldrb	r0, [r2, #1]
 80066d2:	2200      	movs	r2, #0
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	4798      	blx	r3
    break;
 80066d8:	e04b      	b.n	8006772 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b0a      	cmp	r3, #10
 80066e0:	d017      	beq.n	8006712 <USBD_CDC_Setup+0xd6>
 80066e2:	2b0b      	cmp	r3, #11
 80066e4:	d029      	beq.n	800673a <USBD_CDC_Setup+0xfe>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d133      	bne.n	8006752 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d107      	bne.n	8006704 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80066f4:	f107 030c 	add.w	r3, r7, #12
 80066f8:	2202      	movs	r2, #2
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f975 	bl	80079ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006702:	e02e      	b.n	8006762 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 f905 	bl	8007916 <USBD_CtlError>
			  ret = USBD_FAIL;
 800670c:	2302      	movs	r3, #2
 800670e:	75fb      	strb	r3, [r7, #23]
      break;
 8006710:	e027      	b.n	8006762 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006718:	2b03      	cmp	r3, #3
 800671a:	d107      	bne.n	800672c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800671c:	f107 030f 	add.w	r3, r7, #15
 8006720:	2201      	movs	r2, #1
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f961 	bl	80079ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800672a:	e01a      	b.n	8006762 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 f8f1 	bl	8007916 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006734:	2302      	movs	r3, #2
 8006736:	75fb      	strb	r3, [r7, #23]
      break;
 8006738:	e013      	b.n	8006762 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006740:	2b03      	cmp	r3, #3
 8006742:	d00d      	beq.n	8006760 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 f8e5 	bl	8007916 <USBD_CtlError>
			  ret = USBD_FAIL;
 800674c:	2302      	movs	r3, #2
 800674e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006750:	e006      	b.n	8006760 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f8de 	bl	8007916 <USBD_CtlError>
      ret = USBD_FAIL;
 800675a:	2302      	movs	r3, #2
 800675c:	75fb      	strb	r3, [r7, #23]
      break;
 800675e:	e000      	b.n	8006762 <USBD_CDC_Setup+0x126>
      break;
 8006760:	bf00      	nop
    }
    break;
 8006762:	e006      	b.n	8006772 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 f8d5 	bl	8007916 <USBD_CtlError>
    ret = USBD_FAIL;
 800676c:	2302      	movs	r3, #2
 800676e:	75fb      	strb	r3, [r7, #23]
    break;
 8006770:	bf00      	nop
  }

  return ret;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800678e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006796:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d037      	beq.n	8006812 <USBD_CDC_DataIn+0x96>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	331c      	adds	r3, #28
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d026      	beq.n	8006806 <USBD_CDC_DataIn+0x8a>
 80067b8:	78fa      	ldrb	r2, [r7, #3]
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	331c      	adds	r3, #28
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	78fa      	ldrb	r2, [r7, #3]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	0152      	lsls	r2, r2, #5
 80067d0:	440a      	add	r2, r1
 80067d2:	3238      	adds	r2, #56	; 0x38
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80067da:	fb02 f201 	mul.w	r2, r2, r1
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d110      	bne.n	8006806 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	331c      	adds	r3, #28
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80067f8:	78f9      	ldrb	r1, [r7, #3]
 80067fa:	2300      	movs	r3, #0
 80067fc:	2200      	movs	r2, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fe2e 	bl	8008460 <USBD_LL_Transmit>
 8006804:	e003      	b.n	800680e <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe87 	bl	8008548 <USBD_LL_GetRxDataSize>
 800683a:	4602      	mov	r2, r0
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00d      	beq.n	8006868 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006860:	4611      	mov	r1, r2
 8006862:	4798      	blx	r3

    return USBD_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006868:	2302      	movs	r3, #2
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006880:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006888:	2b00      	cmp	r3, #0
 800688a:	d015      	beq.n	80068b8 <USBD_CDC_EP0_RxReady+0x46>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006892:	2bff      	cmp	r3, #255	; 0xff
 8006894:	d010      	beq.n	80068b8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80068a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068ac:	b292      	uxth	r2, r2
 80068ae:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2243      	movs	r2, #67	; 0x43
 80068d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80068d2:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	200000b4 	.word	0x200000b4

080068e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2243      	movs	r2, #67	; 0x43
 80068f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20000070 	.word	0x20000070

08006904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2243      	movs	r2, #67	; 0x43
 8006910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006912:	4b03      	ldr	r3, [pc, #12]	; (8006920 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200000f8 	.word	0x200000f8

08006924 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	220a      	movs	r2, #10
 8006930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	2000002c 	.word	0x2000002c

08006944 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800694e:	2302      	movs	r3, #2
 8006950:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	4613      	mov	r3, r2
 800697e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006986:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006990:	88fa      	ldrh	r2, [r7, #6]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069b6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069dc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01c      	beq.n	8006a22 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d115      	bne.n	8006a1e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2181      	movs	r1, #129	; 0x81
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fd23 	bl	8008460 <USBD_LL_Transmit>

      return USBD_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e002      	b.n	8006a24 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006a22:	2302      	movs	r3, #2
  }
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	7c1b      	ldrb	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d109      	bne.n	8006a62 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a58:	2101      	movs	r1, #1
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 fd3a 	bl	80084d4 <USBD_LL_PrepareReceive>
 8006a60:	e007      	b.n	8006a72 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fd31 	bl	80084d4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	e000      	b.n	8006a78 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006a76:	2302      	movs	r3, #2
  }
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a94:	2302      	movs	r3, #2
 8006a96:	e01a      	b.n	8006ace <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	79fa      	ldrb	r2, [r7, #7]
 8006ac4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f001 fafa 	bl	80080c0 <USBD_LL_Init>

  return USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	73fb      	strb	r3, [r7, #15]
 8006af6:	e001      	b.n	8006afc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006af8:	2302      	movs	r3, #2
 8006afa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fb36 	bl	8008184 <USBD_LL_Start>

  return USBD_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00c      	beq.n	8006b6c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	460b      	mov	r3, r1
 8006b80:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fe74 	bl	800789c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d00c      	beq.n	8006bf2 <USBD_LL_SetupStage+0x56>
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d302      	bcc.n	8006be2 <USBD_LL_SetupStage+0x46>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d010      	beq.n	8006c02 <USBD_LL_SetupStage+0x66>
 8006be0:	e017      	b.n	8006c12 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9c8 	bl	8006f80 <USBD_StdDevReq>
    break;
 8006bf0:	e01a      	b.n	8006c28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa2a 	bl	8007054 <USBD_StdItfReq>
    break;
 8006c00:	e012      	b.n	8006c28 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa68 	bl	80070e0 <USBD_StdEPReq>
    break;
 8006c10:	e00a      	b.n	8006c28 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006c18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fb55 	bl	80082d0 <USBD_LL_StallEP>
    break;
 8006c26:	bf00      	nop
  }

  return USBD_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d14b      	bne.n	8006cde <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c4c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d134      	bne.n	8006cc2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d919      	bls.n	8006c98 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	1ad2      	subs	r2, r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d203      	bcs.n	8006c86 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	e002      	b.n	8006c8c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fef7 	bl	8007a84 <USBD_CtlContinueRx>
 8006c96:	e038      	b.n	8006d0a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d105      	bne.n	8006cba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fef4 	bl	8007aa8 <USBD_CtlSendStatus>
 8006cc0:	e023      	b.n	8006d0a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d11e      	bne.n	8006d0a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f001 fafa 	bl	80082d0 <USBD_LL_StallEP>
 8006cdc:	e015      	b.n	8006d0a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00d      	beq.n	8006d06 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d108      	bne.n	8006d06 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	7afa      	ldrb	r2, [r7, #11]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	4798      	blx	r3
 8006d04:	e001      	b.n	8006d0a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d06:	2302      	movs	r3, #2
 8006d08:	e000      	b.n	8006d0c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d17f      	bne.n	8006e28 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3314      	adds	r3, #20
 8006d2c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d15c      	bne.n	8006df2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d915      	bls.n	8006d70 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fe61 	bl	8007a24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006d62:	2300      	movs	r3, #0
 8006d64:	2200      	movs	r2, #0
 8006d66:	2100      	movs	r1, #0
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f001 fbb3 	bl	80084d4 <USBD_LL_PrepareReceive>
 8006d6e:	e04e      	b.n	8006e0e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	6912      	ldr	r2, [r2, #16]
 8006d78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d7c:	fb02 f201 	mul.w	r2, r2, r1
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d11c      	bne.n	8006dc0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d316      	bcc.n	8006dc0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d20f      	bcs.n	8006dc0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006da0:	2200      	movs	r2, #0
 8006da2:	2100      	movs	r1, #0
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fe3d 	bl	8007a24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006db2:	2300      	movs	r3, #0
 8006db4:	2200      	movs	r2, #0
 8006db6:	2100      	movs	r1, #0
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f001 fb8b 	bl	80084d4 <USBD_LL_PrepareReceive>
 8006dbe:	e026      	b.n	8006e0e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d105      	bne.n	8006de2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f001 fa73 	bl	80082d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fe6f 	bl	8007ace <USBD_CtlReceiveStatus>
 8006df0:	e00d      	b.n	8006e0e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d004      	beq.n	8006e06 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fa61 	bl	80082d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d11d      	bne.n	8006e54 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff fe82 	bl	8006b22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006e26:	e015      	b.n	8006e54 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d108      	bne.n	8006e50 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	7afa      	ldrb	r2, [r7, #11]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	4798      	blx	r3
 8006e4e:	e001      	b.n	8006e54 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	e000      	b.n	8006e56 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e66:	2340      	movs	r3, #64	; 0x40
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f9bb 	bl	80081e8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2240      	movs	r2, #64	; 0x40
 8006e7e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e82:	2340      	movs	r3, #64	; 0x40
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f9ad 	bl	80081e8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6852      	ldr	r2, [r2, #4]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	4611      	mov	r1, r2
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	78fa      	ldrb	r2, [r7, #3]
 8006ef0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2204      	movs	r2, #4
 8006f18:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d10b      	bne.n	8006f76 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d004      	beq.n	8006fa4 <USBD_StdDevReq+0x24>
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d002      	beq.n	8006fa4 <USBD_StdDevReq+0x24>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <USBD_StdDevReq+0x34>
 8006fa2:	e04c      	b.n	800703e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
    break;
 8006fb2:	e049      	b.n	8007048 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b09      	cmp	r3, #9
 8006fba:	d83a      	bhi.n	8007032 <USBD_StdDevReq+0xb2>
 8006fbc:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <USBD_StdDevReq+0x44>)
 8006fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc2:	bf00      	nop
 8006fc4:	08007015 	.word	0x08007015
 8006fc8:	08007029 	.word	0x08007029
 8006fcc:	08007033 	.word	0x08007033
 8006fd0:	0800701f 	.word	0x0800701f
 8006fd4:	08007033 	.word	0x08007033
 8006fd8:	08006ff7 	.word	0x08006ff7
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08007033 	.word	0x08007033
 8006fe4:	0800700b 	.word	0x0800700b
 8006fe8:	08007001 	.word	0x08007001
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f9d2 	bl	8007398 <USBD_GetDescriptor>
      break;
 8006ff4:	e022      	b.n	800703c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fae3 	bl	80075c4 <USBD_SetAddress>
      break;
 8006ffe:	e01d      	b.n	800703c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb20 	bl	8007648 <USBD_SetConfig>
      break;
 8007008:	e018      	b.n	800703c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fba9 	bl	8007764 <USBD_GetConfig>
      break;
 8007012:	e013      	b.n	800703c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fbd8 	bl	80077cc <USBD_GetStatus>
      break;
 800701c:	e00e      	b.n	800703c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc06 	bl	8007832 <USBD_SetFeature>
      break;
 8007026:	e009      	b.n	800703c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc15 	bl	800785a <USBD_ClrFeature>
      break;
 8007030:	e004      	b.n	800703c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc6e 	bl	8007916 <USBD_CtlError>
      break;
 800703a:	bf00      	nop
    }
    break;
 800703c:	e004      	b.n	8007048 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc68 	bl	8007916 <USBD_CtlError>
    break;
 8007046:	bf00      	nop
  }

  return ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800706a:	2b20      	cmp	r3, #32
 800706c:	d003      	beq.n	8007076 <USBD_StdItfReq+0x22>
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d001      	beq.n	8007076 <USBD_StdItfReq+0x22>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d12a      	bne.n	80070cc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800707c:	3b01      	subs	r3, #1
 800707e:	2b02      	cmp	r3, #2
 8007080:	d81d      	bhi.n	80070be <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	889b      	ldrh	r3, [r3, #4]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	d813      	bhi.n	80070b4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
 800709a:	4603      	mov	r3, r0
 800709c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	88db      	ldrh	r3, [r3, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d110      	bne.n	80070c8 <USBD_StdItfReq+0x74>
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10d      	bne.n	80070c8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fcfb 	bl	8007aa8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80070b2:	e009      	b.n	80070c8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc2d 	bl	8007916 <USBD_CtlError>
      break;
 80070bc:	e004      	b.n	80070c8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fc28 	bl	8007916 <USBD_CtlError>
      break;
 80070c6:	e000      	b.n	80070ca <USBD_StdItfReq+0x76>
      break;
 80070c8:	bf00      	nop
    }
    break;
 80070ca:	e004      	b.n	80070d6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc21 	bl	8007916 <USBD_CtlError>
    break;
 80070d4:	bf00      	nop
  }

  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d004      	beq.n	800710a <USBD_StdEPReq+0x2a>
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d002      	beq.n	800710a <USBD_StdEPReq+0x2a>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <USBD_StdEPReq+0x3a>
 8007108:	e13b      	b.n	8007382 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
    break;
 8007118:	e138      	b.n	800738c <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007122:	2b20      	cmp	r3, #32
 8007124:	d10a      	bne.n	800713c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	4798      	blx	r3
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	e128      	b.n	800738e <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d03e      	beq.n	80071c2 <USBD_StdEPReq+0xe2>
 8007144:	2b03      	cmp	r3, #3
 8007146:	d002      	beq.n	800714e <USBD_StdEPReq+0x6e>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d070      	beq.n	800722e <USBD_StdEPReq+0x14e>
 800714c:	e113      	b.n	8007376 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007154:	2b02      	cmp	r3, #2
 8007156:	d002      	beq.n	800715e <USBD_StdEPReq+0x7e>
 8007158:	2b03      	cmp	r3, #3
 800715a:	d015      	beq.n	8007188 <USBD_StdEPReq+0xa8>
 800715c:	e02b      	b.n	80071b6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00c      	beq.n	800717e <USBD_StdEPReq+0x9e>
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b80      	cmp	r3, #128	; 0x80
 8007168:	d009      	beq.n	800717e <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 f8ae 	bl	80082d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 f8aa 	bl	80082d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800717c:	e020      	b.n	80071c0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fbc8 	bl	8007916 <USBD_CtlError>
        break;
 8007186:	e01b      	b.n	80071c0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	885b      	ldrh	r3, [r3, #2]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10e      	bne.n	80071ae <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <USBD_StdEPReq+0xce>
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d008      	beq.n	80071ae <USBD_StdEPReq+0xce>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f891 	bl	80082d0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fc7a 	bl	8007aa8 <USBD_CtlSendStatus>

        break;
 80071b4:	e004      	b.n	80071c0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbac 	bl	8007916 <USBD_CtlError>
        break;
 80071be:	bf00      	nop
      }
      break;
 80071c0:	e0de      	b.n	8007380 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d002      	beq.n	80071d2 <USBD_StdEPReq+0xf2>
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d015      	beq.n	80071fc <USBD_StdEPReq+0x11c>
 80071d0:	e026      	b.n	8007220 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00c      	beq.n	80071f2 <USBD_StdEPReq+0x112>
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	d009      	beq.n	80071f2 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80071de:	7bbb      	ldrb	r3, [r7, #14]
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f874 	bl	80082d0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80071e8:	2180      	movs	r1, #128	; 0x80
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 f870 	bl	80082d0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80071f0:	e01c      	b.n	800722c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fb8e 	bl	8007916 <USBD_CtlError>
        break;
 80071fa:	e017      	b.n	800722c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	885b      	ldrh	r3, [r3, #2]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d112      	bne.n	800722a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 f892 	bl	800833c <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc45 	bl	8007aa8 <USBD_CtlSendStatus>
        }
        break;
 800721e:	e004      	b.n	800722a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb77 	bl	8007916 <USBD_CtlError>
        break;
 8007228:	e000      	b.n	800722c <USBD_StdEPReq+0x14c>
        break;
 800722a:	bf00      	nop
      }
      break;
 800722c:	e0a8      	b.n	8007380 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007234:	2b02      	cmp	r3, #2
 8007236:	d002      	beq.n	800723e <USBD_StdEPReq+0x15e>
 8007238:	2b03      	cmp	r3, #3
 800723a:	d031      	beq.n	80072a0 <USBD_StdEPReq+0x1c0>
 800723c:	e095      	b.n	800736a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <USBD_StdEPReq+0x174>
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d004      	beq.n	8007254 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fb62 	bl	8007916 <USBD_CtlError>
          break;
 8007252:	e08f      	b.n	8007374 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007258:	2b00      	cmp	r3, #0
 800725a:	da0b      	bge.n	8007274 <USBD_StdEPReq+0x194>
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	3310      	adds	r3, #16
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	3304      	adds	r3, #4
 8007272:	e00a      	b.n	800728a <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4413      	add	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2202      	movs	r2, #2
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fba7 	bl	80079ec <USBD_CtlSendData>
          break;
 800729e:	e069      	b.n	8007374 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80072a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da11      	bge.n	80072cc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	f003 020f 	and.w	r2, r3, #15
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	3318      	adds	r3, #24
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d117      	bne.n	80072f2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fb26 	bl	8007916 <USBD_CtlError>
            break;
 80072ca:	e053      	b.n	8007374 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fb13 	bl	8007916 <USBD_CtlError>
            break;
 80072f0:	e040      	b.n	8007374 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80072f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	da0b      	bge.n	8007312 <USBD_StdEPReq+0x232>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	3310      	adds	r3, #16
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	4413      	add	r3, r2
 800730e:	3304      	adds	r3, #4
 8007310:	e00a      	b.n	8007328 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	4413      	add	r3, r2
 8007328:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <USBD_StdEPReq+0x256>
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d103      	bne.n	800733e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e00e      	b.n	800735c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 f830 	bl	80083a8 <USBD_LL_IsStallEP>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	e002      	b.n	800735c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2202      	movs	r2, #2
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb42 	bl	80079ec <USBD_CtlSendData>
          break;
 8007368:	e004      	b.n	8007374 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fad2 	bl	8007916 <USBD_CtlError>
        break;
 8007372:	bf00      	nop
      }
      break;
 8007374:	e004      	b.n	8007380 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 facc 	bl	8007916 <USBD_CtlError>
      break;
 800737e:	bf00      	nop
    }
    break;
 8007380:	e004      	b.n	800738c <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fac6 	bl	8007916 <USBD_CtlError>
    break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	0a1b      	lsrs	r3, r3, #8
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	2b0e      	cmp	r3, #14
 80073ae:	f200 80e5 	bhi.w	800757c <USBD_GetDescriptor+0x1e4>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <USBD_GetDescriptor+0x20>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007425 	.word	0x08007425
 80073c0:	08007465 	.word	0x08007465
 80073c4:	0800757d 	.word	0x0800757d
 80073c8:	0800757d 	.word	0x0800757d
 80073cc:	08007529 	.word	0x08007529
 80073d0:	0800754f 	.word	0x0800754f
 80073d4:	0800757d 	.word	0x0800757d
 80073d8:	0800757d 	.word	0x0800757d
 80073dc:	0800757d 	.word	0x0800757d
 80073e0:	0800757d 	.word	0x0800757d
 80073e4:	0800757d 	.word	0x0800757d
 80073e8:	0800757d 	.word	0x0800757d
 80073ec:	0800757d 	.word	0x0800757d
 80073f0:	080073f5 	.word	0x080073f5
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 010a 	add.w	r1, r7, #10
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
    break;
 800740a:	e0bc      	b.n	8007586 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7c12      	ldrb	r2, [r2, #16]
 8007418:	f107 010a 	add.w	r1, r7, #10
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
    break;
 8007422:	e0b0      	b.n	8007586 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7c1b      	ldrb	r3, [r3, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10d      	bne.n	8007448 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	f107 020a 	add.w	r2, r7, #10
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	2202      	movs	r2, #2
 8007444:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007446:	e09e      	b.n	8007586 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	f107 020a 	add.w	r2, r7, #10
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	2202      	movs	r2, #2
 8007460:	701a      	strb	r2, [r3, #0]
    break;
 8007462:	e090      	b.n	8007586 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	885b      	ldrh	r3, [r3, #2]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b05      	cmp	r3, #5
 800746c:	d856      	bhi.n	800751c <USBD_GetDescriptor+0x184>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <USBD_GetDescriptor+0xdc>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	0800748d 	.word	0x0800748d
 8007478:	080074a5 	.word	0x080074a5
 800747c:	080074bd 	.word	0x080074bd
 8007480:	080074d5 	.word	0x080074d5
 8007484:	080074ed 	.word	0x080074ed
 8007488:	08007505 	.word	0x08007505
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	7c12      	ldrb	r2, [r2, #16]
 8007498:	f107 010a 	add.w	r1, r7, #10
 800749c:	4610      	mov	r0, r2
 800749e:	4798      	blx	r3
 80074a0:	60f8      	str	r0, [r7, #12]
      break;
 80074a2:	e040      	b.n	8007526 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 010a 	add.w	r1, r7, #10
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
      break;
 80074ba:	e034      	b.n	8007526 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	7c12      	ldrb	r2, [r2, #16]
 80074c8:	f107 010a 	add.w	r1, r7, #10
 80074cc:	4610      	mov	r0, r2
 80074ce:	4798      	blx	r3
 80074d0:	60f8      	str	r0, [r7, #12]
      break;
 80074d2:	e028      	b.n	8007526 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 010a 	add.w	r1, r7, #10
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
      break;
 80074ea:	e01c      	b.n	8007526 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 010a 	add.w	r1, r7, #10
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
      break;
 8007502:	e010      	b.n	8007526 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	7c12      	ldrb	r2, [r2, #16]
 8007510:	f107 010a 	add.w	r1, r7, #10
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
      break;
 800751a:	e004      	b.n	8007526 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9f9 	bl	8007916 <USBD_CtlError>
      return;
 8007524:	e04b      	b.n	80075be <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8007526:	e02e      	b.n	8007586 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	7c1b      	ldrb	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d109      	bne.n	8007544 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007538:	f107 020a 	add.w	r2, r7, #10
 800753c:	4610      	mov	r0, r2
 800753e:	4798      	blx	r3
 8007540:	60f8      	str	r0, [r7, #12]
      break;
 8007542:	e020      	b.n	8007586 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f9e5 	bl	8007916 <USBD_CtlError>
      return;
 800754c:	e037      	b.n	80075be <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10d      	bne.n	8007572 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	f107 020a 	add.w	r2, r7, #10
 8007562:	4610      	mov	r0, r2
 8007564:	4798      	blx	r3
 8007566:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	2207      	movs	r2, #7
 800756e:	701a      	strb	r2, [r3, #0]
      break;
 8007570:	e009      	b.n	8007586 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f9ce 	bl	8007916 <USBD_CtlError>
      return;
 800757a:	e020      	b.n	80075be <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9c9 	bl	8007916 <USBD_CtlError>
    return;
 8007584:	e01b      	b.n	80075be <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007586:	897b      	ldrh	r3, [r7, #10]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <USBD_GetDescriptor+0x218>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	88db      	ldrh	r3, [r3, #6]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	88da      	ldrh	r2, [r3, #6]
 8007598:	897b      	ldrh	r3, [r7, #10]
 800759a:	4293      	cmp	r3, r2
 800759c:	bf28      	it	cs
 800759e:	4613      	movcs	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80075a4:	897b      	ldrh	r3, [r7, #10]
 80075a6:	461a      	mov	r2, r3
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa1e 	bl	80079ec <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	88db      	ldrh	r3, [r3, #6]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d102      	bne.n	80075be <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa75 	bl	8007aa8 <USBD_CtlSendStatus>
  }
}
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	889b      	ldrh	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d130      	bne.n	8007638 <USBD_SetAddress+0x74>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d12c      	bne.n	8007638 <USBD_SetAddress+0x74>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	2b7f      	cmp	r3, #127	; 0x7f
 80075e4:	d828      	bhi.n	8007638 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d104      	bne.n	8007606 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f989 	bl	8007916 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007604:	e01c      	b.n	8007640 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7bfa      	ldrb	r2, [r7, #15]
 800760a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 feee 	bl	80083f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa45 	bl	8007aa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762c:	e008      	b.n	8007640 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	e003      	b.n	8007640 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f96b 	bl	8007916 <USBD_CtlError>
  }
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	885b      	ldrh	r3, [r3, #2]
 8007656:	b2da      	uxtb	r2, r3
 8007658:	4b41      	ldr	r3, [pc, #260]	; (8007760 <USBD_SetConfig+0x118>)
 800765a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800765c:	4b40      	ldr	r3, [pc, #256]	; (8007760 <USBD_SetConfig+0x118>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d904      	bls.n	800766e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f955 	bl	8007916 <USBD_CtlError>
 800766c:	e075      	b.n	800775a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007674:	2b02      	cmp	r3, #2
 8007676:	d002      	beq.n	800767e <USBD_SetConfig+0x36>
 8007678:	2b03      	cmp	r3, #3
 800767a:	d023      	beq.n	80076c4 <USBD_SetConfig+0x7c>
 800767c:	e062      	b.n	8007744 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800767e:	4b38      	ldr	r3, [pc, #224]	; (8007760 <USBD_SetConfig+0x118>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d01a      	beq.n	80076bc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8007686:	4b36      	ldr	r3, [pc, #216]	; (8007760 <USBD_SetConfig+0x118>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2203      	movs	r2, #3
 8007694:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <USBD_SetConfig+0x118>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff fa4a 	bl	8006b38 <USBD_SetClassConfig>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d104      	bne.n	80076b4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f932 	bl	8007916 <USBD_CtlError>
          return;
 80076b2:	e052      	b.n	800775a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f9f7 	bl	8007aa8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80076ba:	e04e      	b.n	800775a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9f3 	bl	8007aa8 <USBD_CtlSendStatus>
      break;
 80076c2:	e04a      	b.n	800775a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076c4:	4b26      	ldr	r3, [pc, #152]	; (8007760 <USBD_SetConfig+0x118>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d112      	bne.n	80076f2 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80076d4:	4b22      	ldr	r3, [pc, #136]	; (8007760 <USBD_SetConfig+0x118>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80076de:	4b20      	ldr	r3, [pc, #128]	; (8007760 <USBD_SetConfig+0x118>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fa46 	bl	8006b76 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9dc 	bl	8007aa8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80076f0:	e033      	b.n	800775a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80076f2:	4b1b      	ldr	r3, [pc, #108]	; (8007760 <USBD_SetConfig+0x118>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d01d      	beq.n	800773c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7ff fa34 	bl	8006b76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800770e:	4b14      	ldr	r3, [pc, #80]	; (8007760 <USBD_SetConfig+0x118>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007718:	4b11      	ldr	r3, [pc, #68]	; (8007760 <USBD_SetConfig+0x118>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fa0a 	bl	8006b38 <USBD_SetClassConfig>
 8007724:	4603      	mov	r3, r0
 8007726:	2b02      	cmp	r3, #2
 8007728:	d104      	bne.n	8007734 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8f2 	bl	8007916 <USBD_CtlError>
          return;
 8007732:	e012      	b.n	800775a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f9b7 	bl	8007aa8 <USBD_CtlSendStatus>
      break;
 800773a:	e00e      	b.n	800775a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9b3 	bl	8007aa8 <USBD_CtlSendStatus>
      break;
 8007742:	e00a      	b.n	800775a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f8e5 	bl	8007916 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <USBD_SetConfig+0x118>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fa0f 	bl	8006b76 <USBD_ClrClassConfig>
      break;
 8007758:	bf00      	nop
    }
  }
}
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000638 	.word	0x20000638

08007764 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d004      	beq.n	8007780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8cc 	bl	8007916 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800777e:	e021      	b.n	80077c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007786:	2b01      	cmp	r3, #1
 8007788:	db17      	blt.n	80077ba <USBD_GetConfig+0x56>
 800778a:	2b02      	cmp	r3, #2
 800778c:	dd02      	ble.n	8007794 <USBD_GetConfig+0x30>
 800778e:	2b03      	cmp	r3, #3
 8007790:	d00b      	beq.n	80077aa <USBD_GetConfig+0x46>
 8007792:	e012      	b.n	80077ba <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3308      	adds	r3, #8
 800779e:	2201      	movs	r2, #1
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f922 	bl	80079ec <USBD_CtlSendData>
      break;
 80077a8:	e00c      	b.n	80077c4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3304      	adds	r3, #4
 80077ae:	2201      	movs	r2, #1
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f91a 	bl	80079ec <USBD_CtlSendData>
      break;
 80077b8:	e004      	b.n	80077c4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8aa 	bl	8007916 <USBD_CtlError>
      break;
 80077c2:	bf00      	nop
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077dc:	3b01      	subs	r3, #1
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d81e      	bhi.n	8007820 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d004      	beq.n	80077f4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f892 	bl	8007916 <USBD_CtlError>
      break;
 80077f2:	e01a      	b.n	800782a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f043 0202 	orr.w	r2, r3, #2
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	330c      	adds	r3, #12
 8007814:	2202      	movs	r2, #2
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8e7 	bl	80079ec <USBD_CtlSendData>
    break;
 800781e:	e004      	b.n	800782a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f877 	bl	8007916 <USBD_CtlError>
    break;
 8007828:	bf00      	nop
  }
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	885b      	ldrh	r3, [r3, #2]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d106      	bne.n	8007852 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f92b 	bl	8007aa8 <USBD_CtlSendStatus>
  }

}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800786a:	3b01      	subs	r3, #1
 800786c:	2b02      	cmp	r3, #2
 800786e:	d80b      	bhi.n	8007888 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d10c      	bne.n	8007892 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f911 	bl	8007aa8 <USBD_CtlSendStatus>
    }
    break;
 8007886:	e004      	b.n	8007892 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f843 	bl	8007916 <USBD_CtlError>
    break;
 8007890:	e000      	b.n	8007894 <USBD_ClrFeature+0x3a>
    break;
 8007892:	bf00      	nop
  }
}
 8007894:	bf00      	nop
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	785a      	ldrb	r2, [r3, #1]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	3302      	adds	r3, #2
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b29a      	uxth	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	3303      	adds	r3, #3
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	3304      	adds	r3, #4
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3305      	adds	r3, #5
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4413      	add	r3, r2
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	3306      	adds	r3, #6
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3307      	adds	r3, #7
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	4413      	add	r3, r2
 8007904:	b29a      	uxth	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	80da      	strh	r2, [r3, #6]

}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007920:	2180      	movs	r1, #128	; 0x80
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fcd4 	bl	80082d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007928:	2100      	movs	r1, #0
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fcd0 	bl	80082d0 <USBD_LL_StallEP>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d032      	beq.n	80079b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 f834 	bl	80079bc <USBD_GetLen>
 8007954:	4603      	mov	r3, r0
 8007956:	3301      	adds	r3, #1
 8007958:	b29b      	uxth	r3, r3
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	75fa      	strb	r2, [r7, #23]
 8007968:	461a      	mov	r2, r3
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	75fa      	strb	r2, [r7, #23]
 800797a:	461a      	mov	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4413      	add	r3, r2
 8007980:	2203      	movs	r2, #3
 8007982:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007984:	e012      	b.n	80079ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	60fa      	str	r2, [r7, #12]
 800798c:	7dfa      	ldrb	r2, [r7, #23]
 800798e:	1c51      	adds	r1, r2, #1
 8007990:	75f9      	strb	r1, [r7, #23]
 8007992:	4611      	mov	r1, r2
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	440a      	add	r2, r1
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	75fa      	strb	r2, [r7, #23]
 80079a2:	461a      	mov	r2, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4413      	add	r3, r2
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e8      	bne.n	8007986 <USBD_GetString+0x4e>
    }
  }
}
 80079b4:	bf00      	nop
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80079c8:	e005      	b.n	80079d6 <USBD_GetLen+0x1a>
    {
        len++;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	3301      	adds	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
        buf++;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3301      	adds	r3, #1
 80079d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f5      	bne.n	80079ca <USBD_GetLen+0xe>
    }

    return len;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	2100      	movs	r1, #0
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fd23 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	2100      	movs	r1, #0
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fd11 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007a5e:	88fa      	ldrh	r2, [r7, #6]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007a66:	88fa      	ldrh	r2, [r7, #6]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007a6e:	88fb      	ldrh	r3, [r7, #6]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	2100      	movs	r1, #0
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 fd2d 	bl	80084d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	2100      	movs	r1, #0
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 fd1b 	bl	80084d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2200      	movs	r2, #0
 8007abc:	2100      	movs	r1, #0
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fcce 	bl	8008460 <USBD_LL_Transmit>

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fcf5 	bl	80084d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007af8:	2200      	movs	r2, #0
 8007afa:	4912      	ldr	r1, [pc, #72]	; (8007b44 <MX_USB_DEVICE_Init+0x50>)
 8007afc:	4812      	ldr	r0, [pc, #72]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007afe:	f7fe ffbf 	bl	8006a80 <USBD_Init>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b08:	f7f9 fa90 	bl	800102c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b0c:	490f      	ldr	r1, [pc, #60]	; (8007b4c <MX_USB_DEVICE_Init+0x58>)
 8007b0e:	480e      	ldr	r0, [pc, #56]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b10:	f7fe ffe1 	bl	8006ad6 <USBD_RegisterClass>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b1a:	f7f9 fa87 	bl	800102c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b1e:	490c      	ldr	r1, [pc, #48]	; (8007b50 <MX_USB_DEVICE_Init+0x5c>)
 8007b20:	4809      	ldr	r0, [pc, #36]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b22:	f7fe ff0f 	bl	8006944 <USBD_CDC_RegisterInterface>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b2c:	f7f9 fa7e 	bl	800102c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b30:	4805      	ldr	r0, [pc, #20]	; (8007b48 <MX_USB_DEVICE_Init+0x54>)
 8007b32:	f7fe ffea 	bl	8006b0a <USBD_Start>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b3c:	f7f9 fa76 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b40:	bf00      	nop
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	2000014c 	.word	0x2000014c
 8007b48:	20000934 	.word	0x20000934
 8007b4c:	20000038 	.word	0x20000038
 8007b50:	2000013c 	.word	0x2000013c

08007b54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4905      	ldr	r1, [pc, #20]	; (8007b70 <CDC_Init_FS+0x1c>)
 8007b5c:	4805      	ldr	r0, [pc, #20]	; (8007b74 <CDC_Init_FS+0x20>)
 8007b5e:	f7fe ff08 	bl	8006972 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b62:	4905      	ldr	r1, [pc, #20]	; (8007b78 <CDC_Init_FS+0x24>)
 8007b64:	4803      	ldr	r0, [pc, #12]	; (8007b74 <CDC_Init_FS+0x20>)
 8007b66:	f7fe ff1e 	bl	80069a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000fb8 	.word	0x20000fb8
 8007b74:	20000934 	.word	0x20000934
 8007b78:	20000bd0 	.word	0x20000bd0

08007b7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	4603      	mov	r3, r0
 8007b94:	6039      	str	r1, [r7, #0]
 8007b96:	71fb      	strb	r3, [r7, #7]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b23      	cmp	r3, #35	; 0x23
 8007ba0:	d84a      	bhi.n	8007c38 <CDC_Control_FS+0xac>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <CDC_Control_FS+0x1c>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c39 	.word	0x08007c39
 8007bb0:	08007c39 	.word	0x08007c39
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007c39 	.word	0x08007c39
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c39 	.word	0x08007c39
 8007bc4:	08007c39 	.word	0x08007c39
 8007bc8:	08007c39 	.word	0x08007c39
 8007bcc:	08007c39 	.word	0x08007c39
 8007bd0:	08007c39 	.word	0x08007c39
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007c39 	.word	0x08007c39
 8007bdc:	08007c39 	.word	0x08007c39
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007c39 	.word	0x08007c39
 8007bec:	08007c39 	.word	0x08007c39
 8007bf0:	08007c39 	.word	0x08007c39
 8007bf4:	08007c39 	.word	0x08007c39
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c39 	.word	0x08007c39
 8007c00:	08007c39 	.word	0x08007c39
 8007c04:	08007c39 	.word	0x08007c39
 8007c08:	08007c39 	.word	0x08007c39
 8007c0c:	08007c39 	.word	0x08007c39
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c39 	.word	0x08007c39
 8007c30:	08007c39 	.word	0x08007c39
 8007c34:	08007c39 	.word	0x08007c39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c38:	bf00      	nop
  }

  return (USBD_OK);
 8007c3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	4810      	ldr	r0, [pc, #64]	; (8007c98 <CDC_Receive_FS+0x50>)
 8007c56:	f7fe fea6 	bl	80069a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c5a:	480f      	ldr	r0, [pc, #60]	; (8007c98 <CDC_Receive_FS+0x50>)
 8007c5c:	f7fe fee6 	bl	8006a2c <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f819 	bl	8007ca0 <CDC_Transmit_FS>
   ssd1306_Fill(Black);
 8007c6e:	2000      	movs	r0, #0
 8007c70:	f7f9 fa8a 	bl	8001188 <ssd1306_Fill>
   ssd1306_SetCursor(2, 0);
 8007c74:	2100      	movs	r1, #0
 8007c76:	2002      	movs	r0, #2
 8007c78:	f7f9 fbdc 	bl	8001434 <ssd1306_SetCursor>
   ssd1306_WriteString(&Buf[0], Font_16x26, White);
 8007c7c:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <CDC_Receive_FS+0x54>)
 8007c7e:	2301      	movs	r3, #1
 8007c80:	ca06      	ldmia	r2, {r1, r2}
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7f9 fbb0 	bl	80013e8 <ssd1306_WriteString>
   ssd1306_UpdateScreen();
 8007c88:	f7f9 faa0 	bl	80011cc <ssd1306_UpdateScreen>
  return (USBD_OK);
 8007c8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000934 	.word	0x20000934
 8007c9c:	20000018 	.word	0x20000018

08007ca0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007cb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cb2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e00b      	b.n	8007cde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007cc6:	887b      	ldrh	r3, [r7, #2]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	4806      	ldr	r0, [pc, #24]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cce:	f7fe fe50 	bl	8006972 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007cd2:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <CDC_Transmit_FS+0x48>)
 8007cd4:	f7fe fe7b 	bl	80069ce <USBD_CDC_TransmitPacket>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000934 	.word	0x20000934

08007cec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2212      	movs	r2, #18
 8007cfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cfe:	4b03      	ldr	r3, [pc, #12]	; (8007d0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	2000016c 	.word	0x2000016c

08007d10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d22:	4b03      	ldr	r3, [pc, #12]	; (8007d30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	2000018c 	.word	0x2000018c

08007d34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d105      	bne.n	8007d52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4907      	ldr	r1, [pc, #28]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d4a:	4808      	ldr	r0, [pc, #32]	; (8007d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d4c:	f7ff fdf4 	bl	8007938 <USBD_GetString>
 8007d50:	e004      	b.n	8007d5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4904      	ldr	r1, [pc, #16]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d56:	4805      	ldr	r0, [pc, #20]	; (8007d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d58:	f7ff fdee 	bl	8007938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d5c:	4b02      	ldr	r3, [pc, #8]	; (8007d68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	200013a0 	.word	0x200013a0
 8007d6c:	08008f1c 	.word	0x08008f1c

08007d70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	6039      	str	r1, [r7, #0]
 8007d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	4904      	ldr	r1, [pc, #16]	; (8007d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d80:	4804      	ldr	r0, [pc, #16]	; (8007d94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d82:	f7ff fdd9 	bl	8007938 <USBD_GetString>
  return USBD_StrDesc;
 8007d86:	4b02      	ldr	r3, [pc, #8]	; (8007d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	200013a0 	.word	0x200013a0
 8007d94:	08008f34 	.word	0x08008f34

08007d98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	221a      	movs	r2, #26
 8007da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007daa:	f000 f855 	bl	8007e58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dae:	4b02      	ldr	r3, [pc, #8]	; (8007db8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20000190 	.word	0x20000190

08007dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007dc8:	79fb      	ldrb	r3, [r7, #7]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d105      	bne.n	8007dda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	4907      	ldr	r1, [pc, #28]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dd2:	4808      	ldr	r0, [pc, #32]	; (8007df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dd4:	f7ff fdb0 	bl	8007938 <USBD_GetString>
 8007dd8:	e004      	b.n	8007de4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	4904      	ldr	r1, [pc, #16]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dde:	4805      	ldr	r0, [pc, #20]	; (8007df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007de0:	f7ff fdaa 	bl	8007938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007de4:	4b02      	ldr	r3, [pc, #8]	; (8007df0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200013a0 	.word	0x200013a0
 8007df4:	08008f48 	.word	0x08008f48

08007df8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	4907      	ldr	r1, [pc, #28]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e0e:	4808      	ldr	r0, [pc, #32]	; (8007e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e10:	f7ff fd92 	bl	8007938 <USBD_GetString>
 8007e14:	e004      	b.n	8007e20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	4904      	ldr	r1, [pc, #16]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e1c:	f7ff fd8c 	bl	8007938 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	200013a0 	.word	0x200013a0
 8007e30:	08008f54 	.word	0x08008f54

08007e34 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	220c      	movs	r2, #12
 8007e44:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e46:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	20000180 	.word	0x20000180

08007e58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <Get_SerialNum+0x44>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e64:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <Get_SerialNum+0x48>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <Get_SerialNum+0x4c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4413      	add	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e7e:	2208      	movs	r2, #8
 8007e80:	4909      	ldr	r1, [pc, #36]	; (8007ea8 <Get_SerialNum+0x50>)
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f814 	bl	8007eb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e88:	2204      	movs	r2, #4
 8007e8a:	4908      	ldr	r1, [pc, #32]	; (8007eac <Get_SerialNum+0x54>)
 8007e8c:	68b8      	ldr	r0, [r7, #8]
 8007e8e:	f000 f80f 	bl	8007eb0 <IntToUnicode>
  }
}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	1fff7590 	.word	0x1fff7590
 8007ea0:	1fff7594 	.word	0x1fff7594
 8007ea4:	1fff7598 	.word	0x1fff7598
 8007ea8:	20000192 	.word	0x20000192
 8007eac:	200001a2 	.word	0x200001a2

08007eb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]
 8007ec6:	e027      	b.n	8007f18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	0f1b      	lsrs	r3, r3, #28
 8007ecc:	2b09      	cmp	r3, #9
 8007ece:	d80b      	bhi.n	8007ee8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	0f1b      	lsrs	r3, r3, #28
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	4619      	mov	r1, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	440b      	add	r3, r1
 8007ee0:	3230      	adds	r2, #48	; 0x30
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	e00a      	b.n	8007efe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	0f1b      	lsrs	r3, r3, #28
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	440b      	add	r3, r1
 8007ef8:	3237      	adds	r2, #55	; 0x37
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	3301      	adds	r3, #1
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	3301      	adds	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	7dfa      	ldrb	r2, [r7, #23]
 8007f1a:	79fb      	ldrb	r3, [r7, #7]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3d3      	bcc.n	8007ec8 <IntToUnicode+0x18>
  }
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <HAL_PCD_MspInit+0x44>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d113      	bne.n	8007f66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <HAL_PCD_MspInit+0x48>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <HAL_PCD_MspInit+0x48>)
 8007f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f48:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <HAL_PCD_MspInit+0x48>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007f56:	2200      	movs	r2, #0
 8007f58:	2100      	movs	r1, #0
 8007f5a:	2043      	movs	r0, #67	; 0x43
 8007f5c:	f7f9 fea7 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007f60:	2043      	movs	r0, #67	; 0x43
 8007f62:	f7f9 fec0 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40006800 	.word	0x40006800
 8007f74:	40021000 	.word	0x40021000

08007f78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4610      	mov	r0, r2
 8007f90:	f7fe fe04 	bl	8006b9c <USBD_LL_SetupStage>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	015b      	lsls	r3, r3, #5
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f7fe fe37 	bl	8006c32 <USBD_LL_DataOutStage>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	015b      	lsls	r3, r3, #5
 8007fe4:	4413      	add	r3, r2
 8007fe6:	333c      	adds	r3, #60	; 0x3c
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f7fe fe91 	bl	8006d14 <USBD_LL_DataInStage>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008008:	4618      	mov	r0, r3
 800800a:	f7fe ff9f 	bl	8006f4c <USBD_LL_SOF>
}
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800801e:	2301      	movs	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d001      	beq.n	800802e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800802a:	f7f8 ffff 	bl	800102c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008034:	7bfa      	ldrb	r2, [r7, #15]
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe ff51 	bl	8006ee0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe ff0a 	bl	8006e5e <USBD_LL_Reset>
}
 800804a:	bf00      	nop
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008062:	4618      	mov	r0, r3
 8008064:	f7fe ff4c 	bl	8006f00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008070:	4b04      	ldr	r3, [pc, #16]	; (8008084 <HAL_PCD_SuspendCallback+0x30>)
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	4a03      	ldr	r2, [pc, #12]	; (8008084 <HAL_PCD_SuspendCallback+0x30>)
 8008076:	f043 0306 	orr.w	r3, r3, #6
 800807a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed00 	.word	0xe000ed00

08008088 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008098:	4b08      	ldr	r3, [pc, #32]	; (80080bc <HAL_PCD_ResumeCallback+0x34>)
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	4a07      	ldr	r2, [pc, #28]	; (80080bc <HAL_PCD_ResumeCallback+0x34>)
 800809e:	f023 0306 	bic.w	r3, r3, #6
 80080a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80080a4:	f000 fab2 	bl	800860c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe ff3b 	bl	8006f2a <USBD_LL_Resume>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	e000ed00 	.word	0xe000ed00

080080c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80080c8:	f7fb fb6c 	bl	80037a4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80080cc:	4a2b      	ldr	r2, [pc, #172]	; (800817c <USBD_LL_Init+0xbc>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  pdev->pData = &hpcd_USB_FS;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a29      	ldr	r2, [pc, #164]	; (800817c <USBD_LL_Init+0xbc>)
 80080d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80080dc:	4b27      	ldr	r3, [pc, #156]	; (800817c <USBD_LL_Init+0xbc>)
 80080de:	4a28      	ldr	r2, [pc, #160]	; (8008180 <USBD_LL_Init+0xc0>)
 80080e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080e2:	4b26      	ldr	r3, [pc, #152]	; (800817c <USBD_LL_Init+0xbc>)
 80080e4:	2208      	movs	r2, #8
 80080e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80080e8:	4b24      	ldr	r3, [pc, #144]	; (800817c <USBD_LL_Init+0xbc>)
 80080ea:	2202      	movs	r2, #2
 80080ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <USBD_LL_Init+0xbc>)
 80080f0:	2202      	movs	r2, #2
 80080f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80080f4:	4b21      	ldr	r3, [pc, #132]	; (800817c <USBD_LL_Init+0xbc>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80080fa:	4b20      	ldr	r3, [pc, #128]	; (800817c <USBD_LL_Init+0xbc>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <USBD_LL_Init+0xbc>)
 8008102:	2200      	movs	r2, #0
 8008104:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <USBD_LL_Init+0xbc>)
 8008108:	2200      	movs	r2, #0
 800810a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800810c:	481b      	ldr	r0, [pc, #108]	; (800817c <USBD_LL_Init+0xbc>)
 800810e:	f7fa fb8a 	bl	8002826 <HAL_PCD_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008118:	f7f8 ff88 	bl	800102c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008122:	2318      	movs	r3, #24
 8008124:	2200      	movs	r2, #0
 8008126:	2100      	movs	r1, #0
 8008128:	f7fb fa60 	bl	80035ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008132:	2358      	movs	r3, #88	; 0x58
 8008134:	2200      	movs	r2, #0
 8008136:	2180      	movs	r1, #128	; 0x80
 8008138:	f7fb fa58 	bl	80035ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008142:	23c0      	movs	r3, #192	; 0xc0
 8008144:	2200      	movs	r2, #0
 8008146:	2181      	movs	r1, #129	; 0x81
 8008148:	f7fb fa50 	bl	80035ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008152:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008156:	2200      	movs	r2, #0
 8008158:	2101      	movs	r1, #1
 800815a:	f7fb fa47 	bl	80035ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008168:	2200      	movs	r2, #0
 800816a:	2182      	movs	r1, #130	; 0x82
 800816c:	f7fb fa3e 	bl	80035ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	200015a0 	.word	0x200015a0
 8008180:	40006800 	.word	0x40006800

08008184 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800819a:	4618      	mov	r0, r3
 800819c:	f7fa fc2b 	bl	80029f6 <HAL_PCD_Start>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d816      	bhi.n	80081d8 <USBD_LL_Start+0x54>
 80081aa:	a201      	add	r2, pc, #4	; (adr r2, 80081b0 <USBD_LL_Start+0x2c>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c7 	.word	0x080081c7
 80081b8:	080081cd 	.word	0x080081cd
 80081bc:	080081d3 	.word	0x080081d3
    case HAL_OK :
      usb_status = USBD_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e00b      	b.n	80081de <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e008      	b.n	80081de <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	e005      	b.n	80081de <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	73fb      	strb	r3, [r7, #15]
    break;
 80081d6:	e002      	b.n	80081de <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80081d8:	2302      	movs	r3, #2
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	bf00      	nop
  }
  return usb_status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	70fb      	strb	r3, [r7, #3]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70bb      	strb	r3, [r7, #2]
 80081fe:	4613      	mov	r3, r2
 8008200:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008206:	2300      	movs	r3, #0
 8008208:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008210:	78bb      	ldrb	r3, [r7, #2]
 8008212:	883a      	ldrh	r2, [r7, #0]
 8008214:	78f9      	ldrb	r1, [r7, #3]
 8008216:	f7fa fd8e 	bl	8002d36 <HAL_PCD_EP_Open>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d817      	bhi.n	8008254 <USBD_LL_OpenEP+0x6c>
 8008224:	a201      	add	r2, pc, #4	; (adr r2, 800822c <USBD_LL_OpenEP+0x44>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800823d 	.word	0x0800823d
 8008230:	08008243 	.word	0x08008243
 8008234:	08008249 	.word	0x08008249
 8008238:	0800824f 	.word	0x0800824f
    case HAL_OK :
      usb_status = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
    break;
 8008240:	e00b      	b.n	800825a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	73fb      	strb	r3, [r7, #15]
    break;
 8008246:	e008      	b.n	800825a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
    break;
 800824c:	e005      	b.n	800825a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800824e:	2302      	movs	r3, #2
 8008250:	73fb      	strb	r3, [r7, #15]
    break;
 8008252:	e002      	b.n	800825a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	73fb      	strb	r3, [r7, #15]
    break;
 8008258:	bf00      	nop
  }
  return usb_status;
 800825a:	7bfb      	ldrb	r3, [r7, #15]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	460b      	mov	r3, r1
 800826e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	4611      	mov	r1, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7fa fdb7 	bl	8002df6 <HAL_PCD_EP_Close>
 8008288:	4603      	mov	r3, r0
 800828a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d816      	bhi.n	80082c0 <USBD_LL_CloseEP+0x5c>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <USBD_LL_CloseEP+0x34>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082af 	.word	0x080082af
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082bb 	.word	0x080082bb
    case HAL_OK :
      usb_status = USBD_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
    break;
 80082ac:	e00b      	b.n	80082c6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082ae:	2302      	movs	r3, #2
 80082b0:	73fb      	strb	r3, [r7, #15]
    break;
 80082b2:	e008      	b.n	80082c6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082b4:	2301      	movs	r3, #1
 80082b6:	73fb      	strb	r3, [r7, #15]
    break;
 80082b8:	e005      	b.n	80082c6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ba:	2302      	movs	r3, #2
 80082bc:	73fb      	strb	r3, [r7, #15]
    break;
 80082be:	e002      	b.n	80082c6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80082c0:	2302      	movs	r3, #2
 80082c2:	73fb      	strb	r3, [r7, #15]
    break;
 80082c4:	bf00      	nop
  }
  return usb_status;  
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa fe4b 	bl	8002f8a <HAL_PCD_EP_SetStall>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d816      	bhi.n	800832c <USBD_LL_StallEP+0x5c>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBD_LL_StallEP+0x34>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008315 	.word	0x08008315
 8008308:	0800831b 	.word	0x0800831b
 800830c:	08008321 	.word	0x08008321
 8008310:	08008327 	.word	0x08008327
    case HAL_OK :
      usb_status = USBD_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
    break;
 8008318:	e00b      	b.n	8008332 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	73fb      	strb	r3, [r7, #15]
    break;
 800831e:	e008      	b.n	8008332 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
    break;
 8008324:	e005      	b.n	8008332 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008326:	2302      	movs	r3, #2
 8008328:	73fb      	strb	r3, [r7, #15]
    break;
 800832a:	e002      	b.n	8008332 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800832c:	2302      	movs	r3, #2
 800832e:	73fb      	strb	r3, [r7, #15]
    break;
 8008330:	bf00      	nop
  }
  return usb_status;  
 8008332:	7bfb      	ldrb	r3, [r7, #15]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fa fe6f 	bl	800303e <HAL_PCD_EP_ClrStall>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d816      	bhi.n	8008398 <USBD_LL_ClearStallEP+0x5c>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <USBD_LL_ClearStallEP+0x34>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008381 	.word	0x08008381
 8008374:	08008387 	.word	0x08008387
 8008378:	0800838d 	.word	0x0800838d
 800837c:	08008393 	.word	0x08008393
    case HAL_OK :
      usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e00b      	b.n	800839e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008386:	2302      	movs	r3, #2
 8008388:	73fb      	strb	r3, [r7, #15]
    break;
 800838a:	e008      	b.n	800839e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800838c:	2301      	movs	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e005      	b.n	800839e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008392:	2302      	movs	r3, #2
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e002      	b.n	800839e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008398:	2302      	movs	r3, #2
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	bf00      	nop
  }
  return usb_status; 
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80083ba:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80083bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da08      	bge.n	80083d6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	015b      	lsls	r3, r3, #5
 80083ce:	4413      	add	r3, r2
 80083d0:	332a      	adds	r3, #42	; 0x2a
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	015b      	lsls	r3, r3, #5
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80083e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800840e:	78fa      	ldrb	r2, [r7, #3]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7fa fc6a 	bl	8002cec <HAL_PCD_SetAddress>
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d816      	bhi.n	8008450 <USBD_LL_SetUSBAddress+0x5c>
 8008422:	a201      	add	r2, pc, #4	; (adr r2, 8008428 <USBD_LL_SetUSBAddress+0x34>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	08008439 	.word	0x08008439
 800842c:	0800843f 	.word	0x0800843f
 8008430:	08008445 	.word	0x08008445
 8008434:	0800844b 	.word	0x0800844b
    case HAL_OK :
      usb_status = USBD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
    break;
 800843c:	e00b      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800843e:	2302      	movs	r3, #2
 8008440:	73fb      	strb	r3, [r7, #15]
    break;
 8008442:	e008      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	e005      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800844a:	2302      	movs	r3, #2
 800844c:	73fb      	strb	r3, [r7, #15]
    break;
 800844e:	e002      	b.n	8008456 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008450:	2302      	movs	r3, #2
 8008452:	73fb      	strb	r3, [r7, #15]
    break;
 8008454:	bf00      	nop
  }
  return usb_status;  
 8008456:	7bfb      	ldrb	r3, [r7, #15]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	461a      	mov	r2, r3
 800846c:	460b      	mov	r3, r1
 800846e:	72fb      	strb	r3, [r7, #11]
 8008470:	4613      	mov	r3, r2
 8008472:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	7af9      	ldrb	r1, [r7, #11]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	f7fa fd46 	bl	8002f18 <HAL_PCD_EP_Transmit>
 800848c:	4603      	mov	r3, r0
 800848e:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8008490:	7dbb      	ldrb	r3, [r7, #22]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d816      	bhi.n	80084c4 <USBD_LL_Transmit+0x64>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <USBD_LL_Transmit+0x3c>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084b3 	.word	0x080084b3
 80084a4:	080084b9 	.word	0x080084b9
 80084a8:	080084bf 	.word	0x080084bf
    case HAL_OK :
      usb_status = USBD_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75fb      	strb	r3, [r7, #23]
    break;
 80084b0:	e00b      	b.n	80084ca <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084b2:	2302      	movs	r3, #2
 80084b4:	75fb      	strb	r3, [r7, #23]
    break;
 80084b6:	e008      	b.n	80084ca <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
    break;
 80084bc:	e005      	b.n	80084ca <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	75fb      	strb	r3, [r7, #23]
    break;
 80084c2:	e002      	b.n	80084ca <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80084c4:	2302      	movs	r3, #2
 80084c6:	75fb      	strb	r3, [r7, #23]
    break;
 80084c8:	bf00      	nop
  }
  return usb_status;    
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	461a      	mov	r2, r3
 80084e0:	460b      	mov	r3, r1
 80084e2:	72fb      	strb	r3, [r7, #11]
 80084e4:	4613      	mov	r3, r2
 80084e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80084f6:	893b      	ldrh	r3, [r7, #8]
 80084f8:	7af9      	ldrb	r1, [r7, #11]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	f7fa fcbd 	bl	8002e7a <HAL_PCD_EP_Receive>
 8008500:	4603      	mov	r3, r0
 8008502:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8008504:	7dbb      	ldrb	r3, [r7, #22]
 8008506:	2b03      	cmp	r3, #3
 8008508:	d816      	bhi.n	8008538 <USBD_LL_PrepareReceive+0x64>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBD_LL_PrepareReceive+0x3c>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008521 	.word	0x08008521
 8008514:	08008527 	.word	0x08008527
 8008518:	0800852d 	.word	0x0800852d
 800851c:	08008533 	.word	0x08008533
    case HAL_OK :
      usb_status = USBD_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	75fb      	strb	r3, [r7, #23]
    break;
 8008524:	e00b      	b.n	800853e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008526:	2302      	movs	r3, #2
 8008528:	75fb      	strb	r3, [r7, #23]
    break;
 800852a:	e008      	b.n	800853e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
    break;
 8008530:	e005      	b.n	800853e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008532:	2302      	movs	r3, #2
 8008534:	75fb      	strb	r3, [r7, #23]
    break;
 8008536:	e002      	b.n	800853e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8008538:	2302      	movs	r3, #2
 800853a:	75fb      	strb	r3, [r7, #23]
    break;
 800853c:	bf00      	nop
  }
  return usb_status; 
 800853e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fa fcc5 	bl	8002eee <HAL_PCD_EP_GetRxCount>
 8008564:	4603      	mov	r3, r0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
	...

08008570 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_PCDEx_LPM_Callback+0x18>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d013      	beq.n	80085ae <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8008586:	e023      	b.n	80085d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008590:	f000 f83c 	bl	800860c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008594:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_PCDEx_LPM_Callback+0x68>)
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	4a0f      	ldr	r2, [pc, #60]	; (80085d8 <HAL_PCDEx_LPM_Callback+0x68>)
 800859a:	f023 0306 	bic.w	r3, r3, #6
 800859e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fcbf 	bl	8006f2a <USBD_LL_Resume>
    break;
 80085ac:	e010      	b.n	80085d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fca3 	bl	8006f00 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80085c8:	f043 0306 	orr.w	r3, r3, #6
 80085cc:	6113      	str	r3, [r2, #16]
    break;   
 80085ce:	bf00      	nop
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	e000ed00 	.word	0xe000ed00

080085dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085e4:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <USBD_static_malloc+0x18>)
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000063c 	.word	0x2000063c

080085f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]

}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008610:	f7f8 fbbc 	bl	8000d8c <SystemClock_Config>
}
 8008614:	bf00      	nop
 8008616:	bd80      	pop	{r7, pc}

08008618 <__errno>:
 8008618:	4b01      	ldr	r3, [pc, #4]	; (8008620 <__errno+0x8>)
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	200001ac 	.word	0x200001ac

08008624 <__libc_init_array>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4e0d      	ldr	r6, [pc, #52]	; (800865c <__libc_init_array+0x38>)
 8008628:	4c0d      	ldr	r4, [pc, #52]	; (8008660 <__libc_init_array+0x3c>)
 800862a:	1ba4      	subs	r4, r4, r6
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	2500      	movs	r5, #0
 8008630:	42a5      	cmp	r5, r4
 8008632:	d109      	bne.n	8008648 <__libc_init_array+0x24>
 8008634:	4e0b      	ldr	r6, [pc, #44]	; (8008664 <__libc_init_array+0x40>)
 8008636:	4c0c      	ldr	r4, [pc, #48]	; (8008668 <__libc_init_array+0x44>)
 8008638:	f000 fc3c 	bl	8008eb4 <_init>
 800863c:	1ba4      	subs	r4, r4, r6
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	2500      	movs	r5, #0
 8008642:	42a5      	cmp	r5, r4
 8008644:	d105      	bne.n	8008652 <__libc_init_array+0x2e>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800864c:	4798      	blx	r3
 800864e:	3501      	adds	r5, #1
 8008650:	e7ee      	b.n	8008630 <__libc_init_array+0xc>
 8008652:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008656:	4798      	blx	r3
 8008658:	3501      	adds	r5, #1
 800865a:	e7f2      	b.n	8008642 <__libc_init_array+0x1e>
 800865c:	0800bdec 	.word	0x0800bdec
 8008660:	0800bdec 	.word	0x0800bdec
 8008664:	0800bdec 	.word	0x0800bdec
 8008668:	0800bdf0 	.word	0x0800bdf0

0800866c <memmove>:
 800866c:	4288      	cmp	r0, r1
 800866e:	b510      	push	{r4, lr}
 8008670:	eb01 0302 	add.w	r3, r1, r2
 8008674:	d807      	bhi.n	8008686 <memmove+0x1a>
 8008676:	1e42      	subs	r2, r0, #1
 8008678:	4299      	cmp	r1, r3
 800867a:	d00a      	beq.n	8008692 <memmove+0x26>
 800867c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008680:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008684:	e7f8      	b.n	8008678 <memmove+0xc>
 8008686:	4283      	cmp	r3, r0
 8008688:	d9f5      	bls.n	8008676 <memmove+0xa>
 800868a:	1881      	adds	r1, r0, r2
 800868c:	1ad2      	subs	r2, r2, r3
 800868e:	42d3      	cmn	r3, r2
 8008690:	d100      	bne.n	8008694 <memmove+0x28>
 8008692:	bd10      	pop	{r4, pc}
 8008694:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008698:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800869c:	e7f7      	b.n	800868e <memmove+0x22>

0800869e <memset>:
 800869e:	4402      	add	r2, r0
 80086a0:	4603      	mov	r3, r0
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d100      	bne.n	80086a8 <memset+0xa>
 80086a6:	4770      	bx	lr
 80086a8:	f803 1b01 	strb.w	r1, [r3], #1
 80086ac:	e7f9      	b.n	80086a2 <memset+0x4>
	...

080086b0 <sniprintf>:
 80086b0:	b40c      	push	{r2, r3}
 80086b2:	b530      	push	{r4, r5, lr}
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <sniprintf+0x64>)
 80086b6:	1e0c      	subs	r4, r1, #0
 80086b8:	b09d      	sub	sp, #116	; 0x74
 80086ba:	681d      	ldr	r5, [r3, #0]
 80086bc:	da08      	bge.n	80086d0 <sniprintf+0x20>
 80086be:	238b      	movs	r3, #139	; 0x8b
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	f04f 30ff 	mov.w	r0, #4294967295
 80086c6:	b01d      	add	sp, #116	; 0x74
 80086c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086cc:	b002      	add	sp, #8
 80086ce:	4770      	bx	lr
 80086d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086d8:	bf14      	ite	ne
 80086da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80086de:	4623      	moveq	r3, r4
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	9307      	str	r3, [sp, #28]
 80086e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086e8:	9002      	str	r0, [sp, #8]
 80086ea:	9006      	str	r0, [sp, #24]
 80086ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086f2:	ab21      	add	r3, sp, #132	; 0x84
 80086f4:	a902      	add	r1, sp, #8
 80086f6:	4628      	mov	r0, r5
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f000 f867 	bl	80087cc <_svfiprintf_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	bfbc      	itt	lt
 8008702:	238b      	movlt	r3, #139	; 0x8b
 8008704:	602b      	strlt	r3, [r5, #0]
 8008706:	2c00      	cmp	r4, #0
 8008708:	d0dd      	beq.n	80086c6 <sniprintf+0x16>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	2200      	movs	r2, #0
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e7d9      	b.n	80086c6 <sniprintf+0x16>
 8008712:	bf00      	nop
 8008714:	200001ac 	.word	0x200001ac

08008718 <__ssputs_r>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	688e      	ldr	r6, [r1, #8]
 800871e:	429e      	cmp	r6, r3
 8008720:	4682      	mov	sl, r0
 8008722:	460c      	mov	r4, r1
 8008724:	4690      	mov	r8, r2
 8008726:	4699      	mov	r9, r3
 8008728:	d837      	bhi.n	800879a <__ssputs_r+0x82>
 800872a:	898a      	ldrh	r2, [r1, #12]
 800872c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008730:	d031      	beq.n	8008796 <__ssputs_r+0x7e>
 8008732:	6825      	ldr	r5, [r4, #0]
 8008734:	6909      	ldr	r1, [r1, #16]
 8008736:	1a6f      	subs	r7, r5, r1
 8008738:	6965      	ldr	r5, [r4, #20]
 800873a:	2302      	movs	r3, #2
 800873c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008740:	fb95 f5f3 	sdiv	r5, r5, r3
 8008744:	f109 0301 	add.w	r3, r9, #1
 8008748:	443b      	add	r3, r7
 800874a:	429d      	cmp	r5, r3
 800874c:	bf38      	it	cc
 800874e:	461d      	movcc	r5, r3
 8008750:	0553      	lsls	r3, r2, #21
 8008752:	d530      	bpl.n	80087b6 <__ssputs_r+0x9e>
 8008754:	4629      	mov	r1, r5
 8008756:	f000 fb13 	bl	8008d80 <_malloc_r>
 800875a:	4606      	mov	r6, r0
 800875c:	b950      	cbnz	r0, 8008774 <__ssputs_r+0x5c>
 800875e:	230c      	movs	r3, #12
 8008760:	f8ca 3000 	str.w	r3, [sl]
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876a:	81a3      	strh	r3, [r4, #12]
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008774:	463a      	mov	r2, r7
 8008776:	6921      	ldr	r1, [r4, #16]
 8008778:	f000 faa8 	bl	8008ccc <memcpy>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	6126      	str	r6, [r4, #16]
 800878a:	6165      	str	r5, [r4, #20]
 800878c:	443e      	add	r6, r7
 800878e:	1bed      	subs	r5, r5, r7
 8008790:	6026      	str	r6, [r4, #0]
 8008792:	60a5      	str	r5, [r4, #8]
 8008794:	464e      	mov	r6, r9
 8008796:	454e      	cmp	r6, r9
 8008798:	d900      	bls.n	800879c <__ssputs_r+0x84>
 800879a:	464e      	mov	r6, r9
 800879c:	4632      	mov	r2, r6
 800879e:	4641      	mov	r1, r8
 80087a0:	6820      	ldr	r0, [r4, #0]
 80087a2:	f7ff ff63 	bl	800866c <memmove>
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	1b9b      	subs	r3, r3, r6
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	441e      	add	r6, r3
 80087b0:	6026      	str	r6, [r4, #0]
 80087b2:	2000      	movs	r0, #0
 80087b4:	e7dc      	b.n	8008770 <__ssputs_r+0x58>
 80087b6:	462a      	mov	r2, r5
 80087b8:	f000 fb3c 	bl	8008e34 <_realloc_r>
 80087bc:	4606      	mov	r6, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d1e2      	bne.n	8008788 <__ssputs_r+0x70>
 80087c2:	6921      	ldr	r1, [r4, #16]
 80087c4:	4650      	mov	r0, sl
 80087c6:	f000 fa8d 	bl	8008ce4 <_free_r>
 80087ca:	e7c8      	b.n	800875e <__ssputs_r+0x46>

080087cc <_svfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	461d      	mov	r5, r3
 80087d2:	898b      	ldrh	r3, [r1, #12]
 80087d4:	061f      	lsls	r7, r3, #24
 80087d6:	b09d      	sub	sp, #116	; 0x74
 80087d8:	4680      	mov	r8, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	4616      	mov	r6, r2
 80087de:	d50f      	bpl.n	8008800 <_svfiprintf_r+0x34>
 80087e0:	690b      	ldr	r3, [r1, #16]
 80087e2:	b96b      	cbnz	r3, 8008800 <_svfiprintf_r+0x34>
 80087e4:	2140      	movs	r1, #64	; 0x40
 80087e6:	f000 facb 	bl	8008d80 <_malloc_r>
 80087ea:	6020      	str	r0, [r4, #0]
 80087ec:	6120      	str	r0, [r4, #16]
 80087ee:	b928      	cbnz	r0, 80087fc <_svfiprintf_r+0x30>
 80087f0:	230c      	movs	r3, #12
 80087f2:	f8c8 3000 	str.w	r3, [r8]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	e0c8      	b.n	800898e <_svfiprintf_r+0x1c2>
 80087fc:	2340      	movs	r3, #64	; 0x40
 80087fe:	6163      	str	r3, [r4, #20]
 8008800:	2300      	movs	r3, #0
 8008802:	9309      	str	r3, [sp, #36]	; 0x24
 8008804:	2320      	movs	r3, #32
 8008806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800880a:	2330      	movs	r3, #48	; 0x30
 800880c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008810:	9503      	str	r5, [sp, #12]
 8008812:	f04f 0b01 	mov.w	fp, #1
 8008816:	4637      	mov	r7, r6
 8008818:	463d      	mov	r5, r7
 800881a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800881e:	b10b      	cbz	r3, 8008824 <_svfiprintf_r+0x58>
 8008820:	2b25      	cmp	r3, #37	; 0x25
 8008822:	d13e      	bne.n	80088a2 <_svfiprintf_r+0xd6>
 8008824:	ebb7 0a06 	subs.w	sl, r7, r6
 8008828:	d00b      	beq.n	8008842 <_svfiprintf_r+0x76>
 800882a:	4653      	mov	r3, sl
 800882c:	4632      	mov	r2, r6
 800882e:	4621      	mov	r1, r4
 8008830:	4640      	mov	r0, r8
 8008832:	f7ff ff71 	bl	8008718 <__ssputs_r>
 8008836:	3001      	adds	r0, #1
 8008838:	f000 80a4 	beq.w	8008984 <_svfiprintf_r+0x1b8>
 800883c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800883e:	4453      	add	r3, sl
 8008840:	9309      	str	r3, [sp, #36]	; 0x24
 8008842:	783b      	ldrb	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 809d 	beq.w	8008984 <_svfiprintf_r+0x1b8>
 800884a:	2300      	movs	r3, #0
 800884c:	f04f 32ff 	mov.w	r2, #4294967295
 8008850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885c:	931a      	str	r3, [sp, #104]	; 0x68
 800885e:	462f      	mov	r7, r5
 8008860:	2205      	movs	r2, #5
 8008862:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008866:	4850      	ldr	r0, [pc, #320]	; (80089a8 <_svfiprintf_r+0x1dc>)
 8008868:	f7f7 fcb2 	bl	80001d0 <memchr>
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	b9d0      	cbnz	r0, 80088a6 <_svfiprintf_r+0xda>
 8008870:	06d9      	lsls	r1, r3, #27
 8008872:	bf44      	itt	mi
 8008874:	2220      	movmi	r2, #32
 8008876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800887a:	071a      	lsls	r2, r3, #28
 800887c:	bf44      	itt	mi
 800887e:	222b      	movmi	r2, #43	; 0x2b
 8008880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008884:	782a      	ldrb	r2, [r5, #0]
 8008886:	2a2a      	cmp	r2, #42	; 0x2a
 8008888:	d015      	beq.n	80088b6 <_svfiprintf_r+0xea>
 800888a:	9a07      	ldr	r2, [sp, #28]
 800888c:	462f      	mov	r7, r5
 800888e:	2000      	movs	r0, #0
 8008890:	250a      	movs	r5, #10
 8008892:	4639      	mov	r1, r7
 8008894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008898:	3b30      	subs	r3, #48	; 0x30
 800889a:	2b09      	cmp	r3, #9
 800889c:	d94d      	bls.n	800893a <_svfiprintf_r+0x16e>
 800889e:	b1b8      	cbz	r0, 80088d0 <_svfiprintf_r+0x104>
 80088a0:	e00f      	b.n	80088c2 <_svfiprintf_r+0xf6>
 80088a2:	462f      	mov	r7, r5
 80088a4:	e7b8      	b.n	8008818 <_svfiprintf_r+0x4c>
 80088a6:	4a40      	ldr	r2, [pc, #256]	; (80089a8 <_svfiprintf_r+0x1dc>)
 80088a8:	1a80      	subs	r0, r0, r2
 80088aa:	fa0b f000 	lsl.w	r0, fp, r0
 80088ae:	4318      	orrs	r0, r3
 80088b0:	9004      	str	r0, [sp, #16]
 80088b2:	463d      	mov	r5, r7
 80088b4:	e7d3      	b.n	800885e <_svfiprintf_r+0x92>
 80088b6:	9a03      	ldr	r2, [sp, #12]
 80088b8:	1d11      	adds	r1, r2, #4
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	9103      	str	r1, [sp, #12]
 80088be:	2a00      	cmp	r2, #0
 80088c0:	db01      	blt.n	80088c6 <_svfiprintf_r+0xfa>
 80088c2:	9207      	str	r2, [sp, #28]
 80088c4:	e004      	b.n	80088d0 <_svfiprintf_r+0x104>
 80088c6:	4252      	negs	r2, r2
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	9207      	str	r2, [sp, #28]
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	783b      	ldrb	r3, [r7, #0]
 80088d2:	2b2e      	cmp	r3, #46	; 0x2e
 80088d4:	d10c      	bne.n	80088f0 <_svfiprintf_r+0x124>
 80088d6:	787b      	ldrb	r3, [r7, #1]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d133      	bne.n	8008944 <_svfiprintf_r+0x178>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	9203      	str	r2, [sp, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bfb8      	it	lt
 80088e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ec:	3702      	adds	r7, #2
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4d2e      	ldr	r5, [pc, #184]	; (80089ac <_svfiprintf_r+0x1e0>)
 80088f2:	7839      	ldrb	r1, [r7, #0]
 80088f4:	2203      	movs	r2, #3
 80088f6:	4628      	mov	r0, r5
 80088f8:	f7f7 fc6a 	bl	80001d0 <memchr>
 80088fc:	b138      	cbz	r0, 800890e <_svfiprintf_r+0x142>
 80088fe:	2340      	movs	r3, #64	; 0x40
 8008900:	1b40      	subs	r0, r0, r5
 8008902:	fa03 f000 	lsl.w	r0, r3, r0
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	4303      	orrs	r3, r0
 800890a:	3701      	adds	r7, #1
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	7839      	ldrb	r1, [r7, #0]
 8008910:	4827      	ldr	r0, [pc, #156]	; (80089b0 <_svfiprintf_r+0x1e4>)
 8008912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008916:	2206      	movs	r2, #6
 8008918:	1c7e      	adds	r6, r7, #1
 800891a:	f7f7 fc59 	bl	80001d0 <memchr>
 800891e:	2800      	cmp	r0, #0
 8008920:	d038      	beq.n	8008994 <_svfiprintf_r+0x1c8>
 8008922:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <_svfiprintf_r+0x1e8>)
 8008924:	bb13      	cbnz	r3, 800896c <_svfiprintf_r+0x1a0>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	3307      	adds	r3, #7
 800892a:	f023 0307 	bic.w	r3, r3, #7
 800892e:	3308      	adds	r3, #8
 8008930:	9303      	str	r3, [sp, #12]
 8008932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008934:	444b      	add	r3, r9
 8008936:	9309      	str	r3, [sp, #36]	; 0x24
 8008938:	e76d      	b.n	8008816 <_svfiprintf_r+0x4a>
 800893a:	fb05 3202 	mla	r2, r5, r2, r3
 800893e:	2001      	movs	r0, #1
 8008940:	460f      	mov	r7, r1
 8008942:	e7a6      	b.n	8008892 <_svfiprintf_r+0xc6>
 8008944:	2300      	movs	r3, #0
 8008946:	3701      	adds	r7, #1
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	4619      	mov	r1, r3
 800894c:	250a      	movs	r5, #10
 800894e:	4638      	mov	r0, r7
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	3a30      	subs	r2, #48	; 0x30
 8008956:	2a09      	cmp	r2, #9
 8008958:	d903      	bls.n	8008962 <_svfiprintf_r+0x196>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0c8      	beq.n	80088f0 <_svfiprintf_r+0x124>
 800895e:	9105      	str	r1, [sp, #20]
 8008960:	e7c6      	b.n	80088f0 <_svfiprintf_r+0x124>
 8008962:	fb05 2101 	mla	r1, r5, r1, r2
 8008966:	2301      	movs	r3, #1
 8008968:	4607      	mov	r7, r0
 800896a:	e7f0      	b.n	800894e <_svfiprintf_r+0x182>
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	4622      	mov	r2, r4
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <_svfiprintf_r+0x1ec>)
 8008974:	a904      	add	r1, sp, #16
 8008976:	4640      	mov	r0, r8
 8008978:	f3af 8000 	nop.w
 800897c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008980:	4681      	mov	r9, r0
 8008982:	d1d6      	bne.n	8008932 <_svfiprintf_r+0x166>
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	065b      	lsls	r3, r3, #25
 8008988:	f53f af35 	bmi.w	80087f6 <_svfiprintf_r+0x2a>
 800898c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800898e:	b01d      	add	sp, #116	; 0x74
 8008990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008994:	ab03      	add	r3, sp, #12
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	4622      	mov	r2, r4
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <_svfiprintf_r+0x1ec>)
 800899c:	a904      	add	r1, sp, #16
 800899e:	4640      	mov	r0, r8
 80089a0:	f000 f882 	bl	8008aa8 <_printf_i>
 80089a4:	e7ea      	b.n	800897c <_svfiprintf_r+0x1b0>
 80089a6:	bf00      	nop
 80089a8:	0800bdb0 	.word	0x0800bdb0
 80089ac:	0800bdb6 	.word	0x0800bdb6
 80089b0:	0800bdba 	.word	0x0800bdba
 80089b4:	00000000 	.word	0x00000000
 80089b8:	08008719 	.word	0x08008719

080089bc <_printf_common>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	4691      	mov	r9, r2
 80089c2:	461f      	mov	r7, r3
 80089c4:	688a      	ldr	r2, [r1, #8]
 80089c6:	690b      	ldr	r3, [r1, #16]
 80089c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089cc:	4293      	cmp	r3, r2
 80089ce:	bfb8      	it	lt
 80089d0:	4613      	movlt	r3, r2
 80089d2:	f8c9 3000 	str.w	r3, [r9]
 80089d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089da:	4606      	mov	r6, r0
 80089dc:	460c      	mov	r4, r1
 80089de:	b112      	cbz	r2, 80089e6 <_printf_common+0x2a>
 80089e0:	3301      	adds	r3, #1
 80089e2:	f8c9 3000 	str.w	r3, [r9]
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	0699      	lsls	r1, r3, #26
 80089ea:	bf42      	ittt	mi
 80089ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089f0:	3302      	addmi	r3, #2
 80089f2:	f8c9 3000 	strmi.w	r3, [r9]
 80089f6:	6825      	ldr	r5, [r4, #0]
 80089f8:	f015 0506 	ands.w	r5, r5, #6
 80089fc:	d107      	bne.n	8008a0e <_printf_common+0x52>
 80089fe:	f104 0a19 	add.w	sl, r4, #25
 8008a02:	68e3      	ldr	r3, [r4, #12]
 8008a04:	f8d9 2000 	ldr.w	r2, [r9]
 8008a08:	1a9b      	subs	r3, r3, r2
 8008a0a:	42ab      	cmp	r3, r5
 8008a0c:	dc28      	bgt.n	8008a60 <_printf_common+0xa4>
 8008a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a12:	6822      	ldr	r2, [r4, #0]
 8008a14:	3300      	adds	r3, #0
 8008a16:	bf18      	it	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	0692      	lsls	r2, r2, #26
 8008a1c:	d42d      	bmi.n	8008a7a <_printf_common+0xbe>
 8008a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a22:	4639      	mov	r1, r7
 8008a24:	4630      	mov	r0, r6
 8008a26:	47c0      	blx	r8
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d020      	beq.n	8008a6e <_printf_common+0xb2>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	68e5      	ldr	r5, [r4, #12]
 8008a30:	f8d9 2000 	ldr.w	r2, [r9]
 8008a34:	f003 0306 	and.w	r3, r3, #6
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	bf08      	it	eq
 8008a3c:	1aad      	subeq	r5, r5, r2
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	6922      	ldr	r2, [r4, #16]
 8008a42:	bf0c      	ite	eq
 8008a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a48:	2500      	movne	r5, #0
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	bfc4      	itt	gt
 8008a4e:	1a9b      	subgt	r3, r3, r2
 8008a50:	18ed      	addgt	r5, r5, r3
 8008a52:	f04f 0900 	mov.w	r9, #0
 8008a56:	341a      	adds	r4, #26
 8008a58:	454d      	cmp	r5, r9
 8008a5a:	d11a      	bne.n	8008a92 <_printf_common+0xd6>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e008      	b.n	8008a72 <_printf_common+0xb6>
 8008a60:	2301      	movs	r3, #1
 8008a62:	4652      	mov	r2, sl
 8008a64:	4639      	mov	r1, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	47c0      	blx	r8
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	d103      	bne.n	8008a76 <_printf_common+0xba>
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a76:	3501      	adds	r5, #1
 8008a78:	e7c3      	b.n	8008a02 <_printf_common+0x46>
 8008a7a:	18e1      	adds	r1, r4, r3
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	2030      	movs	r0, #48	; 0x30
 8008a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a84:	4422      	add	r2, r4
 8008a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a8e:	3302      	adds	r3, #2
 8008a90:	e7c5      	b.n	8008a1e <_printf_common+0x62>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4622      	mov	r2, r4
 8008a96:	4639      	mov	r1, r7
 8008a98:	4630      	mov	r0, r6
 8008a9a:	47c0      	blx	r8
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d0e6      	beq.n	8008a6e <_printf_common+0xb2>
 8008aa0:	f109 0901 	add.w	r9, r9, #1
 8008aa4:	e7d8      	b.n	8008a58 <_printf_common+0x9c>
	...

08008aa8 <_printf_i>:
 8008aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	7e09      	ldrb	r1, [r1, #24]
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	296e      	cmp	r1, #110	; 0x6e
 8008ab8:	4617      	mov	r7, r2
 8008aba:	4606      	mov	r6, r0
 8008abc:	4698      	mov	r8, r3
 8008abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ac0:	f000 80b3 	beq.w	8008c2a <_printf_i+0x182>
 8008ac4:	d822      	bhi.n	8008b0c <_printf_i+0x64>
 8008ac6:	2963      	cmp	r1, #99	; 0x63
 8008ac8:	d036      	beq.n	8008b38 <_printf_i+0x90>
 8008aca:	d80a      	bhi.n	8008ae2 <_printf_i+0x3a>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	f000 80b9 	beq.w	8008c44 <_printf_i+0x19c>
 8008ad2:	2958      	cmp	r1, #88	; 0x58
 8008ad4:	f000 8083 	beq.w	8008bde <_printf_i+0x136>
 8008ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ae0:	e032      	b.n	8008b48 <_printf_i+0xa0>
 8008ae2:	2964      	cmp	r1, #100	; 0x64
 8008ae4:	d001      	beq.n	8008aea <_printf_i+0x42>
 8008ae6:	2969      	cmp	r1, #105	; 0x69
 8008ae8:	d1f6      	bne.n	8008ad8 <_printf_i+0x30>
 8008aea:	6820      	ldr	r0, [r4, #0]
 8008aec:	6813      	ldr	r3, [r2, #0]
 8008aee:	0605      	lsls	r5, r0, #24
 8008af0:	f103 0104 	add.w	r1, r3, #4
 8008af4:	d52a      	bpl.n	8008b4c <_printf_i+0xa4>
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da03      	bge.n	8008b06 <_printf_i+0x5e>
 8008afe:	222d      	movs	r2, #45	; 0x2d
 8008b00:	425b      	negs	r3, r3
 8008b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b06:	486f      	ldr	r0, [pc, #444]	; (8008cc4 <_printf_i+0x21c>)
 8008b08:	220a      	movs	r2, #10
 8008b0a:	e039      	b.n	8008b80 <_printf_i+0xd8>
 8008b0c:	2973      	cmp	r1, #115	; 0x73
 8008b0e:	f000 809d 	beq.w	8008c4c <_printf_i+0x1a4>
 8008b12:	d808      	bhi.n	8008b26 <_printf_i+0x7e>
 8008b14:	296f      	cmp	r1, #111	; 0x6f
 8008b16:	d020      	beq.n	8008b5a <_printf_i+0xb2>
 8008b18:	2970      	cmp	r1, #112	; 0x70
 8008b1a:	d1dd      	bne.n	8008ad8 <_printf_i+0x30>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	f043 0320 	orr.w	r3, r3, #32
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	e003      	b.n	8008b2e <_printf_i+0x86>
 8008b26:	2975      	cmp	r1, #117	; 0x75
 8008b28:	d017      	beq.n	8008b5a <_printf_i+0xb2>
 8008b2a:	2978      	cmp	r1, #120	; 0x78
 8008b2c:	d1d4      	bne.n	8008ad8 <_printf_i+0x30>
 8008b2e:	2378      	movs	r3, #120	; 0x78
 8008b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b34:	4864      	ldr	r0, [pc, #400]	; (8008cc8 <_printf_i+0x220>)
 8008b36:	e055      	b.n	8008be4 <_printf_i+0x13c>
 8008b38:	6813      	ldr	r3, [r2, #0]
 8008b3a:	1d19      	adds	r1, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6011      	str	r1, [r2, #0]
 8008b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e08c      	b.n	8008c66 <_printf_i+0x1be>
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6011      	str	r1, [r2, #0]
 8008b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b54:	bf18      	it	ne
 8008b56:	b21b      	sxthne	r3, r3
 8008b58:	e7cf      	b.n	8008afa <_printf_i+0x52>
 8008b5a:	6813      	ldr	r3, [r2, #0]
 8008b5c:	6825      	ldr	r5, [r4, #0]
 8008b5e:	1d18      	adds	r0, r3, #4
 8008b60:	6010      	str	r0, [r2, #0]
 8008b62:	0628      	lsls	r0, r5, #24
 8008b64:	d501      	bpl.n	8008b6a <_printf_i+0xc2>
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	e002      	b.n	8008b70 <_printf_i+0xc8>
 8008b6a:	0668      	lsls	r0, r5, #25
 8008b6c:	d5fb      	bpl.n	8008b66 <_printf_i+0xbe>
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	4854      	ldr	r0, [pc, #336]	; (8008cc4 <_printf_i+0x21c>)
 8008b72:	296f      	cmp	r1, #111	; 0x6f
 8008b74:	bf14      	ite	ne
 8008b76:	220a      	movne	r2, #10
 8008b78:	2208      	moveq	r2, #8
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b80:	6865      	ldr	r5, [r4, #4]
 8008b82:	60a5      	str	r5, [r4, #8]
 8008b84:	2d00      	cmp	r5, #0
 8008b86:	f2c0 8095 	blt.w	8008cb4 <_printf_i+0x20c>
 8008b8a:	6821      	ldr	r1, [r4, #0]
 8008b8c:	f021 0104 	bic.w	r1, r1, #4
 8008b90:	6021      	str	r1, [r4, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d13d      	bne.n	8008c12 <_printf_i+0x16a>
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	f040 808e 	bne.w	8008cb8 <_printf_i+0x210>
 8008b9c:	4665      	mov	r5, ip
 8008b9e:	2a08      	cmp	r2, #8
 8008ba0:	d10b      	bne.n	8008bba <_printf_i+0x112>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	07db      	lsls	r3, r3, #31
 8008ba6:	d508      	bpl.n	8008bba <_printf_i+0x112>
 8008ba8:	6923      	ldr	r3, [r4, #16]
 8008baa:	6862      	ldr	r2, [r4, #4]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	bfde      	ittt	le
 8008bb0:	2330      	movle	r3, #48	; 0x30
 8008bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bba:	ebac 0305 	sub.w	r3, ip, r5
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	f8cd 8000 	str.w	r8, [sp]
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	aa03      	add	r2, sp, #12
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff fef6 	bl	80089bc <_printf_common>
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d14d      	bne.n	8008c70 <_printf_i+0x1c8>
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	b005      	add	sp, #20
 8008bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bde:	4839      	ldr	r0, [pc, #228]	; (8008cc4 <_printf_i+0x21c>)
 8008be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008be4:	6813      	ldr	r3, [r2, #0]
 8008be6:	6821      	ldr	r1, [r4, #0]
 8008be8:	1d1d      	adds	r5, r3, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6015      	str	r5, [r2, #0]
 8008bee:	060a      	lsls	r2, r1, #24
 8008bf0:	d50b      	bpl.n	8008c0a <_printf_i+0x162>
 8008bf2:	07ca      	lsls	r2, r1, #31
 8008bf4:	bf44      	itt	mi
 8008bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8008bfa:	6021      	strmi	r1, [r4, #0]
 8008bfc:	b91b      	cbnz	r3, 8008c06 <_printf_i+0x15e>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	f022 0220 	bic.w	r2, r2, #32
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	2210      	movs	r2, #16
 8008c08:	e7b7      	b.n	8008b7a <_printf_i+0xd2>
 8008c0a:	064d      	lsls	r5, r1, #25
 8008c0c:	bf48      	it	mi
 8008c0e:	b29b      	uxthmi	r3, r3
 8008c10:	e7ef      	b.n	8008bf2 <_printf_i+0x14a>
 8008c12:	4665      	mov	r5, ip
 8008c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c18:	fb02 3311 	mls	r3, r2, r1, r3
 8008c1c:	5cc3      	ldrb	r3, [r0, r3]
 8008c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c22:	460b      	mov	r3, r1
 8008c24:	2900      	cmp	r1, #0
 8008c26:	d1f5      	bne.n	8008c14 <_printf_i+0x16c>
 8008c28:	e7b9      	b.n	8008b9e <_printf_i+0xf6>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	6825      	ldr	r5, [r4, #0]
 8008c2e:	6961      	ldr	r1, [r4, #20]
 8008c30:	1d18      	adds	r0, r3, #4
 8008c32:	6010      	str	r0, [r2, #0]
 8008c34:	0628      	lsls	r0, r5, #24
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	d501      	bpl.n	8008c3e <_printf_i+0x196>
 8008c3a:	6019      	str	r1, [r3, #0]
 8008c3c:	e002      	b.n	8008c44 <_printf_i+0x19c>
 8008c3e:	066a      	lsls	r2, r5, #25
 8008c40:	d5fb      	bpl.n	8008c3a <_printf_i+0x192>
 8008c42:	8019      	strh	r1, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	6123      	str	r3, [r4, #16]
 8008c48:	4665      	mov	r5, ip
 8008c4a:	e7b9      	b.n	8008bc0 <_printf_i+0x118>
 8008c4c:	6813      	ldr	r3, [r2, #0]
 8008c4e:	1d19      	adds	r1, r3, #4
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	681d      	ldr	r5, [r3, #0]
 8008c54:	6862      	ldr	r2, [r4, #4]
 8008c56:	2100      	movs	r1, #0
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f7f7 fab9 	bl	80001d0 <memchr>
 8008c5e:	b108      	cbz	r0, 8008c64 <_printf_i+0x1bc>
 8008c60:	1b40      	subs	r0, r0, r5
 8008c62:	6060      	str	r0, [r4, #4]
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6e:	e7a7      	b.n	8008bc0 <_printf_i+0x118>
 8008c70:	6923      	ldr	r3, [r4, #16]
 8008c72:	462a      	mov	r2, r5
 8008c74:	4639      	mov	r1, r7
 8008c76:	4630      	mov	r0, r6
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d0aa      	beq.n	8008bd4 <_printf_i+0x12c>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	079b      	lsls	r3, r3, #30
 8008c82:	d413      	bmi.n	8008cac <_printf_i+0x204>
 8008c84:	68e0      	ldr	r0, [r4, #12]
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	4298      	cmp	r0, r3
 8008c8a:	bfb8      	it	lt
 8008c8c:	4618      	movlt	r0, r3
 8008c8e:	e7a3      	b.n	8008bd8 <_printf_i+0x130>
 8008c90:	2301      	movs	r3, #1
 8008c92:	464a      	mov	r2, r9
 8008c94:	4639      	mov	r1, r7
 8008c96:	4630      	mov	r0, r6
 8008c98:	47c0      	blx	r8
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d09a      	beq.n	8008bd4 <_printf_i+0x12c>
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	68e3      	ldr	r3, [r4, #12]
 8008ca2:	9a03      	ldr	r2, [sp, #12]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	dcf2      	bgt.n	8008c90 <_printf_i+0x1e8>
 8008caa:	e7eb      	b.n	8008c84 <_printf_i+0x1dc>
 8008cac:	2500      	movs	r5, #0
 8008cae:	f104 0919 	add.w	r9, r4, #25
 8008cb2:	e7f5      	b.n	8008ca0 <_printf_i+0x1f8>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1ac      	bne.n	8008c12 <_printf_i+0x16a>
 8008cb8:	7803      	ldrb	r3, [r0, #0]
 8008cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc2:	e76c      	b.n	8008b9e <_printf_i+0xf6>
 8008cc4:	0800bdc1 	.word	0x0800bdc1
 8008cc8:	0800bdd2 	.word	0x0800bdd2

08008ccc <memcpy>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	1e43      	subs	r3, r0, #1
 8008cd0:	440a      	add	r2, r1
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	d100      	bne.n	8008cd8 <memcpy+0xc>
 8008cd6:	bd10      	pop	{r4, pc}
 8008cd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ce0:	e7f7      	b.n	8008cd2 <memcpy+0x6>
	...

08008ce4 <_free_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d045      	beq.n	8008d78 <_free_r+0x94>
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f0c      	subs	r4, r1, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfb8      	it	lt
 8008cf6:	18e4      	addlt	r4, r4, r3
 8008cf8:	f000 f8d2 	bl	8008ea0 <__malloc_lock>
 8008cfc:	4a1f      	ldr	r2, [pc, #124]	; (8008d7c <_free_r+0x98>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	4610      	mov	r0, r2
 8008d02:	b933      	cbnz	r3, 8008d12 <_free_r+0x2e>
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	6014      	str	r4, [r2, #0]
 8008d08:	4628      	mov	r0, r5
 8008d0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d0e:	f000 b8c8 	b.w	8008ea2 <__malloc_unlock>
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	d90c      	bls.n	8008d30 <_free_r+0x4c>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	1862      	adds	r2, r4, r1
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	bf04      	itt	eq
 8008d1e:	681a      	ldreq	r2, [r3, #0]
 8008d20:	685b      	ldreq	r3, [r3, #4]
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	bf04      	itt	eq
 8008d26:	1852      	addeq	r2, r2, r1
 8008d28:	6022      	streq	r2, [r4, #0]
 8008d2a:	6004      	str	r4, [r0, #0]
 8008d2c:	e7ec      	b.n	8008d08 <_free_r+0x24>
 8008d2e:	4613      	mov	r3, r2
 8008d30:	685a      	ldr	r2, [r3, #4]
 8008d32:	b10a      	cbz	r2, 8008d38 <_free_r+0x54>
 8008d34:	42a2      	cmp	r2, r4
 8008d36:	d9fa      	bls.n	8008d2e <_free_r+0x4a>
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	1858      	adds	r0, r3, r1
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d10b      	bne.n	8008d58 <_free_r+0x74>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	4401      	add	r1, r0
 8008d44:	1858      	adds	r0, r3, r1
 8008d46:	4282      	cmp	r2, r0
 8008d48:	6019      	str	r1, [r3, #0]
 8008d4a:	d1dd      	bne.n	8008d08 <_free_r+0x24>
 8008d4c:	6810      	ldr	r0, [r2, #0]
 8008d4e:	6852      	ldr	r2, [r2, #4]
 8008d50:	605a      	str	r2, [r3, #4]
 8008d52:	4401      	add	r1, r0
 8008d54:	6019      	str	r1, [r3, #0]
 8008d56:	e7d7      	b.n	8008d08 <_free_r+0x24>
 8008d58:	d902      	bls.n	8008d60 <_free_r+0x7c>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	e7d3      	b.n	8008d08 <_free_r+0x24>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	1821      	adds	r1, r4, r0
 8008d64:	428a      	cmp	r2, r1
 8008d66:	bf04      	itt	eq
 8008d68:	6811      	ldreq	r1, [r2, #0]
 8008d6a:	6852      	ldreq	r2, [r2, #4]
 8008d6c:	6062      	str	r2, [r4, #4]
 8008d6e:	bf04      	itt	eq
 8008d70:	1809      	addeq	r1, r1, r0
 8008d72:	6021      	streq	r1, [r4, #0]
 8008d74:	605c      	str	r4, [r3, #4]
 8008d76:	e7c7      	b.n	8008d08 <_free_r+0x24>
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000085c 	.word	0x2000085c

08008d80 <_malloc_r>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	1ccd      	adds	r5, r1, #3
 8008d84:	f025 0503 	bic.w	r5, r5, #3
 8008d88:	3508      	adds	r5, #8
 8008d8a:	2d0c      	cmp	r5, #12
 8008d8c:	bf38      	it	cc
 8008d8e:	250c      	movcc	r5, #12
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	4606      	mov	r6, r0
 8008d94:	db01      	blt.n	8008d9a <_malloc_r+0x1a>
 8008d96:	42a9      	cmp	r1, r5
 8008d98:	d903      	bls.n	8008da2 <_malloc_r+0x22>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	2000      	movs	r0, #0
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
 8008da2:	f000 f87d 	bl	8008ea0 <__malloc_lock>
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <_malloc_r+0xac>)
 8008da8:	6814      	ldr	r4, [r2, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	b991      	cbnz	r1, 8008dd4 <_malloc_r+0x54>
 8008dae:	4c20      	ldr	r4, [pc, #128]	; (8008e30 <_malloc_r+0xb0>)
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	b91b      	cbnz	r3, 8008dbc <_malloc_r+0x3c>
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 f863 	bl	8008e80 <_sbrk_r>
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f000 f85e 	bl	8008e80 <_sbrk_r>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d124      	bne.n	8008e12 <_malloc_r+0x92>
 8008dc8:	230c      	movs	r3, #12
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 f868 	bl	8008ea2 <__malloc_unlock>
 8008dd2:	e7e4      	b.n	8008d9e <_malloc_r+0x1e>
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	1b5b      	subs	r3, r3, r5
 8008dd8:	d418      	bmi.n	8008e0c <_malloc_r+0x8c>
 8008dda:	2b0b      	cmp	r3, #11
 8008ddc:	d90f      	bls.n	8008dfe <_malloc_r+0x7e>
 8008dde:	600b      	str	r3, [r1, #0]
 8008de0:	50cd      	str	r5, [r1, r3]
 8008de2:	18cc      	adds	r4, r1, r3
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 f85c 	bl	8008ea2 <__malloc_unlock>
 8008dea:	f104 000b 	add.w	r0, r4, #11
 8008dee:	1d23      	adds	r3, r4, #4
 8008df0:	f020 0007 	bic.w	r0, r0, #7
 8008df4:	1ac3      	subs	r3, r0, r3
 8008df6:	d0d3      	beq.n	8008da0 <_malloc_r+0x20>
 8008df8:	425a      	negs	r2, r3
 8008dfa:	50e2      	str	r2, [r4, r3]
 8008dfc:	e7d0      	b.n	8008da0 <_malloc_r+0x20>
 8008dfe:	428c      	cmp	r4, r1
 8008e00:	684b      	ldr	r3, [r1, #4]
 8008e02:	bf16      	itet	ne
 8008e04:	6063      	strne	r3, [r4, #4]
 8008e06:	6013      	streq	r3, [r2, #0]
 8008e08:	460c      	movne	r4, r1
 8008e0a:	e7eb      	b.n	8008de4 <_malloc_r+0x64>
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	6849      	ldr	r1, [r1, #4]
 8008e10:	e7cc      	b.n	8008dac <_malloc_r+0x2c>
 8008e12:	1cc4      	adds	r4, r0, #3
 8008e14:	f024 0403 	bic.w	r4, r4, #3
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	d005      	beq.n	8008e28 <_malloc_r+0xa8>
 8008e1c:	1a21      	subs	r1, r4, r0
 8008e1e:	4630      	mov	r0, r6
 8008e20:	f000 f82e 	bl	8008e80 <_sbrk_r>
 8008e24:	3001      	adds	r0, #1
 8008e26:	d0cf      	beq.n	8008dc8 <_malloc_r+0x48>
 8008e28:	6025      	str	r5, [r4, #0]
 8008e2a:	e7db      	b.n	8008de4 <_malloc_r+0x64>
 8008e2c:	2000085c 	.word	0x2000085c
 8008e30:	20000860 	.word	0x20000860

08008e34 <_realloc_r>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	4607      	mov	r7, r0
 8008e38:	4614      	mov	r4, r2
 8008e3a:	460e      	mov	r6, r1
 8008e3c:	b921      	cbnz	r1, 8008e48 <_realloc_r+0x14>
 8008e3e:	4611      	mov	r1, r2
 8008e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e44:	f7ff bf9c 	b.w	8008d80 <_malloc_r>
 8008e48:	b922      	cbnz	r2, 8008e54 <_realloc_r+0x20>
 8008e4a:	f7ff ff4b 	bl	8008ce4 <_free_r>
 8008e4e:	4625      	mov	r5, r4
 8008e50:	4628      	mov	r0, r5
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	f000 f826 	bl	8008ea4 <_malloc_usable_size_r>
 8008e58:	42a0      	cmp	r0, r4
 8008e5a:	d20f      	bcs.n	8008e7c <_realloc_r+0x48>
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f7ff ff8e 	bl	8008d80 <_malloc_r>
 8008e64:	4605      	mov	r5, r0
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0f2      	beq.n	8008e50 <_realloc_r+0x1c>
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	f7ff ff2d 	bl	8008ccc <memcpy>
 8008e72:	4631      	mov	r1, r6
 8008e74:	4638      	mov	r0, r7
 8008e76:	f7ff ff35 	bl	8008ce4 <_free_r>
 8008e7a:	e7e9      	b.n	8008e50 <_realloc_r+0x1c>
 8008e7c:	4635      	mov	r5, r6
 8008e7e:	e7e7      	b.n	8008e50 <_realloc_r+0x1c>

08008e80 <_sbrk_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4c06      	ldr	r4, [pc, #24]	; (8008e9c <_sbrk_r+0x1c>)
 8008e84:	2300      	movs	r3, #0
 8008e86:	4605      	mov	r5, r0
 8008e88:	4608      	mov	r0, r1
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	f7f8 fd16 	bl	80018bc <_sbrk>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d102      	bne.n	8008e9a <_sbrk_r+0x1a>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	b103      	cbz	r3, 8008e9a <_sbrk_r+0x1a>
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	20001814 	.word	0x20001814

08008ea0 <__malloc_lock>:
 8008ea0:	4770      	bx	lr

08008ea2 <__malloc_unlock>:
 8008ea2:	4770      	bx	lr

08008ea4 <_malloc_usable_size_r>:
 8008ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ea8:	1f18      	subs	r0, r3, #4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbc      	itt	lt
 8008eae:	580b      	ldrlt	r3, [r1, r0]
 8008eb0:	18c0      	addlt	r0, r0, r3
 8008eb2:	4770      	bx	lr

08008eb4 <_init>:
 8008eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb6:	bf00      	nop
 8008eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eba:	bc08      	pop	{r3}
 8008ebc:	469e      	mov	lr, r3
 8008ebe:	4770      	bx	lr

08008ec0 <_fini>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	bf00      	nop
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr
